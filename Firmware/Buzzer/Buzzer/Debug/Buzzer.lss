
Buzzer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000011c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000c8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000011c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000014c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  0000018c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007e5  00000000  00000000  000001b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006d7  00000000  00000000  00000999  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000029d  00000000  00000000  00001070  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001310  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003ab  00000000  00000000  00001344  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000014  00000000  00000000  000016ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001703  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 42 00 	call	0x84	; 0x84 <main>
  78:	0c 94 62 00 	jmp	0xc4	; 0xc4 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <initializeBuzzer>:
		_delay_ms(500);
    }
}

void initializeBuzzer() {
	DDRC |= (1<<BUZZER_PIN);
  80:	3c 9a       	sbi	0x07, 4	; 7
  82:	08 95       	ret

00000084 <main>:
void initializeBuzzer();

int main(void)
{
    /* Replace with your application code */
	initializeBuzzer();
  84:	0e 94 40 00 	call	0x80	; 0x80 <initializeBuzzer>
#define BUZZER_PIN PORTC4

void initializeBuzzer();

int main(void)
{
  88:	30 e0       	ldi	r19, 0x00	; 0
  8a:	20 e0       	ldi	r18, 0x00	; 0
  8c:	83 2f       	mov	r24, r19
  8e:	92 2f       	mov	r25, r18
    /* Replace with your application code */
	initializeBuzzer();
    while (1) 
    {
		for (long i=0; i<20; i++) {
			PORTC |= (1<<BUZZER_PIN);
  90:	44 9a       	sbi	0x08, 4	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  92:	e9 e9       	ldi	r30, 0x99	; 153
  94:	f5 e1       	ldi	r31, 0x15	; 21
  96:	31 97       	sbiw	r30, 0x01	; 1
  98:	f1 f7       	brne	.-4      	; 0x96 <main+0x12>
  9a:	00 c0       	rjmp	.+0      	; 0x9c <main+0x18>
			_delay_us(2000.0);
			PORTC &= ~(1<<BUZZER_PIN);
  9c:	44 98       	cbi	0x08, 4	; 8
  9e:	e9 e9       	ldi	r30, 0x99	; 153
  a0:	f5 e1       	ldi	r31, 0x15	; 21
  a2:	31 97       	sbiw	r30, 0x01	; 1
  a4:	f1 f7       	brne	.-4      	; 0xa2 <main+0x1e>
  a6:	00 c0       	rjmp	.+0      	; 0xa8 <main+0x24>
  a8:	01 96       	adiw	r24, 0x01	; 1
{
    /* Replace with your application code */
	initializeBuzzer();
    while (1) 
    {
		for (long i=0; i<20; i++) {
  aa:	84 31       	cpi	r24, 0x14	; 20
  ac:	91 05       	cpc	r25, r1
  ae:	81 f7       	brne	.-32     	; 0x90 <main+0xc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b0:	ff ef       	ldi	r31, 0xFF	; 255
  b2:	4f ed       	ldi	r20, 0xDF	; 223
  b4:	80 e1       	ldi	r24, 0x10	; 16
  b6:	f1 50       	subi	r31, 0x01	; 1
  b8:	40 40       	sbci	r20, 0x00	; 0
  ba:	80 40       	sbci	r24, 0x00	; 0
  bc:	e1 f7       	brne	.-8      	; 0xb6 <main+0x32>
  be:	00 c0       	rjmp	.+0      	; 0xc0 <main+0x3c>
  c0:	00 00       	nop
  c2:	e4 cf       	rjmp	.-56     	; 0x8c <main+0x8>

000000c4 <_exit>:
  c4:	f8 94       	cli

000000c6 <__stop_program>:
  c6:	ff cf       	rjmp	.-2      	; 0xc6 <__stop_program>
