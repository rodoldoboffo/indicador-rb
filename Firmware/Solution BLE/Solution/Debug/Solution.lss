
Solution.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  000006a4  00000738  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006a4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001a  00800116  00800116  0000074e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000074e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000780  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000128  00000000  00000000  000007c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000015fc  00000000  00000000  000008e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b2e  00000000  00000000  00001ee4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a9a  00000000  00000000  00002a12  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000320  00000000  00000000  000034ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006d6  00000000  00000000  000037cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ba4  00000000  00000000  00003ea2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  00004a46  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__vector_5>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 ea       	ldi	r30, 0xA4	; 164
  7c:	f6 e0       	ldi	r31, 0x06	; 6
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 31       	cpi	r26, 0x16	; 22
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e1       	ldi	r26, 0x16	; 22
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 33       	cpi	r26, 0x30	; 48
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 87 00 	call	0x10e	; 0x10e <main>
  9e:	0c 94 50 03 	jmp	0x6a0	; 0x6a0 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <adcInitialize>:
#include "ads1231.h"
#include <avr/io.h>
#include <util/delay.h>

void adcInitialize(unsigned char speed) {
	DDRC |= (1<<ADC_SPEED_PIN) | (1<<ADC_PDWN_PIN) | (1<<ADC_SCLK_PIN);
  a6:	97 b1       	in	r25, 0x07	; 7
  a8:	97 60       	ori	r25, 0x07	; 7
  aa:	97 b9       	out	0x07, r25	; 7
	DDRC &= ~(1<<ADC_DOUT_PIN);
  ac:	3b 98       	cbi	0x07, 3	; 7
	PORTC |= (1<<ADC_DOUT_PIN) | (1<<ADC_PDWN_PIN);
  ae:	98 b1       	in	r25, 0x08	; 8
  b0:	9a 60       	ori	r25, 0x0A	; 10
  b2:	98 b9       	out	0x08, r25	; 8
	PORTC &= ~(1<<ADC_SCLK_PIN);
  b4:	42 98       	cbi	0x08, 2	; 8
	if (speed)
  b6:	81 11       	cpse	r24, r1
		PORTC |= (1<<ADC_SPEED_PIN);
  b8:	40 9a       	sbi	0x08, 0	; 8
  ba:	08 95       	ret

000000bc <adcFetchData>:
long int adcFetchData() {
	unsigned char i, j;
	long int d = 0UL, temp;
	for (j=0; j<DIGITAL_FILTER; ) {
		temp = 0UL;
		while ((PINC & (1<<ADC_DOUT_PIN)));
  bc:	33 99       	sbic	0x06, 3	; 6
  be:	fe cf       	rjmp	.-4      	; 0xbc <adcFetchData>
  c0:	28 e1       	ldi	r18, 0x18	; 24
  c2:	80 e0       	ldi	r24, 0x00	; 0
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	dc 01       	movw	r26, r24
		for (i=0; i<24; i++) {
			PORTC |= (1<<ADC_SCLK_PIN);
  c8:	42 9a       	sbi	0x08, 2	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ca:	35 e2       	ldi	r19, 0x25	; 37
  cc:	3a 95       	dec	r19
  ce:	f1 f7       	brne	.-4      	; 0xcc <adcFetchData+0x10>
			_delay_us(10);
			PORTC &= ~(1<<ADC_SCLK_PIN);
  d0:	42 98       	cbi	0x08, 2	; 8
			temp <<= 1;
  d2:	88 0f       	add	r24, r24
  d4:	99 1f       	adc	r25, r25
  d6:	aa 1f       	adc	r26, r26
  d8:	bb 1f       	adc	r27, r27
			if (PINC & (1<<ADC_DOUT_PIN)) temp |= 0x01;
  da:	33 99       	sbic	0x06, 3	; 6
  dc:	81 60       	ori	r24, 0x01	; 1
  de:	35 e2       	ldi	r19, 0x25	; 37
  e0:	3a 95       	dec	r19
  e2:	f1 f7       	brne	.-4      	; 0xe0 <adcFetchData+0x24>
  e4:	21 50       	subi	r18, 0x01	; 1
	unsigned char i, j;
	long int d = 0UL, temp;
	for (j=0; j<DIGITAL_FILTER; ) {
		temp = 0UL;
		while ((PINC & (1<<ADC_DOUT_PIN)));
		for (i=0; i<24; i++) {
  e6:	81 f7       	brne	.-32     	; 0xc8 <adcFetchData+0xc>
			PORTC &= ~(1<<ADC_SCLK_PIN);
			temp <<= 1;
			if (PINC & (1<<ADC_DOUT_PIN)) temp |= 0x01;
			_delay_us(10);
		}
		PORTC |= (1<<ADC_SCLK_PIN);
  e8:	42 9a       	sbi	0x08, 2	; 8
  ea:	25 e2       	ldi	r18, 0x25	; 37
  ec:	2a 95       	dec	r18
  ee:	f1 f7       	brne	.-4      	; 0xec <adcFetchData+0x30>
		_delay_us(10);
		PORTC &= ~(1<<ADC_SCLK_PIN);
  f0:	42 98       	cbi	0x08, 2	; 8
  f2:	35 e2       	ldi	r19, 0x25	; 37
  f4:	3a 95       	dec	r19
  f6:	f1 f7       	brne	.-4      	; 0xf4 <adcFetchData+0x38>
		_delay_us(10);
		if (temp & 0x800000) temp = temp | 0xFF000000;
  f8:	a7 fd       	sbrc	r26, 7
  fa:	bf 6f       	ori	r27, 0xFF	; 255
		if (temp != -1L) { // desconsidera o ponto -1. parece algum problema do AD. preciso investigar melhor.
  fc:	8f 3f       	cpi	r24, 0xFF	; 255
  fe:	2f ef       	ldi	r18, 0xFF	; 255
 100:	92 07       	cpc	r25, r18
 102:	a2 07       	cpc	r26, r18
 104:	b2 07       	cpc	r27, r18
 106:	d1 f2       	breq	.-76     	; 0xbc <adcFetchData>
			j++;
		}
	}
	d /= DIGITAL_FILTER;
	return d;
 108:	bc 01       	movw	r22, r24
 10a:	cd 01       	movw	r24, r26
 10c:	08 95       	ret

0000010e <main>:
#include "indicator.h"
#include <util/delay.h>

int main(void)
{
	initializeSystem();
 10e:	0e 94 92 00 	call	0x124	; 0x124 <initializeSystem>
	while (1)
	{
		processBLEMessages();
 112:	0e 94 b7 00 	call	0x16e	; 0x16e <processBLEMessages>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 116:	8f ef       	ldi	r24, 0xFF	; 255
 118:	9b e6       	ldi	r25, 0x6B	; 107
 11a:	01 97       	sbiw	r24, 0x01	; 1
 11c:	f1 f7       	brne	.-4      	; 0x11a <main+0xc>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <main+0x12>
 120:	00 00       	nop
 122:	f7 cf       	rjmp	.-18     	; 0x112 <main+0x4>

00000124 <initializeSystem>:
const unsigned char BLE_AD_VAL_COMMAND[] = "adval=";
const unsigned char GET_VAL_COMMAND[] = "getv";
const unsigned char READY[] = "ready\n";

void initializeSystem() {
	initBleUARTSend();
 124:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <initBleUARTSend>
	initBleUARTReceive();
 128:	0e 94 67 01 	call	0x2ce	; 0x2ce <initBleUARTReceive>
	adcInitialize(0);
 12c:	80 e0       	ldi	r24, 0x00	; 0
 12e:	0e 94 53 00 	call	0xa6	; 0xa6 <adcInitialize>
	
	//initializeRelay(!overflowProtectionMode);
	//_delay_ms(800);

	bleSerialPrint(READY);
 132:	82 e0       	ldi	r24, 0x02	; 2
 134:	91 e0       	ldi	r25, 0x01	; 1
 136:	0e 94 b3 01 	call	0x366	; 0x366 <bleSerialPrint>
 13a:	08 95       	ret

0000013c <bleSendADValue>:
			//bleSerialPrint(";rlyoff;");
		//}
	}
}

void bleSendADValue() {
 13c:	cf 92       	push	r12
 13e:	df 92       	push	r13
 140:	ef 92       	push	r14
 142:	ff 92       	push	r15
	long int adValue = adcFetchData();
 144:	0e 94 5e 00 	call	0xbc	; 0xbc <adcFetchData>
 148:	6b 01       	movw	r12, r22
 14a:	7c 01       	movw	r14, r24
	bleSerialPrint(BLE_AD_VAL_COMMAND);
 14c:	8e e0       	ldi	r24, 0x0E	; 14
 14e:	91 e0       	ldi	r25, 0x01	; 1
 150:	0e 94 b3 01 	call	0x366	; 0x366 <bleSerialPrint>
	bleSerialPrintLong(adValue);
 154:	c7 01       	movw	r24, r14
 156:	b6 01       	movw	r22, r12
 158:	0e 94 c9 01 	call	0x392	; 0x392 <bleSerialPrintLong>
	bleSerialPrint(";");
 15c:	80 e0       	ldi	r24, 0x00	; 0
 15e:	91 e0       	ldi	r25, 0x01	; 1
 160:	0e 94 b3 01 	call	0x366	; 0x366 <bleSerialPrint>
}
 164:	ff 90       	pop	r15
 166:	ef 90       	pop	r14
 168:	df 90       	pop	r13
 16a:	cf 90       	pop	r12
 16c:	08 95       	ret

0000016e <processBLEMessages>:
	//_delay_ms(800);

	bleSerialPrint(READY);
}

void processBLEMessages() {
 16e:	ef 92       	push	r14
 170:	ff 92       	push	r15
 172:	0f 93       	push	r16
 174:	1f 93       	push	r17
 176:	cf 93       	push	r28
 178:	df 93       	push	r29
 17a:	cd b7       	in	r28, 0x3d	; 61
 17c:	de b7       	in	r29, 0x3e	; 62
 17e:	a4 97       	sbiw	r28, 0x24	; 36
 180:	0f b6       	in	r0, 0x3f	; 63
 182:	f8 94       	cli
 184:	de bf       	out	0x3e, r29	; 62
 186:	0f be       	out	0x3f, r0	; 63
 188:	cd bf       	out	0x3d, r28	; 61
	unsigned char commandBuffer[36];
	while (serialBleFind(';') != -1) {
		bleBufferReadUntil(';', commandBuffer);
 18a:	ce 01       	movw	r24, r28
 18c:	01 96       	adiw	r24, 0x01	; 1
 18e:	7c 01       	movw	r14, r24
 190:	08 2f       	mov	r16, r24
 192:	1f 2d       	mov	r17, r15
	bleSerialPrint(READY);
}

void processBLEMessages() {
	unsigned char commandBuffer[36];
	while (serialBleFind(';') != -1) {
 194:	10 c0       	rjmp	.+32     	; 0x1b6 <processBLEMessages+0x48>
		bleBufferReadUntil(';', commandBuffer);
 196:	60 2f       	mov	r22, r16
 198:	71 2f       	mov	r23, r17
 19a:	8b e3       	ldi	r24, 0x3B	; 59
 19c:	0e 94 ac 02 	call	0x558	; 0x558 <bleBufferReadUntil>
		if ((unsigned char *)strstr(commandBuffer, GET_VAL_COMMAND) == commandBuffer) {
 1a0:	69 e0       	ldi	r22, 0x09	; 9
 1a2:	71 e0       	ldi	r23, 0x01	; 1
 1a4:	80 2f       	mov	r24, r16
 1a6:	91 2f       	mov	r25, r17
 1a8:	0e 94 f5 02 	call	0x5ea	; 0x5ea <strstr>
 1ac:	e8 16       	cp	r14, r24
 1ae:	f9 06       	cpc	r15, r25
 1b0:	11 f4       	brne	.+4      	; 0x1b6 <processBLEMessages+0x48>
			bleSendADValue();
 1b2:	0e 94 9e 00 	call	0x13c	; 0x13c <bleSendADValue>
	bleSerialPrint(READY);
}

void processBLEMessages() {
	unsigned char commandBuffer[36];
	while (serialBleFind(';') != -1) {
 1b6:	8b e3       	ldi	r24, 0x3B	; 59
 1b8:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <serialBleFind>
 1bc:	01 96       	adiw	r24, 0x01	; 1
 1be:	59 f7       	brne	.-42     	; 0x196 <processBLEMessages+0x28>
		//else if ((unsigned char *)strstr(commandBuffer, "rly0") == commandBuffer) {
			//relayTurnOff();
			//bleSerialPrint(";rlyoff;");
		//}
	}
}
 1c0:	a4 96       	adiw	r28, 0x24	; 36
 1c2:	0f b6       	in	r0, 0x3f	; 63
 1c4:	f8 94       	cli
 1c6:	de bf       	out	0x3e, r29	; 62
 1c8:	0f be       	out	0x3f, r0	; 63
 1ca:	cd bf       	out	0x3d, r28	; 61
 1cc:	df 91       	pop	r29
 1ce:	cf 91       	pop	r28
 1d0:	1f 91       	pop	r17
 1d2:	0f 91       	pop	r16
 1d4:	ff 90       	pop	r15
 1d6:	ef 90       	pop	r14
 1d8:	08 95       	ret

000001da <disableBleInterupt>:
}

void bleBufferReadAll(unsigned char *buffer) {
	unsigned char bufferLen = (bleInBufferEndIndex-bleInBufferStartIndex+BLE_BUFFER_SIZE)%BLE_BUFFER_SIZE;
	if (bufferLen > 0) {
		bleBufferRead(bufferLen, buffer);
 1da:	ed e6       	ldi	r30, 0x6D	; 109
 1dc:	f0 e0       	ldi	r31, 0x00	; 0
 1de:	80 81       	ld	r24, Z
 1e0:	8f 77       	andi	r24, 0x7F	; 127
 1e2:	80 83       	st	Z, r24
 1e4:	08 95       	ret

000001e6 <enableBleInterupt>:
 1e6:	ed e6       	ldi	r30, 0x6D	; 109
 1e8:	f0 e0       	ldi	r31, 0x00	; 0
 1ea:	80 81       	ld	r24, Z
 1ec:	80 68       	ori	r24, 0x80	; 128
 1ee:	80 83       	st	Z, r24
 1f0:	08 95       	ret

000001f2 <__vector_5>:
 1f2:	1f 92       	push	r1
 1f4:	0f 92       	push	r0
 1f6:	0f b6       	in	r0, 0x3f	; 63
 1f8:	0f 92       	push	r0
 1fa:	11 24       	eor	r1, r1
 1fc:	2f 93       	push	r18
 1fe:	3f 93       	push	r19
 200:	4f 93       	push	r20
 202:	5f 93       	push	r21
 204:	6f 93       	push	r22
 206:	7f 93       	push	r23
 208:	8f 93       	push	r24
 20a:	9f 93       	push	r25
 20c:	af 93       	push	r26
 20e:	bf 93       	push	r27
 210:	ef 93       	push	r30
 212:	ff 93       	push	r31
 214:	0e 94 ed 00 	call	0x1da	; 0x1da <disableBleInterupt>
 218:	4f 99       	sbic	0x09, 7	; 9
 21a:	39 c0       	rjmp	.+114    	; 0x28e <__vector_5+0x9c>
 21c:	80 e4       	ldi	r24, 0x40	; 64
 21e:	92 e0       	ldi	r25, 0x02	; 2
 220:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 224:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 228:	e1 e8       	ldi	r30, 0x81	; 129
 22a:	f0 e0       	ldi	r31, 0x00	; 0
 22c:	80 81       	ld	r24, Z
 22e:	81 60       	ori	r24, 0x01	; 1
 230:	80 83       	st	Z, r24
 232:	b1 9b       	sbis	0x16, 1	; 22
 234:	fe cf       	rjmp	.-4      	; 0x232 <__vector_5+0x40>
 236:	e1 e8       	ldi	r30, 0x81	; 129
 238:	f0 e0       	ldi	r31, 0x00	; 0
 23a:	80 81       	ld	r24, Z
 23c:	8e 7f       	andi	r24, 0xFE	; 254
 23e:	80 83       	st	Z, r24
 240:	b1 9a       	sbi	0x16, 1	; 22
 242:	80 e8       	ldi	r24, 0x80	; 128
 244:	94 e0       	ldi	r25, 0x04	; 4
 246:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 24a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 24e:	98 e0       	ldi	r25, 0x08	; 8
 250:	20 e0       	ldi	r18, 0x00	; 0
 252:	26 95       	lsr	r18
 254:	80 81       	ld	r24, Z
 256:	81 60       	ori	r24, 0x01	; 1
 258:	80 83       	st	Z, r24
 25a:	b1 9b       	sbis	0x16, 1	; 22
 25c:	fe cf       	rjmp	.-4      	; 0x25a <__vector_5+0x68>
 25e:	80 81       	ld	r24, Z
 260:	8e 7f       	andi	r24, 0xFE	; 254
 262:	80 83       	st	Z, r24
 264:	4f 99       	sbic	0x09, 7	; 9
 266:	20 68       	ori	r18, 0x80	; 128
 268:	b1 9a       	sbi	0x16, 1	; 22
 26a:	91 50       	subi	r25, 0x01	; 1
 26c:	91 f7       	brne	.-28     	; 0x252 <__vector_5+0x60>
 26e:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <__data_end>
 272:	f0 e0       	ldi	r31, 0x00	; 0
 274:	e8 5e       	subi	r30, 0xE8	; 232
 276:	fe 4f       	sbci	r31, 0xFE	; 254
 278:	20 83       	st	Z, r18
 27a:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end>
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	01 96       	adiw	r24, 0x01	; 1
 282:	68 e1       	ldi	r22, 0x18	; 24
 284:	70 e0       	ldi	r23, 0x00	; 0
 286:	0e 94 be 02 	call	0x57c	; 0x57c <__divmodhi4>
 28a:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <__data_end>
 28e:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <enableBleInterupt>
 292:	ff 91       	pop	r31
 294:	ef 91       	pop	r30
 296:	bf 91       	pop	r27
 298:	af 91       	pop	r26
 29a:	9f 91       	pop	r25
 29c:	8f 91       	pop	r24
 29e:	7f 91       	pop	r23
 2a0:	6f 91       	pop	r22
 2a2:	5f 91       	pop	r21
 2a4:	4f 91       	pop	r20
 2a6:	3f 91       	pop	r19
 2a8:	2f 91       	pop	r18
 2aa:	0f 90       	pop	r0
 2ac:	0f be       	out	0x3f, r0	; 63
 2ae:	0f 90       	pop	r0
 2b0:	1f 90       	pop	r1
 2b2:	18 95       	reti

000002b4 <initBleUARTSend>:
 2b4:	56 9a       	sbi	0x0a, 6	; 10
 2b6:	e1 e8       	ldi	r30, 0x81	; 129
 2b8:	f0 e0       	ldi	r31, 0x00	; 0
 2ba:	80 81       	ld	r24, Z
 2bc:	88 60       	ori	r24, 0x08	; 8
 2be:	80 83       	st	Z, r24
 2c0:	80 e8       	ldi	r24, 0x80	; 128
 2c2:	94 e0       	ldi	r25, 0x04	; 4
 2c4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 2c8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 2cc:	08 95       	ret

000002ce <initBleUARTReceive>:
 2ce:	57 98       	cbi	0x0a, 7	; 10
 2d0:	5f 98       	cbi	0x0b, 7	; 11
 2d2:	e1 e8       	ldi	r30, 0x81	; 129
 2d4:	f0 e0       	ldi	r31, 0x00	; 0
 2d6:	80 81       	ld	r24, Z
 2d8:	88 60       	ori	r24, 0x08	; 8
 2da:	80 83       	st	Z, r24
 2dc:	80 e8       	ldi	r24, 0x80	; 128
 2de:	94 e0       	ldi	r25, 0x04	; 4
 2e0:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 2e4:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 2e8:	e8 e6       	ldi	r30, 0x68	; 104
 2ea:	f0 e0       	ldi	r31, 0x00	; 0
 2ec:	80 81       	ld	r24, Z
 2ee:	84 60       	ori	r24, 0x04	; 4
 2f0:	80 83       	st	Z, r24
 2f2:	ed e6       	ldi	r30, 0x6D	; 109
 2f4:	f0 e0       	ldi	r31, 0x00	; 0
 2f6:	80 81       	ld	r24, Z
 2f8:	80 68       	ori	r24, 0x80	; 128
 2fa:	80 83       	st	Z, r24
 2fc:	78 94       	sei
 2fe:	08 95       	ret

00000300 <bleSendBit>:
 300:	cf 93       	push	r28
 302:	c8 2f       	mov	r28, r24
 304:	0e 94 ed 00 	call	0x1da	; 0x1da <disableBleInterupt>
 308:	e1 e8       	ldi	r30, 0x81	; 129
 30a:	f0 e0       	ldi	r31, 0x00	; 0
 30c:	80 81       	ld	r24, Z
 30e:	8e 7f       	andi	r24, 0xFE	; 254
 310:	80 83       	st	Z, r24
 312:	cc 23       	and	r28, r28
 314:	11 f0       	breq	.+4      	; 0x31a <bleSendBit+0x1a>
 316:	5e 9a       	sbi	0x0b, 6	; 11
 318:	01 c0       	rjmp	.+2      	; 0x31c <bleSendBit+0x1c>
 31a:	5e 98       	cbi	0x0b, 6	; 11
 31c:	e1 e8       	ldi	r30, 0x81	; 129
 31e:	f0 e0       	ldi	r31, 0x00	; 0
 320:	80 81       	ld	r24, Z
 322:	81 60       	ori	r24, 0x01	; 1
 324:	80 83       	st	Z, r24
 326:	b1 9b       	sbis	0x16, 1	; 22
 328:	fe cf       	rjmp	.-4      	; 0x326 <bleSendBit+0x26>
 32a:	b1 9a       	sbi	0x16, 1	; 22
 32c:	e1 e8       	ldi	r30, 0x81	; 129
 32e:	f0 e0       	ldi	r31, 0x00	; 0
 330:	80 81       	ld	r24, Z
 332:	8e 7f       	andi	r24, 0xFE	; 254
 334:	80 83       	st	Z, r24
 336:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <enableBleInterupt>
 33a:	cf 91       	pop	r28
 33c:	08 95       	ret

0000033e <bleSendByte>:
 33e:	cf 93       	push	r28
 340:	df 93       	push	r29
 342:	d8 2f       	mov	r29, r24
 344:	80 e0       	ldi	r24, 0x00	; 0
 346:	0e 94 80 01 	call	0x300	; 0x300 <bleSendBit>
 34a:	c8 e0       	ldi	r28, 0x08	; 8
 34c:	8d 2f       	mov	r24, r29
 34e:	81 70       	andi	r24, 0x01	; 1
 350:	0e 94 80 01 	call	0x300	; 0x300 <bleSendBit>
 354:	d6 95       	lsr	r29
 356:	c1 50       	subi	r28, 0x01	; 1
 358:	c9 f7       	brne	.-14     	; 0x34c <bleSendByte+0xe>
 35a:	81 e0       	ldi	r24, 0x01	; 1
 35c:	0e 94 80 01 	call	0x300	; 0x300 <bleSendBit>
 360:	df 91       	pop	r29
 362:	cf 91       	pop	r28
 364:	08 95       	ret

00000366 <bleSerialPrint>:
 366:	0f 93       	push	r16
 368:	1f 93       	push	r17
 36a:	cf 93       	push	r28
 36c:	fc 01       	movw	r30, r24
 36e:	80 81       	ld	r24, Z
 370:	88 23       	and	r24, r24
 372:	59 f0       	breq	.+22     	; 0x38a <bleSerialPrint+0x24>
 374:	8f 01       	movw	r16, r30
 376:	c0 e0       	ldi	r28, 0x00	; 0
 378:	0e 94 9f 01 	call	0x33e	; 0x33e <bleSendByte>
 37c:	cf 5f       	subi	r28, 0xFF	; 255
 37e:	f8 01       	movw	r30, r16
 380:	ec 0f       	add	r30, r28
 382:	f1 1d       	adc	r31, r1
 384:	80 81       	ld	r24, Z
 386:	81 11       	cpse	r24, r1
 388:	f7 cf       	rjmp	.-18     	; 0x378 <bleSerialPrint+0x12>
 38a:	cf 91       	pop	r28
 38c:	1f 91       	pop	r17
 38e:	0f 91       	pop	r16
 390:	08 95       	ret

00000392 <bleSerialPrintLong>:
 392:	cf 93       	push	r28
 394:	df 93       	push	r29
 396:	cd b7       	in	r28, 0x3d	; 61
 398:	de b7       	in	r29, 0x3e	; 62
 39a:	60 97       	sbiw	r28, 0x10	; 16
 39c:	0f b6       	in	r0, 0x3f	; 63
 39e:	f8 94       	cli
 3a0:	de bf       	out	0x3e, r29	; 62
 3a2:	0f be       	out	0x3f, r0	; 63
 3a4:	cd bf       	out	0x3d, r28	; 61
 3a6:	2a e0       	ldi	r18, 0x0A	; 10
 3a8:	ae 01       	movw	r20, r28
 3aa:	4f 5f       	subi	r20, 0xFF	; 255
 3ac:	5f 4f       	sbci	r21, 0xFF	; 255
 3ae:	0e 94 0f 03 	call	0x61e	; 0x61e <__ltoa_ncheck>
 3b2:	ce 01       	movw	r24, r28
 3b4:	01 96       	adiw	r24, 0x01	; 1
 3b6:	0e 94 b3 01 	call	0x366	; 0x366 <bleSerialPrint>
 3ba:	60 96       	adiw	r28, 0x10	; 16
 3bc:	0f b6       	in	r0, 0x3f	; 63
 3be:	f8 94       	cli
 3c0:	de bf       	out	0x3e, r29	; 62
 3c2:	0f be       	out	0x3f, r0	; 63
 3c4:	cd bf       	out	0x3d, r28	; 61
 3c6:	df 91       	pop	r29
 3c8:	cf 91       	pop	r28
 3ca:	08 95       	ret

000003cc <bleBufferRead>:
 3cc:	ef 92       	push	r14
 3ce:	ff 92       	push	r15
 3d0:	0f 93       	push	r16
 3d2:	1f 93       	push	r17
 3d4:	cf 93       	push	r28
 3d6:	df 93       	push	r29
 3d8:	ec 01       	movw	r28, r24
 3da:	8b 01       	movw	r16, r22
 3dc:	0e 94 ed 00 	call	0x1da	; 0x1da <disableBleInterupt>
 3e0:	28 e1       	ldi	r18, 0x18	; 24
 3e2:	30 e0       	ldi	r19, 0x00	; 0
 3e4:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end>
 3e8:	40 91 17 01 	lds	r20, 0x0117	; 0x800117 <bleInBufferStartIndex>
 3ec:	90 e0       	ldi	r25, 0x00	; 0
 3ee:	84 1b       	sub	r24, r20
 3f0:	91 09       	sbc	r25, r1
 3f2:	48 96       	adiw	r24, 0x18	; 24
 3f4:	b9 01       	movw	r22, r18
 3f6:	0e 94 be 02 	call	0x57c	; 0x57c <__divmodhi4>
 3fa:	8c 17       	cp	r24, r28
 3fc:	9d 07       	cpc	r25, r29
 3fe:	90 f3       	brcs	.-28     	; 0x3e4 <bleBufferRead+0x18>
 400:	20 97       	sbiw	r28, 0x00	; 0
 402:	69 f1       	breq	.+90     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 404:	f8 01       	movw	r30, r16
 406:	40 e0       	ldi	r20, 0x00	; 0
 408:	50 e0       	ldi	r21, 0x00	; 0
 40a:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <bleInBufferStartIndex>
 40e:	7a 01       	movw	r14, r20
 410:	e8 0e       	add	r14, r24
 412:	f1 1c       	adc	r15, r1
 414:	97 01       	movw	r18, r14
 416:	ab ea       	ldi	r26, 0xAB	; 171
 418:	ba ea       	ldi	r27, 0xAA	; 170
 41a:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <__umulhisi3>
 41e:	92 95       	swap	r25
 420:	82 95       	swap	r24
 422:	8f 70       	andi	r24, 0x0F	; 15
 424:	89 27       	eor	r24, r25
 426:	9f 70       	andi	r25, 0x0F	; 15
 428:	89 27       	eor	r24, r25
 42a:	9c 01       	movw	r18, r24
 42c:	22 0f       	add	r18, r18
 42e:	33 1f       	adc	r19, r19
 430:	82 0f       	add	r24, r18
 432:	93 1f       	adc	r25, r19
 434:	88 0f       	add	r24, r24
 436:	99 1f       	adc	r25, r25
 438:	88 0f       	add	r24, r24
 43a:	99 1f       	adc	r25, r25
 43c:	88 0f       	add	r24, r24
 43e:	99 1f       	adc	r25, r25
 440:	97 01       	movw	r18, r14
 442:	28 1b       	sub	r18, r24
 444:	39 0b       	sbc	r19, r25
 446:	d9 01       	movw	r26, r18
 448:	a8 5e       	subi	r26, 0xE8	; 232
 44a:	be 4f       	sbci	r27, 0xFE	; 254
 44c:	8c 91       	ld	r24, X
 44e:	81 93       	st	Z+, r24
 450:	4f 5f       	subi	r20, 0xFF	; 255
 452:	5f 4f       	sbci	r21, 0xFF	; 255
 454:	c4 17       	cp	r28, r20
 456:	d5 07       	cpc	r29, r21
 458:	c1 f6       	brne	.-80     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 45a:	ce 01       	movw	r24, r28
 45c:	01 c0       	rjmp	.+2      	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
 45e:	ce 01       	movw	r24, r28
 460:	f8 01       	movw	r30, r16
 462:	e8 0f       	add	r30, r24
 464:	f9 1f       	adc	r31, r25
 466:	10 82       	st	Z, r1
 468:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <bleInBufferStartIndex>
 46c:	c8 0f       	add	r28, r24
 46e:	d1 1d       	adc	r29, r1
 470:	9e 01       	movw	r18, r28
 472:	ab ea       	ldi	r26, 0xAB	; 171
 474:	ba ea       	ldi	r27, 0xAA	; 170
 476:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <__umulhisi3>
 47a:	92 95       	swap	r25
 47c:	82 95       	swap	r24
 47e:	8f 70       	andi	r24, 0x0F	; 15
 480:	89 27       	eor	r24, r25
 482:	9f 70       	andi	r25, 0x0F	; 15
 484:	89 27       	eor	r24, r25
 486:	9c 01       	movw	r18, r24
 488:	22 0f       	add	r18, r18
 48a:	33 1f       	adc	r19, r19
 48c:	82 0f       	add	r24, r18
 48e:	93 1f       	adc	r25, r19
 490:	88 0f       	add	r24, r24
 492:	99 1f       	adc	r25, r25
 494:	88 0f       	add	r24, r24
 496:	99 1f       	adc	r25, r25
 498:	88 0f       	add	r24, r24
 49a:	99 1f       	adc	r25, r25
 49c:	c8 1b       	sub	r28, r24
 49e:	d9 0b       	sbc	r29, r25
 4a0:	c0 93 17 01 	sts	0x0117, r28	; 0x800117 <bleInBufferStartIndex>
 4a4:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <enableBleInterupt>
 4a8:	df 91       	pop	r29
 4aa:	cf 91       	pop	r28
 4ac:	1f 91       	pop	r17
 4ae:	0f 91       	pop	r16
 4b0:	ff 90       	pop	r15
 4b2:	ef 90       	pop	r14
 4b4:	08 95       	ret

000004b6 <serialBleFind>:
	}
}

 int serialBleFind(unsigned char c) {
 4b6:	0f 93       	push	r16
 4b8:	1f 93       	push	r17
 4ba:	cf 93       	push	r28
 4bc:	df 93       	push	r29
 4be:	48 2f       	mov	r20, r24
	 int i;
	 unsigned char bufferLen = (bleInBufferEndIndex-bleInBufferStartIndex+BLE_BUFFER_SIZE)%BLE_BUFFER_SIZE;
 4c0:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end>
 4c4:	20 91 17 01 	lds	r18, 0x0117	; 0x800117 <bleInBufferStartIndex>
 4c8:	90 e0       	ldi	r25, 0x00	; 0
 4ca:	82 1b       	sub	r24, r18
 4cc:	91 09       	sbc	r25, r1
 4ce:	48 96       	adiw	r24, 0x18	; 24
 4d0:	68 e1       	ldi	r22, 0x18	; 24
 4d2:	70 e0       	ldi	r23, 0x00	; 0
 4d4:	0e 94 be 02 	call	0x57c	; 0x57c <__divmodhi4>
	 if (bufferLen > 0) {
 4d8:	88 23       	and	r24, r24
 4da:	71 f1       	breq	.+92     	; 0x538 <serialBleFind+0x82>
 4dc:	ec 01       	movw	r28, r24
 4de:	dd 27       	eor	r29, r29
		 for (i=0U; i<bufferLen; i++) {
 4e0:	1c 16       	cp	r1, r28
 4e2:	1d 06       	cpc	r1, r29
 4e4:	64 f5       	brge	.+88     	; 0x53e <serialBleFind+0x88>
			 if (bleBuffer[(bleInBufferStartIndex+i)%BLE_BUFFER_SIZE] == c)
 4e6:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <bleInBufferStartIndex>
 4ea:	90 e0       	ldi	r25, 0x00	; 0
 4ec:	68 e1       	ldi	r22, 0x18	; 24
 4ee:	70 e0       	ldi	r23, 0x00	; 0
 4f0:	0e 94 be 02 	call	0x57c	; 0x57c <__divmodhi4>
 4f4:	fc 01       	movw	r30, r24
 4f6:	e8 5e       	subi	r30, 0xE8	; 232
 4f8:	fe 4f       	sbci	r31, 0xFE	; 254
 4fa:	80 81       	ld	r24, Z
 4fc:	48 17       	cp	r20, r24
 4fe:	11 f1       	breq	.+68     	; 0x544 <serialBleFind+0x8e>
 500:	20 e0       	ldi	r18, 0x00	; 0
 502:	30 e0       	ldi	r19, 0x00	; 0
 504:	08 e1       	ldi	r16, 0x18	; 24
 506:	10 e0       	ldi	r17, 0x00	; 0
 508:	0f c0       	rjmp	.+30     	; 0x528 <serialBleFind+0x72>
 50a:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <bleInBufferStartIndex>
 50e:	b9 01       	movw	r22, r18
 510:	69 0f       	add	r22, r25
 512:	71 1d       	adc	r23, r1
 514:	cb 01       	movw	r24, r22
 516:	b8 01       	movw	r22, r16
 518:	0e 94 be 02 	call	0x57c	; 0x57c <__divmodhi4>
 51c:	fc 01       	movw	r30, r24
 51e:	e8 5e       	subi	r30, 0xE8	; 232
 520:	fe 4f       	sbci	r31, 0xFE	; 254
 522:	90 81       	ld	r25, Z
 524:	94 17       	cp	r25, r20
 526:	89 f0       	breq	.+34     	; 0x54a <serialBleFind+0x94>

 int serialBleFind(unsigned char c) {
	 int i;
	 unsigned char bufferLen = (bleInBufferEndIndex-bleInBufferStartIndex+BLE_BUFFER_SIZE)%BLE_BUFFER_SIZE;
	 if (bufferLen > 0) {
		 for (i=0U; i<bufferLen; i++) {
 528:	2f 5f       	subi	r18, 0xFF	; 255
 52a:	3f 4f       	sbci	r19, 0xFF	; 255
 52c:	2c 17       	cp	r18, r28
 52e:	3d 07       	cpc	r19, r29
 530:	61 f7       	brne	.-40     	; 0x50a <serialBleFind+0x54>
			 if (bleBuffer[(bleInBufferStartIndex+i)%BLE_BUFFER_SIZE] == c)
			 return i;
		 }
	 }
	 return -1;
 532:	8f ef       	ldi	r24, 0xFF	; 255
 534:	9f ef       	ldi	r25, 0xFF	; 255
 536:	0b c0       	rjmp	.+22     	; 0x54e <serialBleFind+0x98>
 538:	8f ef       	ldi	r24, 0xFF	; 255
 53a:	9f ef       	ldi	r25, 0xFF	; 255
 53c:	08 c0       	rjmp	.+16     	; 0x54e <serialBleFind+0x98>
 53e:	8f ef       	ldi	r24, 0xFF	; 255
 540:	9f ef       	ldi	r25, 0xFF	; 255
 542:	05 c0       	rjmp	.+10     	; 0x54e <serialBleFind+0x98>
 int serialBleFind(unsigned char c) {
	 int i;
	 unsigned char bufferLen = (bleInBufferEndIndex-bleInBufferStartIndex+BLE_BUFFER_SIZE)%BLE_BUFFER_SIZE;
	 if (bufferLen > 0) {
		 for (i=0U; i<bufferLen; i++) {
			 if (bleBuffer[(bleInBufferStartIndex+i)%BLE_BUFFER_SIZE] == c)
 544:	80 e0       	ldi	r24, 0x00	; 0
 546:	90 e0       	ldi	r25, 0x00	; 0
 548:	02 c0       	rjmp	.+4      	; 0x54e <serialBleFind+0x98>

 int serialBleFind(unsigned char c) {
	 int i;
	 unsigned char bufferLen = (bleInBufferEndIndex-bleInBufferStartIndex+BLE_BUFFER_SIZE)%BLE_BUFFER_SIZE;
	 if (bufferLen > 0) {
		 for (i=0U; i<bufferLen; i++) {
 54a:	82 2f       	mov	r24, r18
 54c:	93 2f       	mov	r25, r19
			 if (bleBuffer[(bleInBufferStartIndex+i)%BLE_BUFFER_SIZE] == c)
			 return i;
		 }
	 }
	 return -1;
 }
 54e:	df 91       	pop	r29
 550:	cf 91       	pop	r28
 552:	1f 91       	pop	r17
 554:	0f 91       	pop	r16
 556:	08 95       	ret

00000558 <bleBufferReadUntil>:
 
  void bleBufferReadUntil(unsigned char stopChar, unsigned char *buffer) {
 558:	0f 93       	push	r16
 55a:	1f 93       	push	r17
 55c:	cf 93       	push	r28
 55e:	c8 2f       	mov	r28, r24
 560:	8b 01       	movw	r16, r22
	  unsigned char i = 0;
	  while (i == 0)
	  i = serialBleFind(stopChar) + 1;
 562:	8c 2f       	mov	r24, r28
 564:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <serialBleFind>
 568:	8f 5f       	subi	r24, 0xFF	; 255
	 return -1;
 }
 
  void bleBufferReadUntil(unsigned char stopChar, unsigned char *buffer) {
	  unsigned char i = 0;
	  while (i == 0)
 56a:	d9 f3       	breq	.-10     	; 0x562 <bleBufferReadUntil+0xa>
	  i = serialBleFind(stopChar) + 1;
	  bleBufferRead(i, buffer);
 56c:	b8 01       	movw	r22, r16
 56e:	90 e0       	ldi	r25, 0x00	; 0
 570:	0e 94 e6 01 	call	0x3cc	; 0x3cc <bleBufferRead>
	  return;
 574:	cf 91       	pop	r28
 576:	1f 91       	pop	r17
 578:	0f 91       	pop	r16
 57a:	08 95       	ret

0000057c <__divmodhi4>:
 57c:	97 fb       	bst	r25, 7
 57e:	07 2e       	mov	r0, r23
 580:	16 f4       	brtc	.+4      	; 0x586 <__divmodhi4+0xa>
 582:	00 94       	com	r0
 584:	07 d0       	rcall	.+14     	; 0x594 <__divmodhi4_neg1>
 586:	77 fd       	sbrc	r23, 7
 588:	09 d0       	rcall	.+18     	; 0x59c <__divmodhi4_neg2>
 58a:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <__udivmodhi4>
 58e:	07 fc       	sbrc	r0, 7
 590:	05 d0       	rcall	.+10     	; 0x59c <__divmodhi4_neg2>
 592:	3e f4       	brtc	.+14     	; 0x5a2 <__divmodhi4_exit>

00000594 <__divmodhi4_neg1>:
 594:	90 95       	com	r25
 596:	81 95       	neg	r24
 598:	9f 4f       	sbci	r25, 0xFF	; 255
 59a:	08 95       	ret

0000059c <__divmodhi4_neg2>:
 59c:	70 95       	com	r23
 59e:	61 95       	neg	r22
 5a0:	7f 4f       	sbci	r23, 0xFF	; 255

000005a2 <__divmodhi4_exit>:
 5a2:	08 95       	ret

000005a4 <__umulhisi3>:
 5a4:	a2 9f       	mul	r26, r18
 5a6:	b0 01       	movw	r22, r0
 5a8:	b3 9f       	mul	r27, r19
 5aa:	c0 01       	movw	r24, r0
 5ac:	a3 9f       	mul	r26, r19
 5ae:	70 0d       	add	r23, r0
 5b0:	81 1d       	adc	r24, r1
 5b2:	11 24       	eor	r1, r1
 5b4:	91 1d       	adc	r25, r1
 5b6:	b2 9f       	mul	r27, r18
 5b8:	70 0d       	add	r23, r0
 5ba:	81 1d       	adc	r24, r1
 5bc:	11 24       	eor	r1, r1
 5be:	91 1d       	adc	r25, r1
 5c0:	08 95       	ret

000005c2 <__udivmodhi4>:
 5c2:	aa 1b       	sub	r26, r26
 5c4:	bb 1b       	sub	r27, r27
 5c6:	51 e1       	ldi	r21, 0x11	; 17
 5c8:	07 c0       	rjmp	.+14     	; 0x5d8 <__udivmodhi4_ep>

000005ca <__udivmodhi4_loop>:
 5ca:	aa 1f       	adc	r26, r26
 5cc:	bb 1f       	adc	r27, r27
 5ce:	a6 17       	cp	r26, r22
 5d0:	b7 07       	cpc	r27, r23
 5d2:	10 f0       	brcs	.+4      	; 0x5d8 <__udivmodhi4_ep>
 5d4:	a6 1b       	sub	r26, r22
 5d6:	b7 0b       	sbc	r27, r23

000005d8 <__udivmodhi4_ep>:
 5d8:	88 1f       	adc	r24, r24
 5da:	99 1f       	adc	r25, r25
 5dc:	5a 95       	dec	r21
 5de:	a9 f7       	brne	.-22     	; 0x5ca <__udivmodhi4_loop>
 5e0:	80 95       	com	r24
 5e2:	90 95       	com	r25
 5e4:	bc 01       	movw	r22, r24
 5e6:	cd 01       	movw	r24, r26
 5e8:	08 95       	ret

000005ea <strstr>:
 5ea:	fb 01       	movw	r30, r22
 5ec:	51 91       	ld	r21, Z+
 5ee:	55 23       	and	r21, r21
 5f0:	a9 f0       	breq	.+42     	; 0x61c <strstr+0x32>
 5f2:	bf 01       	movw	r22, r30
 5f4:	dc 01       	movw	r26, r24
 5f6:	4d 91       	ld	r20, X+
 5f8:	45 17       	cp	r20, r21
 5fa:	41 11       	cpse	r20, r1
 5fc:	e1 f7       	brne	.-8      	; 0x5f6 <strstr+0xc>
 5fe:	59 f4       	brne	.+22     	; 0x616 <strstr+0x2c>
 600:	cd 01       	movw	r24, r26
 602:	01 90       	ld	r0, Z+
 604:	00 20       	and	r0, r0
 606:	49 f0       	breq	.+18     	; 0x61a <strstr+0x30>
 608:	4d 91       	ld	r20, X+
 60a:	40 15       	cp	r20, r0
 60c:	41 11       	cpse	r20, r1
 60e:	c9 f3       	breq	.-14     	; 0x602 <strstr+0x18>
 610:	fb 01       	movw	r30, r22
 612:	41 11       	cpse	r20, r1
 614:	ef cf       	rjmp	.-34     	; 0x5f4 <strstr+0xa>
 616:	81 e0       	ldi	r24, 0x01	; 1
 618:	90 e0       	ldi	r25, 0x00	; 0
 61a:	01 97       	sbiw	r24, 0x01	; 1
 61c:	08 95       	ret

0000061e <__ltoa_ncheck>:
 61e:	bb 27       	eor	r27, r27
 620:	2a 30       	cpi	r18, 0x0A	; 10
 622:	51 f4       	brne	.+20     	; 0x638 <__ltoa_ncheck+0x1a>
 624:	99 23       	and	r25, r25
 626:	42 f4       	brpl	.+16     	; 0x638 <__ltoa_ncheck+0x1a>
 628:	bd e2       	ldi	r27, 0x2D	; 45
 62a:	90 95       	com	r25
 62c:	80 95       	com	r24
 62e:	70 95       	com	r23
 630:	61 95       	neg	r22
 632:	7f 4f       	sbci	r23, 0xFF	; 255
 634:	8f 4f       	sbci	r24, 0xFF	; 255
 636:	9f 4f       	sbci	r25, 0xFF	; 255
 638:	0c 94 1f 03 	jmp	0x63e	; 0x63e <__ultoa_common>

0000063c <__ultoa_ncheck>:
 63c:	bb 27       	eor	r27, r27

0000063e <__ultoa_common>:
 63e:	fa 01       	movw	r30, r20
 640:	a6 2f       	mov	r26, r22
 642:	62 17       	cp	r22, r18
 644:	71 05       	cpc	r23, r1
 646:	81 05       	cpc	r24, r1
 648:	91 05       	cpc	r25, r1
 64a:	33 0b       	sbc	r19, r19
 64c:	30 fb       	bst	r19, 0
 64e:	66 f0       	brts	.+24     	; 0x668 <__ultoa_common+0x2a>
 650:	aa 27       	eor	r26, r26
 652:	66 0f       	add	r22, r22
 654:	77 1f       	adc	r23, r23
 656:	88 1f       	adc	r24, r24
 658:	99 1f       	adc	r25, r25
 65a:	aa 1f       	adc	r26, r26
 65c:	a2 17       	cp	r26, r18
 65e:	10 f0       	brcs	.+4      	; 0x664 <__ultoa_common+0x26>
 660:	a2 1b       	sub	r26, r18
 662:	63 95       	inc	r22
 664:	38 50       	subi	r19, 0x08	; 8
 666:	a9 f7       	brne	.-22     	; 0x652 <__ultoa_common+0x14>
 668:	a0 5d       	subi	r26, 0xD0	; 208
 66a:	aa 33       	cpi	r26, 0x3A	; 58
 66c:	08 f0       	brcs	.+2      	; 0x670 <__ultoa_common+0x32>
 66e:	a9 5d       	subi	r26, 0xD9	; 217
 670:	a1 93       	st	Z+, r26
 672:	36 f7       	brtc	.-52     	; 0x640 <__ultoa_common+0x2>
 674:	b1 11       	cpse	r27, r1
 676:	b1 93       	st	Z+, r27
 678:	10 82       	st	Z, r1
 67a:	ca 01       	movw	r24, r20
 67c:	0c 94 40 03 	jmp	0x680	; 0x680 <strrev>

00000680 <strrev>:
 680:	dc 01       	movw	r26, r24
 682:	fc 01       	movw	r30, r24
 684:	67 2f       	mov	r22, r23
 686:	71 91       	ld	r23, Z+
 688:	77 23       	and	r23, r23
 68a:	e1 f7       	brne	.-8      	; 0x684 <strrev+0x4>
 68c:	32 97       	sbiw	r30, 0x02	; 2
 68e:	04 c0       	rjmp	.+8      	; 0x698 <strrev+0x18>
 690:	7c 91       	ld	r23, X
 692:	6d 93       	st	X+, r22
 694:	70 83       	st	Z, r23
 696:	62 91       	ld	r22, -Z
 698:	ae 17       	cp	r26, r30
 69a:	bf 07       	cpc	r27, r31
 69c:	c8 f3       	brcs	.-14     	; 0x690 <strrev+0x10>
 69e:	08 95       	ret

000006a0 <_exit>:
 6a0:	f8 94       	cli

000006a2 <__stop_program>:
 6a2:	ff cf       	rjmp	.-2      	; 0x6a2 <__stop_program>
