
Solution.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002e  00800100  0000070a  0000079e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000070a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001a  0080012e  0080012e  000007cc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007cc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000007fc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000160  00000000  00000000  0000083c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001913  00000000  00000000  0000099c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c66  00000000  00000000  000022af  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c51  00000000  00000000  00002f15  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000036c  00000000  00000000  00003b68  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000073e  00000000  00000000  00003ed4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c71  00000000  00000000  00004612  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  00005283  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 1c 01 	jmp	0x238	; 0x238 <__vector_5>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e0       	ldi	r30, 0x0A	; 10
  7c:	f7 e0       	ldi	r31, 0x07	; 7
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 32       	cpi	r26, 0x2E	; 46
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae e2       	ldi	r26, 0x2E	; 46
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 34       	cpi	r26, 0x48	; 72
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 84 00 	call	0x108	; 0x108 <main>
  9e:	0c 94 83 03 	jmp	0x706	; 0x706 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <adcInitialize>:
#include "ads1231.h"
#include <avr/io.h>
#include <util/delay.h>

void adcInitialize(unsigned char speed) {
	DDRC |= (1<<ADC_SPEED_PIN) | (1<<ADC_PDWN_PIN) | (1<<ADC_SCLK_PIN);
  a6:	97 b1       	in	r25, 0x07	; 7
  a8:	97 60       	ori	r25, 0x07	; 7
  aa:	97 b9       	out	0x07, r25	; 7
	DDRC &= ~(1<<ADC_DOUT_PIN);
  ac:	3b 98       	cbi	0x07, 3	; 7
	PORTC |= (1<<ADC_DOUT_PIN) | (1<<ADC_PDWN_PIN);
  ae:	98 b1       	in	r25, 0x08	; 8
  b0:	9a 60       	ori	r25, 0x0A	; 10
  b2:	98 b9       	out	0x08, r25	; 8
	PORTC &= ~(1<<ADC_SCLK_PIN);
  b4:	42 98       	cbi	0x08, 2	; 8
	if (speed)
  b6:	81 11       	cpse	r24, r1
		PORTC |= (1<<ADC_SPEED_PIN);
  b8:	40 9a       	sbi	0x08, 0	; 8
  ba:	08 95       	ret

000000bc <adcFetchData>:
long int adcFetchData() {
	unsigned char i, j;
	long int d = 0UL, temp;
	for (j=0; j<DIGITAL_FILTER; ) {
		temp = 0UL;
		while ((PINC & (1<<ADC_DOUT_PIN)));
  bc:	33 99       	sbic	0x06, 3	; 6
  be:	fe cf       	rjmp	.-4      	; 0xbc <adcFetchData>
  c0:	28 e1       	ldi	r18, 0x18	; 24
  c2:	80 e0       	ldi	r24, 0x00	; 0
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	dc 01       	movw	r26, r24
		for (i=0; i<24; i++) {
			PORTC |= (1<<ADC_SCLK_PIN);
  c8:	42 9a       	sbi	0x08, 2	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ca:	3a e4       	ldi	r19, 0x4A	; 74
  cc:	3a 95       	dec	r19
  ce:	f1 f7       	brne	.-4      	; 0xcc <adcFetchData+0x10>
			_delay_us(20);
			PORTC &= ~(1<<ADC_SCLK_PIN);
  d0:	42 98       	cbi	0x08, 2	; 8
  d2:	3a e4       	ldi	r19, 0x4A	; 74
  d4:	3a 95       	dec	r19
  d6:	f1 f7       	brne	.-4      	; 0xd4 <adcFetchData+0x18>
			_delay_us(20);
			temp <<= 1;
  d8:	88 0f       	add	r24, r24
  da:	99 1f       	adc	r25, r25
  dc:	aa 1f       	adc	r26, r26
  de:	bb 1f       	adc	r27, r27
			if (PINC & (1<<ADC_DOUT_PIN)) temp |= 0x01;
  e0:	33 99       	sbic	0x06, 3	; 6
  e2:	81 60       	ori	r24, 0x01	; 1
  e4:	3a e4       	ldi	r19, 0x4A	; 74
  e6:	3a 95       	dec	r19
  e8:	f1 f7       	brne	.-4      	; 0xe6 <adcFetchData+0x2a>
  ea:	21 50       	subi	r18, 0x01	; 1
	unsigned char i, j;
	long int d = 0UL, temp;
	for (j=0; j<DIGITAL_FILTER; ) {
		temp = 0UL;
		while ((PINC & (1<<ADC_DOUT_PIN)));
		for (i=0; i<24; i++) {
  ec:	69 f7       	brne	.-38     	; 0xc8 <adcFetchData+0xc>
			_delay_us(20);
			temp <<= 1;
			if (PINC & (1<<ADC_DOUT_PIN)) temp |= 0x01;
			_delay_us(20);
		}
		PORTC |= (1<<ADC_SCLK_PIN);
  ee:	42 9a       	sbi	0x08, 2	; 8
  f0:	2a e4       	ldi	r18, 0x4A	; 74
  f2:	2a 95       	dec	r18
  f4:	f1 f7       	brne	.-4      	; 0xf2 <adcFetchData+0x36>
		_delay_us(20);
		PORTC &= ~(1<<ADC_SCLK_PIN);
  f6:	42 98       	cbi	0x08, 2	; 8
  f8:	3a e4       	ldi	r19, 0x4A	; 74
  fa:	3a 95       	dec	r19
  fc:	f1 f7       	brne	.-4      	; 0xfa <adcFetchData+0x3e>
		_delay_us(20);
		if (temp & 0x800000) temp = temp | 0xFF000000;
  fe:	a7 fd       	sbrc	r26, 7
 100:	bf 6f       	ori	r27, 0xFF	; 255
		d += temp;
		j++;
	}
	d /= DIGITAL_FILTER;
	return d;
 102:	bc 01       	movw	r22, r24
 104:	cd 01       	movw	r24, r26
 106:	08 95       	ret

00000108 <main>:
#include "indicator.h"
#include <util/delay.h>

int main(void)
{
	initializeSystem();
 108:	0e 94 8f 00 	call	0x11e	; 0x11e <initializeSystem>
	while (1)
	{
		processBLEMessages();
 10c:	0e 94 c4 00 	call	0x188	; 0x188 <processBLEMessages>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 110:	8f ef       	ldi	r24, 0xFF	; 255
 112:	9b e6       	ldi	r25, 0x6B	; 107
 114:	01 97       	sbiw	r24, 0x01	; 1
 116:	f1 f7       	brne	.-4      	; 0x114 <main+0xc>
 118:	00 c0       	rjmp	.+0      	; 0x11a <main+0x12>
 11a:	00 00       	nop
 11c:	f7 cf       	rjmp	.-18     	; 0x10c <main+0x4>

0000011e <initializeSystem>:
const unsigned char RELAY_ON_COMMAND[] = "rly1";
const unsigned char RELAY_OFF_COMMAND[] = "rly0";
const unsigned char READY[] = "ready\n";

void initializeSystem() {
	initBleUARTSend();
 11e:	0e 94 7d 01 	call	0x2fa	; 0x2fa <initBleUARTSend>
	initBleUARTReceive();
 122:	0e 94 8a 01 	call	0x314	; 0x314 <initBleUARTReceive>
	adcInitialize(1);
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	0e 94 53 00 	call	0xa6	; 0xa6 <adcInitialize>
	initializeRelay(0);
 12c:	80 e0       	ldi	r24, 0x00	; 0
 12e:	0e 94 ed 02 	call	0x5da	; 0x5da <initializeRelay>
 132:	2f ef       	ldi	r18, 0xFF	; 255
 134:	8f ef       	ldi	r24, 0xFF	; 255
 136:	9a e1       	ldi	r25, 0x1A	; 26
 138:	21 50       	subi	r18, 0x01	; 1
 13a:	80 40       	sbci	r24, 0x00	; 0
 13c:	90 40       	sbci	r25, 0x00	; 0
 13e:	e1 f7       	brne	.-8      	; 0x138 <initializeSystem+0x1a>
 140:	00 c0       	rjmp	.+0      	; 0x142 <initializeSystem+0x24>
 142:	00 00       	nop
	_delay_ms(800);
	bleSerialPrint(READY);
 144:	81 e1       	ldi	r24, 0x11	; 17
 146:	91 e0       	ldi	r25, 0x01	; 1
 148:	0e 94 d6 01 	call	0x3ac	; 0x3ac <bleSerialPrint>
 14c:	08 95       	ret

0000014e <bleSendADValue>:
			bleSerialPrint(";rlyoff;");
		}
	}
}

void bleSendADValue() {
 14e:	cf 92       	push	r12
 150:	df 92       	push	r13
 152:	ef 92       	push	r14
 154:	ff 92       	push	r15
	disableBleInterupt();
 156:	0e 94 10 01 	call	0x220	; 0x220 <disableBleInterupt>
	long int adValue = adcFetchData();
 15a:	0e 94 5e 00 	call	0xbc	; 0xbc <adcFetchData>
 15e:	6b 01       	movw	r12, r22
 160:	7c 01       	movw	r14, r24
	enableBleInterupt();
 162:	0e 94 16 01 	call	0x22c	; 0x22c <enableBleInterupt>
	bleSerialPrint(BLE_AD_VAL_COMMAND);
 166:	87 e2       	ldi	r24, 0x27	; 39
 168:	91 e0       	ldi	r25, 0x01	; 1
 16a:	0e 94 d6 01 	call	0x3ac	; 0x3ac <bleSerialPrint>
	bleSerialPrintLong(adValue);
 16e:	c7 01       	movw	r24, r14
 170:	b6 01       	movw	r22, r12
 172:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <bleSerialPrintLong>
	bleSerialPrint(";");
 176:	8f e0       	ldi	r24, 0x0F	; 15
 178:	91 e0       	ldi	r25, 0x01	; 1
 17a:	0e 94 d6 01 	call	0x3ac	; 0x3ac <bleSerialPrint>
}
 17e:	ff 90       	pop	r15
 180:	ef 90       	pop	r14
 182:	df 90       	pop	r13
 184:	cf 90       	pop	r12
 186:	08 95       	ret

00000188 <processBLEMessages>:
	initializeRelay(0);
	_delay_ms(800);
	bleSerialPrint(READY);
}

void processBLEMessages() {
 188:	0f 93       	push	r16
 18a:	1f 93       	push	r17
 18c:	cf 93       	push	r28
 18e:	df 93       	push	r29
 190:	cd b7       	in	r28, 0x3d	; 61
 192:	de b7       	in	r29, 0x3e	; 62
 194:	a4 97       	sbiw	r28, 0x24	; 36
 196:	0f b6       	in	r0, 0x3f	; 63
 198:	f8 94       	cli
 19a:	de bf       	out	0x3e, r29	; 62
 19c:	0f be       	out	0x3f, r0	; 63
 19e:	cd bf       	out	0x3d, r28	; 61
	unsigned char commandBuffer[36];
	while (serialBleFind(';') != -1) {
		bleBufferReadUntil(';', commandBuffer);
 1a0:	8e 01       	movw	r16, r28
 1a2:	0f 5f       	subi	r16, 0xFF	; 255
 1a4:	1f 4f       	sbci	r17, 0xFF	; 255
	bleSerialPrint(READY);
}

void processBLEMessages() {
	unsigned char commandBuffer[36];
	while (serialBleFind(';') != -1) {
 1a6:	2c c0       	rjmp	.+88     	; 0x200 <processBLEMessages+0x78>
		bleBufferReadUntil(';', commandBuffer);
 1a8:	b8 01       	movw	r22, r16
 1aa:	8b e3       	ldi	r24, 0x3B	; 59
 1ac:	0e 94 cf 02 	call	0x59e	; 0x59e <bleBufferReadUntil>
		if ((unsigned char *)strstr(commandBuffer, GET_VAL_COMMAND) == commandBuffer) {
 1b0:	62 e2       	ldi	r22, 0x22	; 34
 1b2:	71 e0       	ldi	r23, 0x01	; 1
 1b4:	c8 01       	movw	r24, r16
 1b6:	0e 94 28 03 	call	0x650	; 0x650 <strstr>
 1ba:	08 17       	cp	r16, r24
 1bc:	19 07       	cpc	r17, r25
 1be:	19 f4       	brne	.+6      	; 0x1c6 <processBLEMessages+0x3e>
			bleSendADValue();
 1c0:	0e 94 a7 00 	call	0x14e	; 0x14e <bleSendADValue>
 1c4:	1d c0       	rjmp	.+58     	; 0x200 <processBLEMessages+0x78>
		}
		else if ((unsigned char *)strstr(commandBuffer, RELAY_ON_COMMAND) == commandBuffer) {
 1c6:	6d e1       	ldi	r22, 0x1D	; 29
 1c8:	71 e0       	ldi	r23, 0x01	; 1
 1ca:	c8 01       	movw	r24, r16
 1cc:	0e 94 28 03 	call	0x650	; 0x650 <strstr>
 1d0:	08 17       	cp	r16, r24
 1d2:	19 07       	cpc	r17, r25
 1d4:	39 f4       	brne	.+14     	; 0x1e4 <processBLEMessages+0x5c>
			relayTurnOn();
 1d6:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <relayTurnOn>
			bleSerialPrint(";rlyon;");
 1da:	80 e0       	ldi	r24, 0x00	; 0
 1dc:	91 e0       	ldi	r25, 0x01	; 1
 1de:	0e 94 d6 01 	call	0x3ac	; 0x3ac <bleSerialPrint>
 1e2:	0e c0       	rjmp	.+28     	; 0x200 <processBLEMessages+0x78>
		}
		else if ((unsigned char *)strstr(commandBuffer, RELAY_OFF_COMMAND) == commandBuffer) {
 1e4:	68 e1       	ldi	r22, 0x18	; 24
 1e6:	71 e0       	ldi	r23, 0x01	; 1
 1e8:	c8 01       	movw	r24, r16
 1ea:	0e 94 28 03 	call	0x650	; 0x650 <strstr>
 1ee:	08 17       	cp	r16, r24
 1f0:	19 07       	cpc	r17, r25
 1f2:	31 f4       	brne	.+12     	; 0x200 <processBLEMessages+0x78>
			relayTurnOff();
 1f4:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <relayTurnOff>
			bleSerialPrint(";rlyoff;");
 1f8:	88 e0       	ldi	r24, 0x08	; 8
 1fa:	91 e0       	ldi	r25, 0x01	; 1
 1fc:	0e 94 d6 01 	call	0x3ac	; 0x3ac <bleSerialPrint>
	bleSerialPrint(READY);
}

void processBLEMessages() {
	unsigned char commandBuffer[36];
	while (serialBleFind(';') != -1) {
 200:	8b e3       	ldi	r24, 0x3B	; 59
 202:	0e 94 7e 02 	call	0x4fc	; 0x4fc <serialBleFind>
 206:	01 96       	adiw	r24, 0x01	; 1
 208:	79 f6       	brne	.-98     	; 0x1a8 <processBLEMessages+0x20>
		else if ((unsigned char *)strstr(commandBuffer, RELAY_OFF_COMMAND) == commandBuffer) {
			relayTurnOff();
			bleSerialPrint(";rlyoff;");
		}
	}
}
 20a:	a4 96       	adiw	r28, 0x24	; 36
 20c:	0f b6       	in	r0, 0x3f	; 63
 20e:	f8 94       	cli
 210:	de bf       	out	0x3e, r29	; 62
 212:	0f be       	out	0x3f, r0	; 63
 214:	cd bf       	out	0x3d, r28	; 61
 216:	df 91       	pop	r29
 218:	cf 91       	pop	r28
 21a:	1f 91       	pop	r17
 21c:	0f 91       	pop	r16
 21e:	08 95       	ret

00000220 <disableBleInterupt>:
	 if (bufferLen > 0) {
		 for (i=0U; i<bufferLen; i++) {
			 if (bleBuffer[(bleInBufferStartIndex+i)%BLE_BUFFER_SIZE] == c)
			 return i;
		 }
	 }
 220:	ed e6       	ldi	r30, 0x6D	; 109
 222:	f0 e0       	ldi	r31, 0x00	; 0
 224:	80 81       	ld	r24, Z
 226:	8f 77       	andi	r24, 0x7F	; 127
 228:	80 83       	st	Z, r24
 22a:	08 95       	ret

0000022c <enableBleInterupt>:
 22c:	ed e6       	ldi	r30, 0x6D	; 109
 22e:	f0 e0       	ldi	r31, 0x00	; 0
 230:	80 81       	ld	r24, Z
 232:	80 68       	ori	r24, 0x80	; 128
 234:	80 83       	st	Z, r24
 236:	08 95       	ret

00000238 <__vector_5>:
 238:	1f 92       	push	r1
 23a:	0f 92       	push	r0
 23c:	0f b6       	in	r0, 0x3f	; 63
 23e:	0f 92       	push	r0
 240:	11 24       	eor	r1, r1
 242:	2f 93       	push	r18
 244:	3f 93       	push	r19
 246:	4f 93       	push	r20
 248:	5f 93       	push	r21
 24a:	6f 93       	push	r22
 24c:	7f 93       	push	r23
 24e:	8f 93       	push	r24
 250:	9f 93       	push	r25
 252:	af 93       	push	r26
 254:	bf 93       	push	r27
 256:	ef 93       	push	r30
 258:	ff 93       	push	r31
 25a:	0e 94 10 01 	call	0x220	; 0x220 <disableBleInterupt>
 25e:	4f 99       	sbic	0x09, 7	; 9
 260:	39 c0       	rjmp	.+114    	; 0x2d4 <__vector_5+0x9c>
 262:	80 e4       	ldi	r24, 0x40	; 64
 264:	92 e0       	ldi	r25, 0x02	; 2
 266:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 26a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 26e:	e1 e8       	ldi	r30, 0x81	; 129
 270:	f0 e0       	ldi	r31, 0x00	; 0
 272:	80 81       	ld	r24, Z
 274:	81 60       	ori	r24, 0x01	; 1
 276:	80 83       	st	Z, r24
 278:	b1 9b       	sbis	0x16, 1	; 22
 27a:	fe cf       	rjmp	.-4      	; 0x278 <__vector_5+0x40>
 27c:	e1 e8       	ldi	r30, 0x81	; 129
 27e:	f0 e0       	ldi	r31, 0x00	; 0
 280:	80 81       	ld	r24, Z
 282:	8e 7f       	andi	r24, 0xFE	; 254
 284:	80 83       	st	Z, r24
 286:	b1 9a       	sbi	0x16, 1	; 22
 288:	80 e8       	ldi	r24, 0x80	; 128
 28a:	94 e0       	ldi	r25, 0x04	; 4
 28c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 290:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 294:	98 e0       	ldi	r25, 0x08	; 8
 296:	20 e0       	ldi	r18, 0x00	; 0
 298:	26 95       	lsr	r18
 29a:	80 81       	ld	r24, Z
 29c:	81 60       	ori	r24, 0x01	; 1
 29e:	80 83       	st	Z, r24
 2a0:	b1 9b       	sbis	0x16, 1	; 22
 2a2:	fe cf       	rjmp	.-4      	; 0x2a0 <__vector_5+0x68>
 2a4:	80 81       	ld	r24, Z
 2a6:	8e 7f       	andi	r24, 0xFE	; 254
 2a8:	80 83       	st	Z, r24
 2aa:	4f 99       	sbic	0x09, 7	; 9
 2ac:	20 68       	ori	r18, 0x80	; 128
 2ae:	b1 9a       	sbi	0x16, 1	; 22
 2b0:	91 50       	subi	r25, 0x01	; 1
 2b2:	91 f7       	brne	.-28     	; 0x298 <__vector_5+0x60>
 2b4:	e0 91 2e 01 	lds	r30, 0x012E	; 0x80012e <__data_end>
 2b8:	f0 e0       	ldi	r31, 0x00	; 0
 2ba:	e0 5d       	subi	r30, 0xD0	; 208
 2bc:	fe 4f       	sbci	r31, 0xFE	; 254
 2be:	20 83       	st	Z, r18
 2c0:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <__data_end>
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	01 96       	adiw	r24, 0x01	; 1
 2c8:	68 e1       	ldi	r22, 0x18	; 24
 2ca:	70 e0       	ldi	r23, 0x00	; 0
 2cc:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <__divmodhi4>
 2d0:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <__data_end>
 2d4:	0e 94 16 01 	call	0x22c	; 0x22c <enableBleInterupt>
 2d8:	ff 91       	pop	r31
 2da:	ef 91       	pop	r30
 2dc:	bf 91       	pop	r27
 2de:	af 91       	pop	r26
 2e0:	9f 91       	pop	r25
 2e2:	8f 91       	pop	r24
 2e4:	7f 91       	pop	r23
 2e6:	6f 91       	pop	r22
 2e8:	5f 91       	pop	r21
 2ea:	4f 91       	pop	r20
 2ec:	3f 91       	pop	r19
 2ee:	2f 91       	pop	r18
 2f0:	0f 90       	pop	r0
 2f2:	0f be       	out	0x3f, r0	; 63
 2f4:	0f 90       	pop	r0
 2f6:	1f 90       	pop	r1
 2f8:	18 95       	reti

000002fa <initBleUARTSend>:
 2fa:	56 9a       	sbi	0x0a, 6	; 10
 2fc:	e1 e8       	ldi	r30, 0x81	; 129
 2fe:	f0 e0       	ldi	r31, 0x00	; 0
 300:	80 81       	ld	r24, Z
 302:	88 60       	ori	r24, 0x08	; 8
 304:	80 83       	st	Z, r24
 306:	80 e8       	ldi	r24, 0x80	; 128
 308:	94 e0       	ldi	r25, 0x04	; 4
 30a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 30e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 312:	08 95       	ret

00000314 <initBleUARTReceive>:
 314:	57 98       	cbi	0x0a, 7	; 10
 316:	5f 98       	cbi	0x0b, 7	; 11
 318:	e1 e8       	ldi	r30, 0x81	; 129
 31a:	f0 e0       	ldi	r31, 0x00	; 0
 31c:	80 81       	ld	r24, Z
 31e:	88 60       	ori	r24, 0x08	; 8
 320:	80 83       	st	Z, r24
 322:	80 e8       	ldi	r24, 0x80	; 128
 324:	94 e0       	ldi	r25, 0x04	; 4
 326:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 32a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 32e:	e8 e6       	ldi	r30, 0x68	; 104
 330:	f0 e0       	ldi	r31, 0x00	; 0
 332:	80 81       	ld	r24, Z
 334:	84 60       	ori	r24, 0x04	; 4
 336:	80 83       	st	Z, r24
 338:	ed e6       	ldi	r30, 0x6D	; 109
 33a:	f0 e0       	ldi	r31, 0x00	; 0
 33c:	80 81       	ld	r24, Z
 33e:	80 68       	ori	r24, 0x80	; 128
 340:	80 83       	st	Z, r24
 342:	78 94       	sei
 344:	08 95       	ret

00000346 <bleSendBit>:
 346:	cf 93       	push	r28
 348:	c8 2f       	mov	r28, r24
 34a:	0e 94 10 01 	call	0x220	; 0x220 <disableBleInterupt>
 34e:	e1 e8       	ldi	r30, 0x81	; 129
 350:	f0 e0       	ldi	r31, 0x00	; 0
 352:	80 81       	ld	r24, Z
 354:	8e 7f       	andi	r24, 0xFE	; 254
 356:	80 83       	st	Z, r24
 358:	cc 23       	and	r28, r28
 35a:	11 f0       	breq	.+4      	; 0x360 <bleSendBit+0x1a>
 35c:	5e 9a       	sbi	0x0b, 6	; 11
 35e:	01 c0       	rjmp	.+2      	; 0x362 <bleSendBit+0x1c>
 360:	5e 98       	cbi	0x0b, 6	; 11
 362:	e1 e8       	ldi	r30, 0x81	; 129
 364:	f0 e0       	ldi	r31, 0x00	; 0
 366:	80 81       	ld	r24, Z
 368:	81 60       	ori	r24, 0x01	; 1
 36a:	80 83       	st	Z, r24
 36c:	b1 9b       	sbis	0x16, 1	; 22
 36e:	fe cf       	rjmp	.-4      	; 0x36c <bleSendBit+0x26>
 370:	b1 9a       	sbi	0x16, 1	; 22
 372:	e1 e8       	ldi	r30, 0x81	; 129
 374:	f0 e0       	ldi	r31, 0x00	; 0
 376:	80 81       	ld	r24, Z
 378:	8e 7f       	andi	r24, 0xFE	; 254
 37a:	80 83       	st	Z, r24
 37c:	0e 94 16 01 	call	0x22c	; 0x22c <enableBleInterupt>
 380:	cf 91       	pop	r28
 382:	08 95       	ret

00000384 <bleSendByte>:
 384:	cf 93       	push	r28
 386:	df 93       	push	r29
 388:	d8 2f       	mov	r29, r24
 38a:	80 e0       	ldi	r24, 0x00	; 0
 38c:	0e 94 a3 01 	call	0x346	; 0x346 <bleSendBit>
 390:	c8 e0       	ldi	r28, 0x08	; 8
 392:	8d 2f       	mov	r24, r29
 394:	81 70       	andi	r24, 0x01	; 1
 396:	0e 94 a3 01 	call	0x346	; 0x346 <bleSendBit>
 39a:	d6 95       	lsr	r29
 39c:	c1 50       	subi	r28, 0x01	; 1
 39e:	c9 f7       	brne	.-14     	; 0x392 <bleSendByte+0xe>
 3a0:	81 e0       	ldi	r24, 0x01	; 1
 3a2:	0e 94 a3 01 	call	0x346	; 0x346 <bleSendBit>
 3a6:	df 91       	pop	r29
 3a8:	cf 91       	pop	r28
 3aa:	08 95       	ret

000003ac <bleSerialPrint>:
 3ac:	0f 93       	push	r16
 3ae:	1f 93       	push	r17
 3b0:	cf 93       	push	r28
 3b2:	fc 01       	movw	r30, r24
 3b4:	80 81       	ld	r24, Z
 3b6:	88 23       	and	r24, r24
 3b8:	59 f0       	breq	.+22     	; 0x3d0 <bleSerialPrint+0x24>
 3ba:	8f 01       	movw	r16, r30
 3bc:	c0 e0       	ldi	r28, 0x00	; 0
 3be:	0e 94 c2 01 	call	0x384	; 0x384 <bleSendByte>
 3c2:	cf 5f       	subi	r28, 0xFF	; 255
 3c4:	f8 01       	movw	r30, r16
 3c6:	ec 0f       	add	r30, r28
 3c8:	f1 1d       	adc	r31, r1
 3ca:	80 81       	ld	r24, Z
 3cc:	81 11       	cpse	r24, r1
 3ce:	f7 cf       	rjmp	.-18     	; 0x3be <bleSerialPrint+0x12>
 3d0:	cf 91       	pop	r28
 3d2:	1f 91       	pop	r17
 3d4:	0f 91       	pop	r16
 3d6:	08 95       	ret

000003d8 <bleSerialPrintLong>:
 3d8:	cf 93       	push	r28
 3da:	df 93       	push	r29
 3dc:	cd b7       	in	r28, 0x3d	; 61
 3de:	de b7       	in	r29, 0x3e	; 62
 3e0:	60 97       	sbiw	r28, 0x10	; 16
 3e2:	0f b6       	in	r0, 0x3f	; 63
 3e4:	f8 94       	cli
 3e6:	de bf       	out	0x3e, r29	; 62
 3e8:	0f be       	out	0x3f, r0	; 63
 3ea:	cd bf       	out	0x3d, r28	; 61
 3ec:	2a e0       	ldi	r18, 0x0A	; 10
 3ee:	ae 01       	movw	r20, r28
 3f0:	4f 5f       	subi	r20, 0xFF	; 255
 3f2:	5f 4f       	sbci	r21, 0xFF	; 255
 3f4:	0e 94 42 03 	call	0x684	; 0x684 <__ltoa_ncheck>
 3f8:	ce 01       	movw	r24, r28
 3fa:	01 96       	adiw	r24, 0x01	; 1
 3fc:	0e 94 d6 01 	call	0x3ac	; 0x3ac <bleSerialPrint>
 400:	60 96       	adiw	r28, 0x10	; 16
 402:	0f b6       	in	r0, 0x3f	; 63
 404:	f8 94       	cli
 406:	de bf       	out	0x3e, r29	; 62
 408:	0f be       	out	0x3f, r0	; 63
 40a:	cd bf       	out	0x3d, r28	; 61
 40c:	df 91       	pop	r29
 40e:	cf 91       	pop	r28
 410:	08 95       	ret

00000412 <bleBufferRead>:
 412:	ef 92       	push	r14
 414:	ff 92       	push	r15
 416:	0f 93       	push	r16
 418:	1f 93       	push	r17
 41a:	cf 93       	push	r28
 41c:	df 93       	push	r29
 41e:	ec 01       	movw	r28, r24
 420:	8b 01       	movw	r16, r22
 422:	0e 94 10 01 	call	0x220	; 0x220 <disableBleInterupt>
 426:	28 e1       	ldi	r18, 0x18	; 24
 428:	30 e0       	ldi	r19, 0x00	; 0
 42a:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <__data_end>
 42e:	40 91 2f 01 	lds	r20, 0x012F	; 0x80012f <bleInBufferStartIndex>
 432:	90 e0       	ldi	r25, 0x00	; 0
 434:	84 1b       	sub	r24, r20
 436:	91 09       	sbc	r25, r1
 438:	48 96       	adiw	r24, 0x18	; 24
 43a:	b9 01       	movw	r22, r18
 43c:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <__divmodhi4>
 440:	8c 17       	cp	r24, r28
 442:	9d 07       	cpc	r25, r29
 444:	90 f3       	brcs	.-28     	; 0x42a <bleBufferRead+0x18>
 446:	20 97       	sbiw	r28, 0x00	; 0
 448:	69 f1       	breq	.+90     	; 0x4a4 <bleBufferRead+0x92>
 44a:	f8 01       	movw	r30, r16
 44c:	40 e0       	ldi	r20, 0x00	; 0
 44e:	50 e0       	ldi	r21, 0x00	; 0
 450:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <bleInBufferStartIndex>
 454:	7a 01       	movw	r14, r20
 456:	e8 0e       	add	r14, r24
 458:	f1 1c       	adc	r15, r1
 45a:	97 01       	movw	r18, r14
 45c:	ab ea       	ldi	r26, 0xAB	; 171
 45e:	ba ea       	ldi	r27, 0xAA	; 170
 460:	0e 94 05 03 	call	0x60a	; 0x60a <__umulhisi3>
 464:	92 95       	swap	r25
 466:	82 95       	swap	r24
 468:	8f 70       	andi	r24, 0x0F	; 15
 46a:	89 27       	eor	r24, r25
 46c:	9f 70       	andi	r25, 0x0F	; 15
 46e:	89 27       	eor	r24, r25
 470:	9c 01       	movw	r18, r24
 472:	22 0f       	add	r18, r18
 474:	33 1f       	adc	r19, r19
 476:	82 0f       	add	r24, r18
 478:	93 1f       	adc	r25, r19
 47a:	88 0f       	add	r24, r24
 47c:	99 1f       	adc	r25, r25
 47e:	88 0f       	add	r24, r24
 480:	99 1f       	adc	r25, r25
 482:	88 0f       	add	r24, r24
 484:	99 1f       	adc	r25, r25
 486:	97 01       	movw	r18, r14
 488:	28 1b       	sub	r18, r24
 48a:	39 0b       	sbc	r19, r25
 48c:	d9 01       	movw	r26, r18
 48e:	a0 5d       	subi	r26, 0xD0	; 208
 490:	be 4f       	sbci	r27, 0xFE	; 254
 492:	8c 91       	ld	r24, X
 494:	81 93       	st	Z+, r24
 496:	4f 5f       	subi	r20, 0xFF	; 255
 498:	5f 4f       	sbci	r21, 0xFF	; 255
 49a:	c4 17       	cp	r28, r20
 49c:	d5 07       	cpc	r29, r21
 49e:	c1 f6       	brne	.-80     	; 0x450 <bleBufferRead+0x3e>
 4a0:	ce 01       	movw	r24, r28
 4a2:	01 c0       	rjmp	.+2      	; 0x4a6 <bleBufferRead+0x94>
 4a4:	ce 01       	movw	r24, r28
 4a6:	f8 01       	movw	r30, r16
 4a8:	e8 0f       	add	r30, r24
 4aa:	f9 1f       	adc	r31, r25
 4ac:	10 82       	st	Z, r1
 4ae:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <bleInBufferStartIndex>
 4b2:	c8 0f       	add	r28, r24
 4b4:	d1 1d       	adc	r29, r1
 4b6:	9e 01       	movw	r18, r28
 4b8:	ab ea       	ldi	r26, 0xAB	; 171
 4ba:	ba ea       	ldi	r27, 0xAA	; 170
 4bc:	0e 94 05 03 	call	0x60a	; 0x60a <__umulhisi3>
 4c0:	92 95       	swap	r25
 4c2:	82 95       	swap	r24
 4c4:	8f 70       	andi	r24, 0x0F	; 15
 4c6:	89 27       	eor	r24, r25
 4c8:	9f 70       	andi	r25, 0x0F	; 15
 4ca:	89 27       	eor	r24, r25
 4cc:	9c 01       	movw	r18, r24
 4ce:	22 0f       	add	r18, r18
 4d0:	33 1f       	adc	r19, r19
 4d2:	82 0f       	add	r24, r18
 4d4:	93 1f       	adc	r25, r19
 4d6:	88 0f       	add	r24, r24
 4d8:	99 1f       	adc	r25, r25
 4da:	88 0f       	add	r24, r24
 4dc:	99 1f       	adc	r25, r25
 4de:	88 0f       	add	r24, r24
 4e0:	99 1f       	adc	r25, r25
 4e2:	c8 1b       	sub	r28, r24
 4e4:	d9 0b       	sbc	r29, r25
 4e6:	c0 93 2f 01 	sts	0x012F, r28	; 0x80012f <bleInBufferStartIndex>
 4ea:	0e 94 16 01 	call	0x22c	; 0x22c <enableBleInterupt>
 4ee:	df 91       	pop	r29
 4f0:	cf 91       	pop	r28
 4f2:	1f 91       	pop	r17
 4f4:	0f 91       	pop	r16
 4f6:	ff 90       	pop	r15
 4f8:	ef 90       	pop	r14
 4fa:	08 95       	ret

000004fc <serialBleFind>:
	 return -1;
 }
 
  void bleBufferReadUntil(unsigned char stopChar, unsigned char *buffer) {
 4fc:	0f 93       	push	r16
 4fe:	1f 93       	push	r17
 500:	cf 93       	push	r28
 502:	df 93       	push	r29
 504:	48 2f       	mov	r20, r24
	  unsigned char i = 0;
	  while (i == 0)
 506:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <__data_end>
 50a:	20 91 2f 01 	lds	r18, 0x012F	; 0x80012f <bleInBufferStartIndex>
 50e:	90 e0       	ldi	r25, 0x00	; 0
 510:	82 1b       	sub	r24, r18
 512:	91 09       	sbc	r25, r1
 514:	48 96       	adiw	r24, 0x18	; 24
 516:	68 e1       	ldi	r22, 0x18	; 24
 518:	70 e0       	ldi	r23, 0x00	; 0
 51a:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <__divmodhi4>
	  i = serialBleFind(stopChar) + 1;
 51e:	88 23       	and	r24, r24
 520:	71 f1       	breq	.+92     	; 0x57e <serialBleFind+0x82>
 522:	ec 01       	movw	r28, r24
 524:	dd 27       	eor	r29, r29
	  bleBufferRead(i, buffer);
 526:	1c 16       	cp	r1, r28
 528:	1d 06       	cpc	r1, r29
 52a:	64 f5       	brge	.+88     	; 0x584 <serialBleFind+0x88>
	  return;
 52c:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <bleInBufferStartIndex>
 530:	90 e0       	ldi	r25, 0x00	; 0
 532:	68 e1       	ldi	r22, 0x18	; 24
 534:	70 e0       	ldi	r23, 0x00	; 0
 536:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <__divmodhi4>
 53a:	fc 01       	movw	r30, r24
 53c:	e0 5d       	subi	r30, 0xD0	; 208
 53e:	fe 4f       	sbci	r31, 0xFE	; 254
 540:	80 81       	ld	r24, Z
 542:	48 17       	cp	r20, r24
 544:	11 f1       	breq	.+68     	; 0x58a <serialBleFind+0x8e>
 546:	20 e0       	ldi	r18, 0x00	; 0
 548:	30 e0       	ldi	r19, 0x00	; 0
 54a:	08 e1       	ldi	r16, 0x18	; 24
 54c:	10 e0       	ldi	r17, 0x00	; 0
 54e:	0f c0       	rjmp	.+30     	; 0x56e <serialBleFind+0x72>
 550:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <bleInBufferStartIndex>
 554:	b9 01       	movw	r22, r18
 556:	69 0f       	add	r22, r25
 558:	71 1d       	adc	r23, r1
 55a:	cb 01       	movw	r24, r22
 55c:	b8 01       	movw	r22, r16
 55e:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <__divmodhi4>
 562:	fc 01       	movw	r30, r24
 564:	e0 5d       	subi	r30, 0xD0	; 208
 566:	fe 4f       	sbci	r31, 0xFE	; 254
 568:	90 81       	ld	r25, Z
 56a:	94 17       	cp	r25, r20
 56c:	89 f0       	breq	.+34     	; 0x590 <serialBleFind+0x94>
 
  void bleBufferReadUntil(unsigned char stopChar, unsigned char *buffer) {
	  unsigned char i = 0;
	  while (i == 0)
	  i = serialBleFind(stopChar) + 1;
	  bleBufferRead(i, buffer);
 56e:	2f 5f       	subi	r18, 0xFF	; 255
 570:	3f 4f       	sbci	r19, 0xFF	; 255
 572:	2c 17       	cp	r18, r28
 574:	3d 07       	cpc	r19, r29
 576:	61 f7       	brne	.-40     	; 0x550 <serialBleFind+0x54>
	  return;
 578:	8f ef       	ldi	r24, 0xFF	; 255
 57a:	9f ef       	ldi	r25, 0xFF	; 255
 57c:	0b c0       	rjmp	.+22     	; 0x594 <serialBleFind+0x98>
 57e:	8f ef       	ldi	r24, 0xFF	; 255
 580:	9f ef       	ldi	r25, 0xFF	; 255
 582:	08 c0       	rjmp	.+16     	; 0x594 <serialBleFind+0x98>
 584:	8f ef       	ldi	r24, 0xFF	; 255
 586:	9f ef       	ldi	r25, 0xFF	; 255
 588:	05 c0       	rjmp	.+10     	; 0x594 <serialBleFind+0x98>
  void bleBufferReadUntil(unsigned char stopChar, unsigned char *buffer) {
	  unsigned char i = 0;
	  while (i == 0)
	  i = serialBleFind(stopChar) + 1;
	  bleBufferRead(i, buffer);
	  return;
 58a:	80 e0       	ldi	r24, 0x00	; 0
 58c:	90 e0       	ldi	r25, 0x00	; 0
 58e:	02 c0       	rjmp	.+4      	; 0x594 <serialBleFind+0x98>
 
  void bleBufferReadUntil(unsigned char stopChar, unsigned char *buffer) {
	  unsigned char i = 0;
	  while (i == 0)
	  i = serialBleFind(stopChar) + 1;
	  bleBufferRead(i, buffer);
 590:	82 2f       	mov	r24, r18
 592:	93 2f       	mov	r25, r19
	  return;
 594:	df 91       	pop	r29
 596:	cf 91       	pop	r28
 598:	1f 91       	pop	r17
 59a:	0f 91       	pop	r16
 59c:	08 95       	ret

0000059e <bleBufferReadUntil>:
 59e:	0f 93       	push	r16
 5a0:	1f 93       	push	r17
 5a2:	cf 93       	push	r28
 5a4:	c8 2f       	mov	r28, r24
 5a6:	8b 01       	movw	r16, r22
 5a8:	8c 2f       	mov	r24, r28
 5aa:	0e 94 7e 02 	call	0x4fc	; 0x4fc <serialBleFind>
 5ae:	8f 5f       	subi	r24, 0xFF	; 255
 5b0:	d9 f3       	breq	.-10     	; 0x5a8 <bleBufferReadUntil+0xa>
 5b2:	b8 01       	movw	r22, r16
 5b4:	90 e0       	ldi	r25, 0x00	; 0
 5b6:	0e 94 09 02 	call	0x412	; 0x412 <bleBufferRead>
 5ba:	cf 91       	pop	r28
 5bc:	1f 91       	pop	r17
 5be:	0f 91       	pop	r16
 5c0:	08 95       	ret

000005c2 <relayTurnOn>:
		relayTurnOff();
	}
 }

 void relayTurnOn() {
	PORTB |= (1<<SSR_PIN);
 5c2:	28 9a       	sbi	0x05, 0	; 5
 5c4:	08 95       	ret

000005c6 <relayTurnOff>:
 }

 void relayTurnOff() {
	PORTB &= ~(1<<SSR_PIN);
 5c6:	28 98       	cbi	0x05, 0	; 5
 5c8:	08 95       	ret

000005ca <relayOnOff>:
	DDRB |= (1<<SSR_PIN);
	relayOnOff(onOff);
 }

 void relayOnOff(unsigned char onOff) {
	if (onOff) {
 5ca:	88 23       	and	r24, r24
 5cc:	19 f0       	breq	.+6      	; 0x5d4 <relayOnOff+0xa>
		relayTurnOn();
 5ce:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <relayTurnOn>
 5d2:	08 95       	ret
	}
	else {
		relayTurnOff();
 5d4:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <relayTurnOff>
 5d8:	08 95       	ret

000005da <initializeRelay>:

 #include "ssr.h"
 #include <avr/io.h>

 void initializeRelay(unsigned char onOff) {
	DDRB |= (1<<SSR_PIN);
 5da:	20 9a       	sbi	0x04, 0	; 4
	relayOnOff(onOff);
 5dc:	0e 94 e5 02 	call	0x5ca	; 0x5ca <relayOnOff>
 5e0:	08 95       	ret

000005e2 <__divmodhi4>:
 5e2:	97 fb       	bst	r25, 7
 5e4:	07 2e       	mov	r0, r23
 5e6:	16 f4       	brtc	.+4      	; 0x5ec <__divmodhi4+0xa>
 5e8:	00 94       	com	r0
 5ea:	07 d0       	rcall	.+14     	; 0x5fa <__divmodhi4_neg1>
 5ec:	77 fd       	sbrc	r23, 7
 5ee:	09 d0       	rcall	.+18     	; 0x602 <__divmodhi4_neg2>
 5f0:	0e 94 14 03 	call	0x628	; 0x628 <__udivmodhi4>
 5f4:	07 fc       	sbrc	r0, 7
 5f6:	05 d0       	rcall	.+10     	; 0x602 <__divmodhi4_neg2>
 5f8:	3e f4       	brtc	.+14     	; 0x608 <__divmodhi4_exit>

000005fa <__divmodhi4_neg1>:
 5fa:	90 95       	com	r25
 5fc:	81 95       	neg	r24
 5fe:	9f 4f       	sbci	r25, 0xFF	; 255
 600:	08 95       	ret

00000602 <__divmodhi4_neg2>:
 602:	70 95       	com	r23
 604:	61 95       	neg	r22
 606:	7f 4f       	sbci	r23, 0xFF	; 255

00000608 <__divmodhi4_exit>:
 608:	08 95       	ret

0000060a <__umulhisi3>:
 60a:	a2 9f       	mul	r26, r18
 60c:	b0 01       	movw	r22, r0
 60e:	b3 9f       	mul	r27, r19
 610:	c0 01       	movw	r24, r0
 612:	a3 9f       	mul	r26, r19
 614:	70 0d       	add	r23, r0
 616:	81 1d       	adc	r24, r1
 618:	11 24       	eor	r1, r1
 61a:	91 1d       	adc	r25, r1
 61c:	b2 9f       	mul	r27, r18
 61e:	70 0d       	add	r23, r0
 620:	81 1d       	adc	r24, r1
 622:	11 24       	eor	r1, r1
 624:	91 1d       	adc	r25, r1
 626:	08 95       	ret

00000628 <__udivmodhi4>:
 628:	aa 1b       	sub	r26, r26
 62a:	bb 1b       	sub	r27, r27
 62c:	51 e1       	ldi	r21, 0x11	; 17
 62e:	07 c0       	rjmp	.+14     	; 0x63e <__udivmodhi4_ep>

00000630 <__udivmodhi4_loop>:
 630:	aa 1f       	adc	r26, r26
 632:	bb 1f       	adc	r27, r27
 634:	a6 17       	cp	r26, r22
 636:	b7 07       	cpc	r27, r23
 638:	10 f0       	brcs	.+4      	; 0x63e <__udivmodhi4_ep>
 63a:	a6 1b       	sub	r26, r22
 63c:	b7 0b       	sbc	r27, r23

0000063e <__udivmodhi4_ep>:
 63e:	88 1f       	adc	r24, r24
 640:	99 1f       	adc	r25, r25
 642:	5a 95       	dec	r21
 644:	a9 f7       	brne	.-22     	; 0x630 <__udivmodhi4_loop>
 646:	80 95       	com	r24
 648:	90 95       	com	r25
 64a:	bc 01       	movw	r22, r24
 64c:	cd 01       	movw	r24, r26
 64e:	08 95       	ret

00000650 <strstr>:
 650:	fb 01       	movw	r30, r22
 652:	51 91       	ld	r21, Z+
 654:	55 23       	and	r21, r21
 656:	a9 f0       	breq	.+42     	; 0x682 <strstr+0x32>
 658:	bf 01       	movw	r22, r30
 65a:	dc 01       	movw	r26, r24
 65c:	4d 91       	ld	r20, X+
 65e:	45 17       	cp	r20, r21
 660:	41 11       	cpse	r20, r1
 662:	e1 f7       	brne	.-8      	; 0x65c <strstr+0xc>
 664:	59 f4       	brne	.+22     	; 0x67c <strstr+0x2c>
 666:	cd 01       	movw	r24, r26
 668:	01 90       	ld	r0, Z+
 66a:	00 20       	and	r0, r0
 66c:	49 f0       	breq	.+18     	; 0x680 <strstr+0x30>
 66e:	4d 91       	ld	r20, X+
 670:	40 15       	cp	r20, r0
 672:	41 11       	cpse	r20, r1
 674:	c9 f3       	breq	.-14     	; 0x668 <strstr+0x18>
 676:	fb 01       	movw	r30, r22
 678:	41 11       	cpse	r20, r1
 67a:	ef cf       	rjmp	.-34     	; 0x65a <strstr+0xa>
 67c:	81 e0       	ldi	r24, 0x01	; 1
 67e:	90 e0       	ldi	r25, 0x00	; 0
 680:	01 97       	sbiw	r24, 0x01	; 1
 682:	08 95       	ret

00000684 <__ltoa_ncheck>:
 684:	bb 27       	eor	r27, r27
 686:	2a 30       	cpi	r18, 0x0A	; 10
 688:	51 f4       	brne	.+20     	; 0x69e <__ltoa_ncheck+0x1a>
 68a:	99 23       	and	r25, r25
 68c:	42 f4       	brpl	.+16     	; 0x69e <__ltoa_ncheck+0x1a>
 68e:	bd e2       	ldi	r27, 0x2D	; 45
 690:	90 95       	com	r25
 692:	80 95       	com	r24
 694:	70 95       	com	r23
 696:	61 95       	neg	r22
 698:	7f 4f       	sbci	r23, 0xFF	; 255
 69a:	8f 4f       	sbci	r24, 0xFF	; 255
 69c:	9f 4f       	sbci	r25, 0xFF	; 255
 69e:	0c 94 52 03 	jmp	0x6a4	; 0x6a4 <__ultoa_common>

000006a2 <__ultoa_ncheck>:
 6a2:	bb 27       	eor	r27, r27

000006a4 <__ultoa_common>:
 6a4:	fa 01       	movw	r30, r20
 6a6:	a6 2f       	mov	r26, r22
 6a8:	62 17       	cp	r22, r18
 6aa:	71 05       	cpc	r23, r1
 6ac:	81 05       	cpc	r24, r1
 6ae:	91 05       	cpc	r25, r1
 6b0:	33 0b       	sbc	r19, r19
 6b2:	30 fb       	bst	r19, 0
 6b4:	66 f0       	brts	.+24     	; 0x6ce <__ultoa_common+0x2a>
 6b6:	aa 27       	eor	r26, r26
 6b8:	66 0f       	add	r22, r22
 6ba:	77 1f       	adc	r23, r23
 6bc:	88 1f       	adc	r24, r24
 6be:	99 1f       	adc	r25, r25
 6c0:	aa 1f       	adc	r26, r26
 6c2:	a2 17       	cp	r26, r18
 6c4:	10 f0       	brcs	.+4      	; 0x6ca <__ultoa_common+0x26>
 6c6:	a2 1b       	sub	r26, r18
 6c8:	63 95       	inc	r22
 6ca:	38 50       	subi	r19, 0x08	; 8
 6cc:	a9 f7       	brne	.-22     	; 0x6b8 <__ultoa_common+0x14>
 6ce:	a0 5d       	subi	r26, 0xD0	; 208
 6d0:	aa 33       	cpi	r26, 0x3A	; 58
 6d2:	08 f0       	brcs	.+2      	; 0x6d6 <__ultoa_common+0x32>
 6d4:	a9 5d       	subi	r26, 0xD9	; 217
 6d6:	a1 93       	st	Z+, r26
 6d8:	36 f7       	brtc	.-52     	; 0x6a6 <__ultoa_common+0x2>
 6da:	b1 11       	cpse	r27, r1
 6dc:	b1 93       	st	Z+, r27
 6de:	10 82       	st	Z, r1
 6e0:	ca 01       	movw	r24, r20
 6e2:	0c 94 73 03 	jmp	0x6e6	; 0x6e6 <strrev>

000006e6 <strrev>:
 6e6:	dc 01       	movw	r26, r24
 6e8:	fc 01       	movw	r30, r24
 6ea:	67 2f       	mov	r22, r23
 6ec:	71 91       	ld	r23, Z+
 6ee:	77 23       	and	r23, r23
 6f0:	e1 f7       	brne	.-8      	; 0x6ea <strrev+0x4>
 6f2:	32 97       	sbiw	r30, 0x02	; 2
 6f4:	04 c0       	rjmp	.+8      	; 0x6fe <strrev+0x18>
 6f6:	7c 91       	ld	r23, X
 6f8:	6d 93       	st	X+, r22
 6fa:	70 83       	st	Z, r23
 6fc:	62 91       	ld	r22, -Z
 6fe:	ae 17       	cp	r26, r30
 700:	bf 07       	cpc	r27, r31
 702:	c8 f3       	brcs	.-14     	; 0x6f6 <strrev+0x10>
 704:	08 95       	ret

00000706 <_exit>:
 706:	f8 94       	cli

00000708 <__stop_program>:
 708:	ff cf       	rjmp	.-2      	; 0x708 <__stop_program>
