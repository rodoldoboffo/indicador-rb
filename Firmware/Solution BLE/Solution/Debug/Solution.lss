
Solution.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000011e  00800100  00001e74  00001f08  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001e74  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000d3  0080021e  0080021e  00002026  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002026  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002058  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000688  00000000  00000000  00002098  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000088a2  00000000  00000000  00002720  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001a15  00000000  00000000  0000afc2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003678  00000000  00000000  0000c9d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000015b0  00000000  00000000  00010050  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001f00  00000000  00000000  00011600  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00006385  00000000  00000000  00013500  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000578  00000000  00000000  00019885  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 31 0a 	jmp	0x1462	; 0x1462 <__vector_5>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 92 07 	jmp	0xf24	; 0xf24 <__vector_14>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 7a 09 	jmp	0x12f4	; 0x12f4 <__vector_18>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	12 e0       	ldi	r17, 0x02	; 2
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e4 e7       	ldi	r30, 0x74	; 116
      7c:	fe e1       	ldi	r31, 0x1E	; 30
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	ae 31       	cpi	r26, 0x1E	; 30
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	22 e0       	ldi	r18, 0x02	; 2
      8c:	ae e1       	ldi	r26, 0x1E	; 30
      8e:	b2 e0       	ldi	r27, 0x02	; 2
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a1 3f       	cpi	r26, 0xF1	; 241
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 2d 06 	call	0xc5a	; 0xc5a <main>
      9e:	0c 94 38 0f 	jmp	0x1e70	; 0x1e70 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <adcInitialize>:
#include "ads1231.h"
#include <avr/io.h>
#include <util/delay.h>

void adcInitialize(unsigned char speed) {
	DDRC |= (1<<ADC_SPEED_PIN) | (1<<ADC_PDWN_PIN) | (1<<ADC_SCLK_PIN);
      a6:	97 b1       	in	r25, 0x07	; 7
      a8:	97 60       	ori	r25, 0x07	; 7
      aa:	97 b9       	out	0x07, r25	; 7
	DDRC &= ~(1<<ADC_DOUT_PIN);
      ac:	3b 98       	cbi	0x07, 3	; 7
	PORTC |= (1<<ADC_DOUT_PIN) | (1<<ADC_PDWN_PIN);
      ae:	98 b1       	in	r25, 0x08	; 8
      b0:	9a 60       	ori	r25, 0x0A	; 10
      b2:	98 b9       	out	0x08, r25	; 8
	PORTC &= ~(1<<ADC_SCLK_PIN);
      b4:	42 98       	cbi	0x08, 2	; 8
	if (speed)
      b6:	81 11       	cpse	r24, r1
		PORTC |= (1<<ADC_SPEED_PIN);
      b8:	40 9a       	sbi	0x08, 0	; 8
      ba:	08 95       	ret

000000bc <adcFetchData>:
long int adcFetchData() {
	unsigned char i, j;
	long int d = 0UL, temp;
	for (j=0; j<DIGITAL_FILTER; ) {
		temp = 0UL;
		while ((PINC & (1<<ADC_DOUT_PIN)));
      bc:	33 99       	sbic	0x06, 3	; 6
      be:	fe cf       	rjmp	.-4      	; 0xbc <adcFetchData>
      c0:	28 e1       	ldi	r18, 0x18	; 24
      c2:	80 e0       	ldi	r24, 0x00	; 0
      c4:	90 e0       	ldi	r25, 0x00	; 0
      c6:	dc 01       	movw	r26, r24
		for (i=0; i<24; i++) {
			PORTC |= (1<<ADC_SCLK_PIN);
      c8:	42 9a       	sbi	0x08, 2	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      ca:	35 e2       	ldi	r19, 0x25	; 37
      cc:	3a 95       	dec	r19
      ce:	f1 f7       	brne	.-4      	; 0xcc <adcFetchData+0x10>
			_delay_us(10);
			PORTC &= ~(1<<ADC_SCLK_PIN);
      d0:	42 98       	cbi	0x08, 2	; 8
			temp <<= 1;
      d2:	88 0f       	add	r24, r24
      d4:	99 1f       	adc	r25, r25
      d6:	aa 1f       	adc	r26, r26
      d8:	bb 1f       	adc	r27, r27
			if (PINC & (1<<ADC_DOUT_PIN)) temp |= 0x01;
      da:	33 99       	sbic	0x06, 3	; 6
      dc:	81 60       	ori	r24, 0x01	; 1
      de:	35 e2       	ldi	r19, 0x25	; 37
      e0:	3a 95       	dec	r19
      e2:	f1 f7       	brne	.-4      	; 0xe0 <adcFetchData+0x24>
      e4:	21 50       	subi	r18, 0x01	; 1
	unsigned char i, j;
	long int d = 0UL, temp;
	for (j=0; j<DIGITAL_FILTER; ) {
		temp = 0UL;
		while ((PINC & (1<<ADC_DOUT_PIN)));
		for (i=0; i<24; i++) {
      e6:	81 f7       	brne	.-32     	; 0xc8 <adcFetchData+0xc>
			PORTC &= ~(1<<ADC_SCLK_PIN);
			temp <<= 1;
			if (PINC & (1<<ADC_DOUT_PIN)) temp |= 0x01;
			_delay_us(10);
		}
		PORTC |= (1<<ADC_SCLK_PIN);
      e8:	42 9a       	sbi	0x08, 2	; 8
      ea:	25 e2       	ldi	r18, 0x25	; 37
      ec:	2a 95       	dec	r18
      ee:	f1 f7       	brne	.-4      	; 0xec <adcFetchData+0x30>
		_delay_us(10);
		PORTC &= ~(1<<ADC_SCLK_PIN);
      f0:	42 98       	cbi	0x08, 2	; 8
      f2:	35 e2       	ldi	r19, 0x25	; 37
      f4:	3a 95       	dec	r19
      f6:	f1 f7       	brne	.-4      	; 0xf4 <adcFetchData+0x38>
		_delay_us(10);
		if (temp & 0x800000) temp = temp | 0xFF000000;
      f8:	a7 fd       	sbrc	r26, 7
      fa:	bf 6f       	ori	r27, 0xFF	; 255
		if (temp != -1L) { // desconsidera o ponto -1. parece algum problema do AD. preciso investigar melhor.
      fc:	8f 3f       	cpi	r24, 0xFF	; 255
      fe:	2f ef       	ldi	r18, 0xFF	; 255
     100:	92 07       	cpc	r25, r18
     102:	a2 07       	cpc	r26, r18
     104:	b2 07       	cpc	r27, r18
     106:	d1 f2       	breq	.-76     	; 0xbc <adcFetchData>
			j++;
		}
	}
	d /= DIGITAL_FILTER;
	return d;
     108:	bc 01       	movw	r22, r24
     10a:	cd 01       	movw	r24, r26
     10c:	08 95       	ret

0000010e <QR>:
		 softwareSerialPrint(" ");
	 }
	 softwareSerialPrint("\n");
 }

 int QR(int m, int n, float A[][2], float *sigma, float *gamma, int *p) {
     10e:	2f 92       	push	r2
     110:	3f 92       	push	r3
     112:	4f 92       	push	r4
     114:	5f 92       	push	r5
     116:	6f 92       	push	r6
     118:	7f 92       	push	r7
     11a:	8f 92       	push	r8
     11c:	9f 92       	push	r9
     11e:	af 92       	push	r10
     120:	bf 92       	push	r11
     122:	cf 92       	push	r12
     124:	df 92       	push	r13
     126:	ef 92       	push	r14
     128:	ff 92       	push	r15
     12a:	0f 93       	push	r16
     12c:	1f 93       	push	r17
     12e:	cf 93       	push	r28
     130:	df 93       	push	r29
     132:	cd b7       	in	r28, 0x3d	; 61
     134:	de b7       	in	r29, 0x3e	; 62
     136:	a4 97       	sbiw	r28, 0x24	; 36
     138:	0f b6       	in	r0, 0x3f	; 63
     13a:	f8 94       	cli
     13c:	de bf       	out	0x3e, r29	; 62
     13e:	0f be       	out	0x3f, r0	; 63
     140:	cd bf       	out	0x3d, r28	; 61
	 int i, j, k=0, l, max_vetor;
	 float max, f, max_norma, aux;
	 /* laço que calcula a norma de todos os vetores da matriz */
	 for (j=0; j<n; j++) {
     142:	16 16       	cp	r1, r22
     144:	17 06       	cpc	r1, r23
     146:	0c f0       	brlt	.+2      	; 0x14a <QR+0x3c>
     148:	ca c2       	rjmp	.+1428   	; 0x6de <__LOCK_REGION_LENGTH__+0x2de>
     14a:	3a a3       	std	Y+34, r19	; 0x22
     14c:	29 a3       	std	Y+33, r18	; 0x21
     14e:	58 a3       	std	Y+32, r21	; 0x20
     150:	4f 8f       	std	Y+31, r20	; 0x1f
     152:	2b 01       	movw	r4, r22
     154:	9c 8f       	std	Y+28, r25	; 0x1c
     156:	8b 8f       	std	Y+27, r24	; 0x1b
     158:	3a 87       	std	Y+10, r19	; 0x0a
     15a:	29 87       	std	Y+9, r18	; 0x09
     15c:	0f 8b       	std	Y+23, r16	; 0x17
     15e:	18 8f       	std	Y+24, r17	; 0x18
     160:	e9 8e       	std	Y+25, r14	; 0x19
     162:	fa 8e       	std	Y+26, r15	; 0x1a
     164:	5a 83       	std	Y+2, r21	; 0x02
     166:	49 83       	std	Y+1, r20	; 0x01
     168:	88 0f       	add	r24, r24
     16a:	99 1f       	adc	r25, r25
     16c:	88 0f       	add	r24, r24
     16e:	99 1f       	adc	r25, r25
     170:	88 0f       	add	r24, r24
     172:	99 1f       	adc	r25, r25
     174:	98 87       	std	Y+8, r25	; 0x08
     176:	8f 83       	std	Y+7, r24	; 0x07
     178:	5a 01       	movw	r10, r20
     17a:	6e 2c       	mov	r6, r14
     17c:	7f 2c       	mov	r7, r15
     17e:	20 2e       	mov	r2, r16
     180:	31 2e       	mov	r3, r17
     182:	c9 a0       	ldd	r12, Y+33	; 0x21
     184:	da a0       	ldd	r13, Y+34	; 0x22
     186:	e1 2c       	mov	r14, r1
     188:	f1 2c       	mov	r15, r1
     18a:	dc 82       	std	Y+4, r13	; 0x04
     18c:	cb 82       	std	Y+3, r12	; 0x03
		 sigma[j] = 0.0;
     18e:	f6 01       	movw	r30, r12
     190:	10 82       	st	Z, r1
     192:	11 82       	std	Z+1, r1	; 0x01
     194:	12 82       	std	Z+2, r1	; 0x02
     196:	13 82       	std	Z+3, r1	; 0x03
		 for (i=0; i<m; i++) sigma[j] += fabs(A[i][j]*A[i][j]);
     198:	2b 8d       	ldd	r18, Y+27	; 0x1b
     19a:	3c 8d       	ldd	r19, Y+28	; 0x1c
     19c:	12 16       	cp	r1, r18
     19e:	13 06       	cpc	r1, r19
     1a0:	1c f5       	brge	.+70     	; 0x1e8 <QR+0xda>
     1a2:	8f 80       	ldd	r8, Y+7	; 0x07
     1a4:	98 84       	ldd	r9, Y+8	; 0x08
     1a6:	8a 0c       	add	r8, r10
     1a8:	9b 1c       	adc	r9, r11
     1aa:	85 01       	movw	r16, r10
     1ac:	f8 01       	movw	r30, r16
     1ae:	60 81       	ld	r22, Z
     1b0:	71 81       	ldd	r23, Z+1	; 0x01
     1b2:	82 81       	ldd	r24, Z+2	; 0x02
     1b4:	93 81       	ldd	r25, Z+3	; 0x03
     1b6:	9b 01       	movw	r18, r22
     1b8:	ac 01       	movw	r20, r24
     1ba:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <__mulsf3>
     1be:	9b 01       	movw	r18, r22
     1c0:	ac 01       	movw	r20, r24
     1c2:	eb 81       	ldd	r30, Y+3	; 0x03
     1c4:	fc 81       	ldd	r31, Y+4	; 0x04
     1c6:	60 81       	ld	r22, Z
     1c8:	71 81       	ldd	r23, Z+1	; 0x01
     1ca:	82 81       	ldd	r24, Z+2	; 0x02
     1cc:	93 81       	ldd	r25, Z+3	; 0x03
     1ce:	0e 94 07 0c 	call	0x180e	; 0x180e <__addsf3>
     1d2:	eb 81       	ldd	r30, Y+3	; 0x03
     1d4:	fc 81       	ldd	r31, Y+4	; 0x04
     1d6:	60 83       	st	Z, r22
     1d8:	71 83       	std	Z+1, r23	; 0x01
     1da:	82 83       	std	Z+2, r24	; 0x02
     1dc:	93 83       	std	Z+3, r25	; 0x03
     1de:	08 5f       	subi	r16, 0xF8	; 248
     1e0:	1f 4f       	sbci	r17, 0xFF	; 255
     1e2:	80 16       	cp	r8, r16
     1e4:	91 06       	cpc	r9, r17
     1e6:	11 f7       	brne	.-60     	; 0x1ac <QR+0x9e>
		 sigma[j] = sqrt(sigma[j]);
     1e8:	eb 81       	ldd	r30, Y+3	; 0x03
     1ea:	fc 81       	ldd	r31, Y+4	; 0x04
     1ec:	60 81       	ld	r22, Z
     1ee:	71 81       	ldd	r23, Z+1	; 0x01
     1f0:	82 81       	ldd	r24, Z+2	; 0x02
     1f2:	93 81       	ldd	r25, Z+3	; 0x03
     1f4:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <sqrt>
     1f8:	eb 81       	ldd	r30, Y+3	; 0x03
     1fa:	fc 81       	ldd	r31, Y+4	; 0x04
     1fc:	60 83       	st	Z, r22
     1fe:	71 83       	std	Z+1, r23	; 0x01
     200:	82 83       	std	Z+2, r24	; 0x02
     202:	93 83       	std	Z+3, r25	; 0x03
     204:	f4 e0       	ldi	r31, 0x04	; 4
     206:	cf 0e       	add	r12, r31
     208:	d1 1c       	adc	r13, r1
		 gamma[j] = 0.0;
     20a:	f1 01       	movw	r30, r2
     20c:	11 92       	st	Z+, r1
     20e:	11 92       	st	Z+, r1
     210:	11 92       	st	Z+, r1
     212:	11 92       	st	Z+, r1
     214:	1f 01       	movw	r2, r30
		 p[j] = j;
     216:	f3 01       	movw	r30, r6
     218:	e1 92       	st	Z+, r14
     21a:	f1 92       	st	Z+, r15
     21c:	3f 01       	movw	r6, r30

 int QR(int m, int n, float A[][2], float *sigma, float *gamma, int *p) {
	 int i, j, k=0, l, max_vetor;
	 float max, f, max_norma, aux;
	 /* laço que calcula a norma de todos os vetores da matriz */
	 for (j=0; j<n; j++) {
     21e:	ff ef       	ldi	r31, 0xFF	; 255
     220:	ef 1a       	sub	r14, r31
     222:	ff 0a       	sbc	r15, r31
     224:	24 e0       	ldi	r18, 0x04	; 4
     226:	a2 0e       	add	r10, r18
     228:	b1 1c       	adc	r11, r1
     22a:	4e 14       	cp	r4, r14
     22c:	5f 04       	cpc	r5, r15
     22e:	09 f0       	breq	.+2      	; 0x232 <QR+0x124>
     230:	ac cf       	rjmp	.-168    	; 0x18a <QR+0x7c>
     232:	2f 8c       	ldd	r2, Y+31	; 0x1f
     234:	38 a0       	ldd	r3, Y+32	; 0x20
     236:	8f 81       	ldd	r24, Y+7	; 0x07
     238:	98 85       	ldd	r25, Y+8	; 0x08
     23a:	28 0e       	add	r2, r24
     23c:	39 1e       	adc	r3, r25
     23e:	c2 01       	movw	r24, r4
     240:	88 0f       	add	r24, r24
     242:	99 1f       	adc	r25, r25
     244:	88 0f       	add	r24, r24
     246:	99 1f       	adc	r25, r25
     248:	e9 a1       	ldd	r30, Y+33	; 0x21
     24a:	fa a1       	ldd	r31, Y+34	; 0x22
     24c:	e8 0f       	add	r30, r24
     24e:	f9 1f       	adc	r31, r25
     250:	fc a3       	std	Y+36, r31	; 0x24
     252:	eb a3       	std	Y+35, r30	; 0x23
     254:	1e 8e       	std	Y+30, r1	; 0x1e
     256:	1d 8e       	std	Y+29, r1	; 0x1d
     258:	21 e0       	ldi	r18, 0x01	; 1
     25a:	30 e0       	ldi	r19, 0x00	; 0
     25c:	3e 8b       	std	Y+22, r19	; 0x16
     25e:	2d 8b       	std	Y+21, r18	; 0x15
     260:	1c 8a       	std	Y+20, r1	; 0x14
     262:	1b 8a       	std	Y+19, r1	; 0x13
			 sigma[k] = sigma[max_vetor];
			 sigma[max_vetor] = aux;
		 }
		 /* seleciona o maior elemento em módulo do vetor, para normalizá-lo */
		 for (i=k; i<m; i++) if (fabs(A[i][k])>max) max = fabs(A[i][k]);
		 if (fabs(max) <= EPSILON) gamma[k] = 0.0;
     264:	1f 86       	std	Y+15, r1	; 0x0f
     266:	18 8a       	std	Y+16, r1	; 0x10
     268:	19 8a       	std	Y+17, r1	; 0x11
     26a:	1a 8a       	std	Y+18, r1	; 0x12
     26c:	2d c0       	rjmp	.+90     	; 0x2c8 <QR+0x1ba>
     26e:	8b 89       	ldd	r24, Y+19	; 0x13
     270:	9c 89       	ldd	r25, Y+20	; 0x14
     272:	01 96       	adiw	r24, 0x01	; 1
     274:	9c 8b       	std	Y+20, r25	; 0x14
     276:	8b 8b       	std	Y+19, r24	; 0x13
     278:	ed 89       	ldd	r30, Y+21	; 0x15
     27a:	fe 89       	ldd	r31, Y+22	; 0x16
     27c:	31 96       	adiw	r30, 0x01	; 1
     27e:	fe 8b       	std	Y+22, r31	; 0x16
     280:	ed 8b       	std	Y+21, r30	; 0x15
     282:	2f 89       	ldd	r18, Y+23	; 0x17
     284:	38 8d       	ldd	r19, Y+24	; 0x18
     286:	2c 5f       	subi	r18, 0xFC	; 252
     288:	3f 4f       	sbci	r19, 0xFF	; 255
     28a:	38 8f       	std	Y+24, r19	; 0x18
     28c:	2f 8b       	std	Y+23, r18	; 0x17
     28e:	8d 8d       	ldd	r24, Y+29	; 0x1d
     290:	9e 8d       	ldd	r25, Y+30	; 0x1e
     292:	04 96       	adiw	r24, 0x04	; 4
     294:	9e 8f       	std	Y+30, r25	; 0x1e
     296:	8d 8f       	std	Y+29, r24	; 0x1d
     298:	e9 85       	ldd	r30, Y+9	; 0x09
     29a:	fa 85       	ldd	r31, Y+10	; 0x0a
     29c:	34 96       	adiw	r30, 0x04	; 4
     29e:	fa 87       	std	Y+10, r31	; 0x0a
     2a0:	e9 87       	std	Y+9, r30	; 0x09
     2a2:	f4 e0       	ldi	r31, 0x04	; 4
     2a4:	2f 0e       	add	r2, r31
     2a6:	31 1c       	adc	r3, r1
     2a8:	29 8d       	ldd	r18, Y+25	; 0x19
     2aa:	3a 8d       	ldd	r19, Y+26	; 0x1a
     2ac:	2e 5f       	subi	r18, 0xFE	; 254
     2ae:	3f 4f       	sbci	r19, 0xFF	; 255
     2b0:	3a 8f       	std	Y+26, r19	; 0x1a
     2b2:	29 8f       	std	Y+25, r18	; 0x19
     2b4:	89 81       	ldd	r24, Y+1	; 0x01
     2b6:	9a 81       	ldd	r25, Y+2	; 0x02
     2b8:	0c 96       	adiw	r24, 0x0c	; 12
     2ba:	9a 83       	std	Y+2, r25	; 0x02
     2bc:	89 83       	std	Y+1, r24	; 0x01
     2be:	ef 81       	ldd	r30, Y+7	; 0x07
     2c0:	f8 85       	ldd	r31, Y+8	; 0x08
     2c2:	38 97       	sbiw	r30, 0x08	; 8
     2c4:	f8 87       	std	Y+8, r31	; 0x08
     2c6:	ef 83       	std	Y+7, r30	; 0x07
     2c8:	2b 89       	ldd	r18, Y+19	; 0x13
     2ca:	3c 89       	ldd	r19, Y+20	; 0x14
     2cc:	3c 87       	std	Y+12, r19	; 0x0c
     2ce:	2b 87       	std	Y+11, r18	; 0x0b
	 }
	 /* laço externo que itera o algoritmo decomposição QR em toda a matriz A */
	 for (k=0; k<n; k++) {
		 max = 0.0;
		 /* se não é a primeira iteração, recalcula a norma dos vetores, com uma dimensão menor do que a iteração anterior */
		 if (k>0) for (j=k; j<n; j++) sigma[j] = sqrt(fabs(sigma[j]*sigma[j]-A[k-1][j]*A[k-1][j]));
     2d0:	12 16       	cp	r1, r18
     2d2:	13 06       	cpc	r1, r19
     2d4:	0c f0       	brlt	.+2      	; 0x2d8 <QR+0x1ca>
     2d6:	47 c0       	rjmp	.+142    	; 0x366 <QR+0x258>
     2d8:	24 15       	cp	r18, r4
     2da:	35 05       	cpc	r19, r5
     2dc:	0c f0       	brlt	.+2      	; 0x2e0 <QR+0x1d2>
     2de:	02 c2       	rjmp	.+1028   	; 0x6e4 <__LOCK_REGION_LENGTH__+0x2e4>
     2e0:	09 81       	ldd	r16, Y+1	; 0x01
     2e2:	1a 81       	ldd	r17, Y+2	; 0x02
     2e4:	08 50       	subi	r16, 0x08	; 8
     2e6:	11 09       	sbc	r17, r1
     2e8:	89 85       	ldd	r24, Y+9	; 0x09
     2ea:	9a 85       	ldd	r25, Y+10	; 0x0a
     2ec:	9e 87       	std	Y+14, r25	; 0x0e
     2ee:	8d 87       	std	Y+13, r24	; 0x0d
     2f0:	6b a0       	ldd	r6, Y+35	; 0x23
     2f2:	7c a0       	ldd	r7, Y+36	; 0x24
     2f4:	ed 85       	ldd	r30, Y+13	; 0x0d
     2f6:	fe 85       	ldd	r31, Y+14	; 0x0e
     2f8:	80 80       	ld	r8, Z
     2fa:	91 80       	ldd	r9, Z+1	; 0x01
     2fc:	a2 80       	ldd	r10, Z+2	; 0x02
     2fe:	b3 80       	ldd	r11, Z+3	; 0x03
     300:	f8 01       	movw	r30, r16
     302:	c1 90       	ld	r12, Z+
     304:	d1 90       	ld	r13, Z+
     306:	e1 90       	ld	r14, Z+
     308:	f1 90       	ld	r15, Z+
     30a:	8f 01       	movw	r16, r30
     30c:	a5 01       	movw	r20, r10
     30e:	94 01       	movw	r18, r8
     310:	c5 01       	movw	r24, r10
     312:	b4 01       	movw	r22, r8
     314:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <__mulsf3>
     318:	6b 83       	std	Y+3, r22	; 0x03
     31a:	7c 83       	std	Y+4, r23	; 0x04
     31c:	8d 83       	std	Y+5, r24	; 0x05
     31e:	9e 83       	std	Y+6, r25	; 0x06
     320:	a5 01       	movw	r20, r10
     322:	94 01       	movw	r18, r8
     324:	c5 01       	movw	r24, r10
     326:	b4 01       	movw	r22, r8
     328:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <__mulsf3>
     32c:	4b 01       	movw	r8, r22
     32e:	5c 01       	movw	r10, r24
     330:	a7 01       	movw	r20, r14
     332:	96 01       	movw	r18, r12
     334:	c7 01       	movw	r24, r14
     336:	b6 01       	movw	r22, r12
     338:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <__mulsf3>
     33c:	9b 01       	movw	r18, r22
     33e:	ac 01       	movw	r20, r24
     340:	c5 01       	movw	r24, r10
     342:	b4 01       	movw	r22, r8
     344:	0e 94 06 0c 	call	0x180c	; 0x180c <__subsf3>
     348:	9f 77       	andi	r25, 0x7F	; 127
     34a:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <sqrt>
     34e:	ed 85       	ldd	r30, Y+13	; 0x0d
     350:	fe 85       	ldd	r31, Y+14	; 0x0e
     352:	61 93       	st	Z+, r22
     354:	71 93       	st	Z+, r23
     356:	81 93       	st	Z+, r24
     358:	91 93       	st	Z+, r25
     35a:	fe 87       	std	Y+14, r31	; 0x0e
     35c:	ed 87       	std	Y+13, r30	; 0x0d
     35e:	e6 15       	cp	r30, r6
     360:	f7 05       	cpc	r31, r7
     362:	41 f6       	brne	.-112    	; 0x2f4 <QR+0x1e6>
     364:	d2 c1       	rjmp	.+932    	; 0x70a <__LOCK_REGION_LENGTH__+0x30a>
		 /* laço que procura o vetor de maior norma da submatriz da iteração (para colocar os vetores de norma 0 à direita da matriz, se existirem) */
		 for (l=k, max_norma = sigma[l], max_vetor = l; l<n; l++) {
     366:	29 85       	ldd	r18, Y+9	; 0x09
     368:	3a 85       	ldd	r19, Y+10	; 0x0a
     36a:	3e 87       	std	Y+14, r19	; 0x0e
     36c:	2d 87       	std	Y+13, r18	; 0x0d
     36e:	f9 01       	movw	r30, r18
     370:	80 80       	ld	r8, Z
     372:	91 80       	ldd	r9, Z+1	; 0x01
     374:	a2 80       	ldd	r10, Z+2	; 0x02
     376:	b3 80       	ldd	r11, Z+3	; 0x03
     378:	2b 85       	ldd	r18, Y+11	; 0x0b
     37a:	3c 85       	ldd	r19, Y+12	; 0x0c
     37c:	24 15       	cp	r18, r4
     37e:	35 05       	cpc	r19, r5
     380:	0c f0       	brlt	.+2      	; 0x384 <QR+0x276>
     382:	cd c1       	rjmp	.+922    	; 0x71e <__LOCK_REGION_LENGTH__+0x31e>
     384:	09 85       	ldd	r16, Y+9	; 0x09
     386:	1a 85       	ldd	r17, Y+10	; 0x0a
     388:	0c 5f       	subi	r16, 0xFC	; 252
     38a:	1f 4f       	sbci	r17, 0xFF	; 255
     38c:	8b 85       	ldd	r24, Y+11	; 0x0b
     38e:	9c 85       	ldd	r25, Y+12	; 0x0c
     390:	3c 01       	movw	r6, r24
     392:	9c 83       	std	Y+4, r25	; 0x04
     394:	8b 83       	std	Y+3, r24	; 0x03
     396:	16 c0       	rjmp	.+44     	; 0x3c4 <QR+0x2b6>
			 if (max_norma < sigma[l]) { max_norma = sigma[l]; max_vetor = l; }
     398:	f8 01       	movw	r30, r16
     39a:	c1 90       	ld	r12, Z+
     39c:	d1 90       	ld	r13, Z+
     39e:	e1 90       	ld	r14, Z+
     3a0:	f1 90       	ld	r15, Z+
     3a2:	8f 01       	movw	r16, r30
     3a4:	a7 01       	movw	r20, r14
     3a6:	96 01       	movw	r18, r12
     3a8:	68 2d       	mov	r22, r8
     3aa:	79 2d       	mov	r23, r9
     3ac:	8a 2d       	mov	r24, r10
     3ae:	9b 2d       	mov	r25, r11
     3b0:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <__cmpsf2>
     3b4:	88 23       	and	r24, r24
     3b6:	34 f4       	brge	.+12     	; 0x3c4 <QR+0x2b6>
     3b8:	8c 2c       	mov	r8, r12
     3ba:	9d 2c       	mov	r9, r13
     3bc:	ae 2c       	mov	r10, r14
     3be:	bf 2c       	mov	r11, r15
	 for (k=0; k<n; k++) {
		 max = 0.0;
		 /* se não é a primeira iteração, recalcula a norma dos vetores, com uma dimensão menor do que a iteração anterior */
		 if (k>0) for (j=k; j<n; j++) sigma[j] = sqrt(fabs(sigma[j]*sigma[j]-A[k-1][j]*A[k-1][j]));
		 /* laço que procura o vetor de maior norma da submatriz da iteração (para colocar os vetores de norma 0 à direita da matriz, se existirem) */
		 for (l=k, max_norma = sigma[l], max_vetor = l; l<n; l++) {
     3c0:	6b 80       	ldd	r6, Y+3	; 0x03
     3c2:	7c 80       	ldd	r7, Y+4	; 0x04
     3c4:	2b 81       	ldd	r18, Y+3	; 0x03
     3c6:	3c 81       	ldd	r19, Y+4	; 0x04
     3c8:	2f 5f       	subi	r18, 0xFF	; 255
     3ca:	3f 4f       	sbci	r19, 0xFF	; 255
     3cc:	3c 83       	std	Y+4, r19	; 0x04
     3ce:	2b 83       	std	Y+3, r18	; 0x03
     3d0:	24 15       	cp	r18, r4
     3d2:	35 05       	cpc	r19, r5
     3d4:	0c f3       	brlt	.-62     	; 0x398 <QR+0x28a>
			 if (max_norma < sigma[l]) { max_norma = sigma[l]; max_vetor = l; }
		 }
		 if (max_norma <= EPSILON) return k;
     3d6:	2c ea       	ldi	r18, 0xAC	; 172
     3d8:	35 ec       	ldi	r19, 0xC5	; 197
     3da:	47 e2       	ldi	r20, 0x27	; 39
     3dc:	57 e3       	ldi	r21, 0x37	; 55
     3de:	68 2d       	mov	r22, r8
     3e0:	79 2d       	mov	r23, r9
     3e2:	8a 2d       	mov	r24, r10
     3e4:	9b 2d       	mov	r25, r11
     3e6:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <__cmpsf2>
     3ea:	18 16       	cp	r1, r24
     3ec:	0c f0       	brlt	.+2      	; 0x3f0 <QR+0x2e2>
     3ee:	cf c1       	rjmp	.+926    	; 0x78e <__LOCK_REGION_LENGTH__+0x38e>
		 /* troca os vetores de lugar, e armazena essa informação no vetor permutação p */
		 if (max_vetor != k) {
     3f0:	8b 85       	ldd	r24, Y+11	; 0x0b
     3f2:	9c 85       	ldd	r25, Y+12	; 0x0c
     3f4:	68 16       	cp	r6, r24
     3f6:	79 06       	cpc	r7, r25
     3f8:	09 f4       	brne	.+2      	; 0x3fc <QR+0x2ee>
     3fa:	4e c0       	rjmp	.+156    	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
			 p[k] = max_vetor;
     3fc:	e9 8d       	ldd	r30, Y+25	; 0x19
     3fe:	fa 8d       	ldd	r31, Y+26	; 0x1a
     400:	71 82       	std	Z+1, r7	; 0x01
     402:	60 82       	st	Z, r6
			 for (i=0; i<m; i++) {
     404:	2b 8d       	ldd	r18, Y+27	; 0x1b
     406:	3c 8d       	ldd	r19, Y+28	; 0x1c
     408:	12 16       	cp	r1, r18
     40a:	13 06       	cpc	r1, r19
     40c:	34 f5       	brge	.+76     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
     40e:	ef 8d       	ldd	r30, Y+31	; 0x1f
     410:	f8 a1       	ldd	r31, Y+32	; 0x20
     412:	8d 8d       	ldd	r24, Y+29	; 0x1d
     414:	9e 8d       	ldd	r25, Y+30	; 0x1e
     416:	e8 0f       	add	r30, r24
     418:	f9 1f       	adc	r31, r25
     41a:	d3 01       	movw	r26, r6
     41c:	aa 0f       	add	r26, r26
     41e:	bb 1f       	adc	r27, r27
     420:	aa 0f       	add	r26, r26
     422:	bb 1f       	adc	r27, r27
     424:	2f 8d       	ldd	r18, Y+31	; 0x1f
     426:	38 a1       	ldd	r19, Y+32	; 0x20
     428:	a2 0f       	add	r26, r18
     42a:	b3 1f       	adc	r27, r19
				 aux = A[i][k];
     42c:	40 81       	ld	r20, Z
     42e:	51 81       	ldd	r21, Z+1	; 0x01
     430:	62 81       	ldd	r22, Z+2	; 0x02
     432:	73 81       	ldd	r23, Z+3	; 0x03
				 A[i][k] = A[i][max_vetor];
     434:	0d 91       	ld	r16, X+
     436:	1d 91       	ld	r17, X+
     438:	2d 91       	ld	r18, X+
     43a:	3c 91       	ld	r19, X
     43c:	13 97       	sbiw	r26, 0x03	; 3
     43e:	00 83       	st	Z, r16
     440:	11 83       	std	Z+1, r17	; 0x01
     442:	22 83       	std	Z+2, r18	; 0x02
     444:	33 83       	std	Z+3, r19	; 0x03
				 A[i][max_vetor] = aux;
     446:	4d 93       	st	X+, r20
     448:	5d 93       	st	X+, r21
     44a:	6d 93       	st	X+, r22
     44c:	7c 93       	st	X, r23
     44e:	13 97       	sbiw	r26, 0x03	; 3
     450:	38 96       	adiw	r30, 0x08	; 8
     452:	18 96       	adiw	r26, 0x08	; 8
		 }
		 if (max_norma <= EPSILON) return k;
		 /* troca os vetores de lugar, e armazena essa informação no vetor permutação p */
		 if (max_vetor != k) {
			 p[k] = max_vetor;
			 for (i=0; i<m; i++) {
     454:	e2 15       	cp	r30, r2
     456:	f3 05       	cpc	r31, r3
     458:	49 f7       	brne	.-46     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
				 aux = A[i][k];
				 A[i][k] = A[i][max_vetor];
				 A[i][max_vetor] = aux;
			 }
			 aux = sigma[k];
     45a:	ed 85       	ldd	r30, Y+13	; 0x0d
     45c:	fe 85       	ldd	r31, Y+14	; 0x0e
     45e:	80 81       	ld	r24, Z
     460:	91 81       	ldd	r25, Z+1	; 0x01
     462:	a2 81       	ldd	r26, Z+2	; 0x02
     464:	b3 81       	ldd	r27, Z+3	; 0x03
			 sigma[k] = sigma[max_vetor];
     466:	f3 01       	movw	r30, r6
     468:	ee 0f       	add	r30, r30
     46a:	ff 1f       	adc	r31, r31
     46c:	ee 0f       	add	r30, r30
     46e:	ff 1f       	adc	r31, r31
     470:	09 a1       	ldd	r16, Y+33	; 0x21
     472:	1a a1       	ldd	r17, Y+34	; 0x22
     474:	0e 0f       	add	r16, r30
     476:	1f 1f       	adc	r17, r31
     478:	f8 01       	movw	r30, r16
     47a:	40 81       	ld	r20, Z
     47c:	51 81       	ldd	r21, Z+1	; 0x01
     47e:	62 81       	ldd	r22, Z+2	; 0x02
     480:	73 81       	ldd	r23, Z+3	; 0x03
     482:	ed 85       	ldd	r30, Y+13	; 0x0d
     484:	fe 85       	ldd	r31, Y+14	; 0x0e
     486:	40 83       	st	Z, r20
     488:	51 83       	std	Z+1, r21	; 0x01
     48a:	62 83       	std	Z+2, r22	; 0x02
     48c:	73 83       	std	Z+3, r23	; 0x03
			 sigma[max_vetor] = aux;
     48e:	f8 01       	movw	r30, r16
     490:	80 83       	st	Z, r24
     492:	91 83       	std	Z+1, r25	; 0x01
     494:	a2 83       	std	Z+2, r26	; 0x02
     496:	b3 83       	std	Z+3, r27	; 0x03
		 }
		 /* seleciona o maior elemento em módulo do vetor, para normalizá-lo */
		 for (i=k; i<m; i++) if (fabs(A[i][k])>max) max = fabs(A[i][k]);
     498:	2b 8d       	ldd	r18, Y+27	; 0x1b
     49a:	3c 8d       	ldd	r19, Y+28	; 0x1c
     49c:	8b 85       	ldd	r24, Y+11	; 0x0b
     49e:	9c 85       	ldd	r25, Y+12	; 0x0c
     4a0:	82 17       	cp	r24, r18
     4a2:	93 07       	cpc	r25, r19
     4a4:	34 f5       	brge	.+76     	; 0x4f2 <__LOCK_REGION_LENGTH__+0xf2>
     4a6:	e9 81       	ldd	r30, Y+1	; 0x01
     4a8:	fa 81       	ldd	r31, Y+2	; 0x02
     4aa:	80 e0       	ldi	r24, 0x00	; 0
     4ac:	90 e0       	ldi	r25, 0x00	; 0
     4ae:	a0 e0       	ldi	r26, 0x00	; 0
     4b0:	b0 e0       	ldi	r27, 0x00	; 0
     4b2:	6c 01       	movw	r12, r24
     4b4:	7d 01       	movw	r14, r26
     4b6:	fc 83       	std	Y+4, r31	; 0x04
     4b8:	eb 83       	std	Y+3, r30	; 0x03
     4ba:	eb 81       	ldd	r30, Y+3	; 0x03
     4bc:	fc 81       	ldd	r31, Y+4	; 0x04
     4be:	80 80       	ld	r8, Z
     4c0:	91 80       	ldd	r9, Z+1	; 0x01
     4c2:	a2 80       	ldd	r10, Z+2	; 0x02
     4c4:	b3 80       	ldd	r11, Z+3	; 0x03
     4c6:	e8 94       	clt
     4c8:	b7 f8       	bld	r11, 7
     4ca:	a7 01       	movw	r20, r14
     4cc:	96 01       	movw	r18, r12
     4ce:	c5 01       	movw	r24, r10
     4d0:	b4 01       	movw	r22, r8
     4d2:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <__gesf2>
     4d6:	18 16       	cp	r1, r24
     4d8:	14 f4       	brge	.+4      	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
     4da:	75 01       	movw	r14, r10
     4dc:	64 01       	movw	r12, r8
     4de:	2b 81       	ldd	r18, Y+3	; 0x03
     4e0:	3c 81       	ldd	r19, Y+4	; 0x04
     4e2:	28 5f       	subi	r18, 0xF8	; 248
     4e4:	3f 4f       	sbci	r19, 0xFF	; 255
     4e6:	3c 83       	std	Y+4, r19	; 0x04
     4e8:	2b 83       	std	Y+3, r18	; 0x03
     4ea:	22 15       	cp	r18, r2
     4ec:	33 05       	cpc	r19, r3
     4ee:	29 f7       	brne	.-54     	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
     4f0:	24 c1       	rjmp	.+584    	; 0x73a <__LOCK_REGION_LENGTH__+0x33a>
		 if (fabs(max) <= EPSILON) gamma[k] = 0.0;
     4f2:	ef 89       	ldd	r30, Y+23	; 0x17
     4f4:	f8 8d       	ldd	r31, Y+24	; 0x18
     4f6:	10 82       	st	Z, r1
     4f8:	11 82       	std	Z+1, r1	; 0x01
     4fa:	12 82       	std	Z+2, r1	; 0x02
     4fc:	13 82       	std	Z+3, r1	; 0x03
		 sigma[j] = sqrt(sigma[j]);
		 gamma[j] = 0.0;
		 p[j] = j;
	 }
	 /* laço externo que itera o algoritmo decomposição QR em toda a matriz A */
	 for (k=0; k<n; k++) {
     4fe:	2d 89       	ldd	r18, Y+21	; 0x15
     500:	3e 89       	ldd	r19, Y+22	; 0x16
     502:	3c 87       	std	Y+12, r19	; 0x0c
     504:	2b 87       	std	Y+11, r18	; 0x0b
     506:	24 15       	cp	r18, r4
     508:	35 05       	cpc	r19, r5
     50a:	0c f4       	brge	.+2      	; 0x50e <__LOCK_REGION_LENGTH__+0x10e>
     50c:	b0 ce       	rjmp	.-672    	; 0x26e <QR+0x160>
     50e:	3f c1       	rjmp	.+638    	; 0x78e <__LOCK_REGION_LENGTH__+0x38e>
		 /* seleciona o maior elemento em módulo do vetor, para normalizá-lo */
		 for (i=k; i<m; i++) if (fabs(A[i][k])>max) max = fabs(A[i][k]);
		 if (fabs(max) <= EPSILON) gamma[k] = 0.0;
		 else {
			 /* calcula e armazena o vetor u em cima da matriz A, e calcula e armazena o gamma em vetor separado */
			 for (i=k; i<m; i++) A[i][k] /= max;
     510:	a7 01       	movw	r20, r14
     512:	96 01       	movw	r18, r12
     514:	eb 81       	ldd	r30, Y+3	; 0x03
     516:	fc 81       	ldd	r31, Y+4	; 0x04
     518:	60 81       	ld	r22, Z
     51a:	71 81       	ldd	r23, Z+1	; 0x01
     51c:	82 81       	ldd	r24, Z+2	; 0x02
     51e:	93 81       	ldd	r25, Z+3	; 0x03
     520:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <__divsf3>
     524:	eb 81       	ldd	r30, Y+3	; 0x03
     526:	fc 81       	ldd	r31, Y+4	; 0x04
     528:	60 83       	st	Z, r22
     52a:	71 83       	std	Z+1, r23	; 0x01
     52c:	82 83       	std	Z+2, r24	; 0x02
     52e:	93 83       	std	Z+3, r25	; 0x03
     530:	38 96       	adiw	r30, 0x08	; 8
     532:	fc 83       	std	Y+4, r31	; 0x04
     534:	eb 83       	std	Y+3, r30	; 0x03
     536:	e2 15       	cp	r30, r2
     538:	f3 05       	cpc	r31, r3
     53a:	51 f7       	brne	.-44     	; 0x510 <__LOCK_REGION_LENGTH__+0x110>
			 sigma[k] /= max;
     53c:	a7 01       	movw	r20, r14
     53e:	96 01       	movw	r18, r12
     540:	ed 85       	ldd	r30, Y+13	; 0x0d
     542:	fe 85       	ldd	r31, Y+14	; 0x0e
     544:	60 81       	ld	r22, Z
     546:	71 81       	ldd	r23, Z+1	; 0x01
     548:	82 81       	ldd	r24, Z+2	; 0x02
     54a:	93 81       	ldd	r25, Z+3	; 0x03
     54c:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <__divsf3>
     550:	4b 01       	movw	r8, r22
     552:	5c 01       	movw	r10, r24
     554:	ed 85       	ldd	r30, Y+13	; 0x0d
     556:	fe 85       	ldd	r31, Y+14	; 0x0e
     558:	60 83       	st	Z, r22
     55a:	71 83       	std	Z+1, r23	; 0x01
     55c:	82 83       	std	Z+2, r24	; 0x02
     55e:	93 83       	std	Z+3, r25	; 0x03
     560:	29 81       	ldd	r18, Y+1	; 0x01
     562:	3a 81       	ldd	r19, Y+2	; 0x02
     564:	3c 83       	std	Y+4, r19	; 0x04
     566:	2b 83       	std	Y+3, r18	; 0x03
			 if (A[k][k] < 0) sigma[k] = (-1)*sigma[k];
     568:	20 e0       	ldi	r18, 0x00	; 0
     56a:	30 e0       	ldi	r19, 0x00	; 0
     56c:	40 e0       	ldi	r20, 0x00	; 0
     56e:	50 e0       	ldi	r21, 0x00	; 0
     570:	e9 81       	ldd	r30, Y+1	; 0x01
     572:	fa 81       	ldd	r31, Y+2	; 0x02
     574:	60 81       	ld	r22, Z
     576:	71 81       	ldd	r23, Z+1	; 0x01
     578:	82 81       	ldd	r24, Z+2	; 0x02
     57a:	93 81       	ldd	r25, Z+3	; 0x03
     57c:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <__cmpsf2>
     580:	88 23       	and	r24, r24
     582:	54 f4       	brge	.+20     	; 0x598 <__LOCK_REGION_LENGTH__+0x198>
     584:	b7 fa       	bst	r11, 7
     586:	b0 94       	com	r11
     588:	b7 f8       	bld	r11, 7
     58a:	b0 94       	com	r11
     58c:	ed 85       	ldd	r30, Y+13	; 0x0d
     58e:	fe 85       	ldd	r31, Y+14	; 0x0e
     590:	80 82       	st	Z, r8
     592:	91 82       	std	Z+1, r9	; 0x01
     594:	a2 82       	std	Z+2, r10	; 0x02
     596:	b3 82       	std	Z+3, r11	; 0x03
			 A[k][k] += sigma[k];
     598:	ed 85       	ldd	r30, Y+13	; 0x0d
     59a:	fe 85       	ldd	r31, Y+14	; 0x0e
     59c:	20 81       	ld	r18, Z
     59e:	31 81       	ldd	r19, Z+1	; 0x01
     5a0:	42 81       	ldd	r20, Z+2	; 0x02
     5a2:	53 81       	ldd	r21, Z+3	; 0x03
     5a4:	eb 81       	ldd	r30, Y+3	; 0x03
     5a6:	fc 81       	ldd	r31, Y+4	; 0x04
     5a8:	60 81       	ld	r22, Z
     5aa:	71 81       	ldd	r23, Z+1	; 0x01
     5ac:	82 81       	ldd	r24, Z+2	; 0x02
     5ae:	93 81       	ldd	r25, Z+3	; 0x03
     5b0:	0e 94 07 0c 	call	0x180e	; 0x180e <__addsf3>
     5b4:	eb 81       	ldd	r30, Y+3	; 0x03
     5b6:	fc 81       	ldd	r31, Y+4	; 0x04
     5b8:	60 83       	st	Z, r22
     5ba:	71 83       	std	Z+1, r23	; 0x01
     5bc:	82 83       	std	Z+2, r24	; 0x02
     5be:	93 83       	std	Z+3, r25	; 0x03
     5c0:	2f 89       	ldd	r18, Y+23	; 0x17
     5c2:	38 8d       	ldd	r19, Y+24	; 0x18
     5c4:	3c 83       	std	Y+4, r19	; 0x04
     5c6:	2b 83       	std	Y+3, r18	; 0x03
			 gamma[k] = 1.0/(sigma[k]*A[k][k]);
     5c8:	ed 85       	ldd	r30, Y+13	; 0x0d
     5ca:	fe 85       	ldd	r31, Y+14	; 0x0e
     5cc:	20 81       	ld	r18, Z
     5ce:	31 81       	ldd	r19, Z+1	; 0x01
     5d0:	42 81       	ldd	r20, Z+2	; 0x02
     5d2:	53 81       	ldd	r21, Z+3	; 0x03
     5d4:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <__mulsf3>
     5d8:	9b 01       	movw	r18, r22
     5da:	ac 01       	movw	r20, r24
     5dc:	60 e0       	ldi	r22, 0x00	; 0
     5de:	70 e0       	ldi	r23, 0x00	; 0
     5e0:	80 e8       	ldi	r24, 0x80	; 128
     5e2:	9f e3       	ldi	r25, 0x3F	; 63
     5e4:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <__divsf3>
     5e8:	ef 89       	ldd	r30, Y+23	; 0x17
     5ea:	f8 8d       	ldd	r31, Y+24	; 0x18
     5ec:	60 83       	st	Z, r22
     5ee:	71 83       	std	Z+1, r23	; 0x01
     5f0:	82 83       	std	Z+2, r24	; 0x02
     5f2:	93 83       	std	Z+3, r25	; 0x03
			 sigma[k] *= max;
     5f4:	a7 01       	movw	r20, r14
     5f6:	96 01       	movw	r18, r12
     5f8:	ed 85       	ldd	r30, Y+13	; 0x0d
     5fa:	fe 85       	ldd	r31, Y+14	; 0x0e
     5fc:	60 81       	ld	r22, Z
     5fe:	71 81       	ldd	r23, Z+1	; 0x01
     600:	82 81       	ldd	r24, Z+2	; 0x02
     602:	93 81       	ldd	r25, Z+3	; 0x03
     604:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <__mulsf3>
     608:	ed 85       	ldd	r30, Y+13	; 0x0d
     60a:	fe 85       	ldd	r31, Y+14	; 0x0e
     60c:	60 83       	st	Z, r22
     60e:	71 83       	std	Z+1, r23	; 0x01
     610:	82 83       	std	Z+2, r24	; 0x02
     612:	93 83       	std	Z+3, r25	; 0x03
			 
			 /* aplica a matriz Q em todo o restante da matriz, sem calcular a matriz Q propriamente, e sim (a - gamma*u*(ut*a)), onde a são os vetores da matriz A */
			 for (j=k+1; j<n; j++) {
     614:	6d 88       	ldd	r6, Y+21	; 0x15
     616:	7e 88       	ldd	r7, Y+22	; 0x16
     618:	64 14       	cp	r6, r4
     61a:	75 04       	cpc	r7, r5
     61c:	0c f0       	brlt	.+2      	; 0x620 <__LOCK_REGION_LENGTH__+0x220>
     61e:	9e c0       	rjmp	.+316    	; 0x75c <__LOCK_REGION_LENGTH__+0x35c>
     620:	c9 80       	ldd	r12, Y+1	; 0x01
     622:	da 80       	ldd	r13, Y+2	; 0x02
     624:	f4 e0       	ldi	r31, 0x04	; 4
     626:	cf 0e       	add	r12, r31
     628:	d1 1c       	adc	r13, r1
     62a:	50 c0       	rjmp	.+160    	; 0x6cc <__LOCK_REGION_LENGTH__+0x2cc>
				 f = 0.0;
				 for (i=k; i<m; i++) f += A[i][k]*A[i][j];
     62c:	eb 85       	ldd	r30, Y+11	; 0x0b
     62e:	fc 85       	ldd	r31, Y+12	; 0x0c
     630:	20 81       	ld	r18, Z
     632:	31 81       	ldd	r19, Z+1	; 0x01
     634:	42 81       	ldd	r20, Z+2	; 0x02
     636:	53 81       	ldd	r21, Z+3	; 0x03
     638:	f8 01       	movw	r30, r16
     63a:	60 81       	ld	r22, Z
     63c:	71 81       	ldd	r23, Z+1	; 0x01
     63e:	82 81       	ldd	r24, Z+2	; 0x02
     640:	93 81       	ldd	r25, Z+3	; 0x03
     642:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <__mulsf3>
     646:	9b 01       	movw	r18, r22
     648:	ac 01       	movw	r20, r24
     64a:	6a 2d       	mov	r22, r10
     64c:	7b 2d       	mov	r23, r11
     64e:	8e 2d       	mov	r24, r14
     650:	9f 2d       	mov	r25, r15
     652:	0e 94 07 0c 	call	0x180e	; 0x180e <__addsf3>
     656:	a6 2e       	mov	r10, r22
     658:	b7 2e       	mov	r11, r23
     65a:	e8 2e       	mov	r14, r24
     65c:	f9 2e       	mov	r15, r25
     65e:	08 5f       	subi	r16, 0xF8	; 248
     660:	1f 4f       	sbci	r17, 0xFF	; 255
     662:	2b 85       	ldd	r18, Y+11	; 0x0b
     664:	3c 85       	ldd	r19, Y+12	; 0x0c
     666:	28 5f       	subi	r18, 0xF8	; 248
     668:	3f 4f       	sbci	r19, 0xFF	; 255
     66a:	3c 87       	std	Y+12, r19	; 0x0c
     66c:	2b 87       	std	Y+11, r18	; 0x0b
     66e:	02 15       	cp	r16, r2
     670:	13 05       	cpc	r17, r3
     672:	e1 f6       	brne	.-72     	; 0x62c <__LOCK_REGION_LENGTH__+0x22c>
     674:	79 c0       	rjmp	.+242    	; 0x768 <__LOCK_REGION_LENGTH__+0x368>
				 f *= gamma[k];
				 for (i=k; i<m; i++) A[i][j] -= f*A[i][k];
     676:	f8 01       	movw	r30, r16
     678:	20 81       	ld	r18, Z
     67a:	31 81       	ldd	r19, Z+1	; 0x01
     67c:	42 81       	ldd	r20, Z+2	; 0x02
     67e:	53 81       	ldd	r21, Z+3	; 0x03
     680:	c5 01       	movw	r24, r10
     682:	b4 01       	movw	r22, r8
     684:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <__mulsf3>
     688:	9b 01       	movw	r18, r22
     68a:	ac 01       	movw	r20, r24
     68c:	eb 85       	ldd	r30, Y+11	; 0x0b
     68e:	fc 85       	ldd	r31, Y+12	; 0x0c
     690:	60 81       	ld	r22, Z
     692:	71 81       	ldd	r23, Z+1	; 0x01
     694:	82 81       	ldd	r24, Z+2	; 0x02
     696:	93 81       	ldd	r25, Z+3	; 0x03
     698:	0e 94 06 0c 	call	0x180c	; 0x180c <__subsf3>
     69c:	eb 85       	ldd	r30, Y+11	; 0x0b
     69e:	fc 85       	ldd	r31, Y+12	; 0x0c
     6a0:	60 83       	st	Z, r22
     6a2:	71 83       	std	Z+1, r23	; 0x01
     6a4:	82 83       	std	Z+2, r24	; 0x02
     6a6:	93 83       	std	Z+3, r25	; 0x03
     6a8:	38 96       	adiw	r30, 0x08	; 8
     6aa:	fc 87       	std	Y+12, r31	; 0x0c
     6ac:	eb 87       	std	Y+11, r30	; 0x0b
     6ae:	08 5f       	subi	r16, 0xF8	; 248
     6b0:	1f 4f       	sbci	r17, 0xFF	; 255
     6b2:	ee 15       	cp	r30, r14
     6b4:	ff 05       	cpc	r31, r15
     6b6:	f9 f6       	brne	.-66     	; 0x676 <__LOCK_REGION_LENGTH__+0x276>
			 A[k][k] += sigma[k];
			 gamma[k] = 1.0/(sigma[k]*A[k][k]);
			 sigma[k] *= max;
			 
			 /* aplica a matriz Q em todo o restante da matriz, sem calcular a matriz Q propriamente, e sim (a - gamma*u*(ut*a)), onde a são os vetores da matriz A */
			 for (j=k+1; j<n; j++) {
     6b8:	ff ef       	ldi	r31, 0xFF	; 255
     6ba:	6f 1a       	sub	r6, r31
     6bc:	7f 0a       	sbc	r7, r31
     6be:	24 e0       	ldi	r18, 0x04	; 4
     6c0:	c2 0e       	add	r12, r18
     6c2:	d1 1c       	adc	r13, r1
     6c4:	46 14       	cp	r4, r6
     6c6:	57 04       	cpc	r5, r7
     6c8:	09 f4       	brne	.+2      	; 0x6cc <__LOCK_REGION_LENGTH__+0x2cc>
     6ca:	d1 cd       	rjmp	.-1118   	; 0x26e <QR+0x160>
			 sigma[k] = sigma[max_vetor];
			 sigma[max_vetor] = aux;
		 }
		 /* seleciona o maior elemento em módulo do vetor, para normalizá-lo */
		 for (i=k; i<m; i++) if (fabs(A[i][k])>max) max = fabs(A[i][k]);
		 if (fabs(max) <= EPSILON) gamma[k] = 0.0;
     6cc:	dc 86       	std	Y+12, r13	; 0x0c
     6ce:	cb 86       	std	Y+11, r12	; 0x0b
     6d0:	09 81       	ldd	r16, Y+1	; 0x01
     6d2:	1a 81       	ldd	r17, Y+2	; 0x02
     6d4:	af 84       	ldd	r10, Y+15	; 0x0f
     6d6:	b8 88       	ldd	r11, Y+16	; 0x10
     6d8:	e9 88       	ldd	r14, Y+17	; 0x11
     6da:	fa 88       	ldd	r15, Y+18	; 0x12
     6dc:	a7 cf       	rjmp	.-178    	; 0x62c <__LOCK_REGION_LENGTH__+0x22c>

 int QR(int m, int n, float A[][2], float *sigma, float *gamma, int *p) {
	 int i, j, k=0, l, max_vetor;
	 float max, f, max_norma, aux;
	 /* laço que calcula a norma de todos os vetores da matriz */
	 for (j=0; j<n; j++) {
     6de:	1c 86       	std	Y+12, r1	; 0x0c
     6e0:	1b 86       	std	Y+11, r1	; 0x0b
     6e2:	55 c0       	rjmp	.+170    	; 0x78e <__LOCK_REGION_LENGTH__+0x38e>
	 for (k=0; k<n; k++) {
		 max = 0.0;
		 /* se não é a primeira iteração, recalcula a norma dos vetores, com uma dimensão menor do que a iteração anterior */
		 if (k>0) for (j=k; j<n; j++) sigma[j] = sqrt(fabs(sigma[j]*sigma[j]-A[k-1][j]*A[k-1][j]));
		 /* laço que procura o vetor de maior norma da submatriz da iteração (para colocar os vetores de norma 0 à direita da matriz, se existirem) */
		 for (l=k, max_norma = sigma[l], max_vetor = l; l<n; l++) {
     6e4:	89 85       	ldd	r24, Y+9	; 0x09
     6e6:	9a 85       	ldd	r25, Y+10	; 0x0a
     6e8:	9e 87       	std	Y+14, r25	; 0x0e
     6ea:	8d 87       	std	Y+13, r24	; 0x0d
			 if (max_norma < sigma[l]) { max_norma = sigma[l]; max_vetor = l; }
		 }
		 if (max_norma <= EPSILON) return k;
     6ec:	2c ea       	ldi	r18, 0xAC	; 172
     6ee:	35 ec       	ldi	r19, 0xC5	; 197
     6f0:	47 e2       	ldi	r20, 0x27	; 39
     6f2:	57 e3       	ldi	r21, 0x37	; 55
     6f4:	fc 01       	movw	r30, r24
     6f6:	60 81       	ld	r22, Z
     6f8:	71 81       	ldd	r23, Z+1	; 0x01
     6fa:	82 81       	ldd	r24, Z+2	; 0x02
     6fc:	93 81       	ldd	r25, Z+3	; 0x03
     6fe:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <__cmpsf2>
     702:	18 16       	cp	r1, r24
     704:	0c f4       	brge	.+2      	; 0x708 <__LOCK_REGION_LENGTH__+0x308>
     706:	c8 ce       	rjmp	.-624    	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
     708:	42 c0       	rjmp	.+132    	; 0x78e <__LOCK_REGION_LENGTH__+0x38e>
	 for (k=0; k<n; k++) {
		 max = 0.0;
		 /* se não é a primeira iteração, recalcula a norma dos vetores, com uma dimensão menor do que a iteração anterior */
		 if (k>0) for (j=k; j<n; j++) sigma[j] = sqrt(fabs(sigma[j]*sigma[j]-A[k-1][j]*A[k-1][j]));
		 /* laço que procura o vetor de maior norma da submatriz da iteração (para colocar os vetores de norma 0 à direita da matriz, se existirem) */
		 for (l=k, max_norma = sigma[l], max_vetor = l; l<n; l++) {
     70a:	29 85       	ldd	r18, Y+9	; 0x09
     70c:	3a 85       	ldd	r19, Y+10	; 0x0a
     70e:	3e 87       	std	Y+14, r19	; 0x0e
     710:	2d 87       	std	Y+13, r18	; 0x0d
     712:	f9 01       	movw	r30, r18
     714:	80 80       	ld	r8, Z
     716:	91 80       	ldd	r9, Z+1	; 0x01
     718:	a2 80       	ldd	r10, Z+2	; 0x02
     71a:	b3 80       	ldd	r11, Z+3	; 0x03
     71c:	33 ce       	rjmp	.-922    	; 0x384 <QR+0x276>
			 if (max_norma < sigma[l]) { max_norma = sigma[l]; max_vetor = l; }
		 }
		 if (max_norma <= EPSILON) return k;
     71e:	2c ea       	ldi	r18, 0xAC	; 172
     720:	35 ec       	ldi	r19, 0xC5	; 197
     722:	47 e2       	ldi	r20, 0x27	; 39
     724:	57 e3       	ldi	r21, 0x37	; 55
     726:	68 2d       	mov	r22, r8
     728:	79 2d       	mov	r23, r9
     72a:	8a 2d       	mov	r24, r10
     72c:	9b 2d       	mov	r25, r11
     72e:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <__cmpsf2>
     732:	18 16       	cp	r1, r24
     734:	0c f4       	brge	.+2      	; 0x738 <__LOCK_REGION_LENGTH__+0x338>
     736:	b0 ce       	rjmp	.-672    	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
     738:	2a c0       	rjmp	.+84     	; 0x78e <__LOCK_REGION_LENGTH__+0x38e>
			 sigma[k] = sigma[max_vetor];
			 sigma[max_vetor] = aux;
		 }
		 /* seleciona o maior elemento em módulo do vetor, para normalizá-lo */
		 for (i=k; i<m; i++) if (fabs(A[i][k])>max) max = fabs(A[i][k]);
		 if (fabs(max) <= EPSILON) gamma[k] = 0.0;
     73a:	2c ea       	ldi	r18, 0xAC	; 172
     73c:	35 ec       	ldi	r19, 0xC5	; 197
     73e:	47 e2       	ldi	r20, 0x27	; 39
     740:	57 e3       	ldi	r21, 0x37	; 55
     742:	c7 01       	movw	r24, r14
     744:	b6 01       	movw	r22, r12
     746:	9f 77       	andi	r25, 0x7F	; 127
     748:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <__cmpsf2>
     74c:	18 16       	cp	r1, r24
     74e:	0c f0       	brlt	.+2      	; 0x752 <__LOCK_REGION_LENGTH__+0x352>
     750:	d0 ce       	rjmp	.-608    	; 0x4f2 <__LOCK_REGION_LENGTH__+0xf2>
     752:	29 81       	ldd	r18, Y+1	; 0x01
     754:	3a 81       	ldd	r19, Y+2	; 0x02
     756:	3c 83       	std	Y+4, r19	; 0x04
     758:	2b 83       	std	Y+3, r18	; 0x03
     75a:	da ce       	rjmp	.-588    	; 0x510 <__LOCK_REGION_LENGTH__+0x110>
		 sigma[j] = sqrt(sigma[j]);
		 gamma[j] = 0.0;
		 p[j] = j;
	 }
	 /* laço externo que itera o algoritmo decomposição QR em toda a matriz A */
	 for (k=0; k<n; k++) {
     75c:	8b 85       	ldd	r24, Y+11	; 0x0b
     75e:	9c 85       	ldd	r25, Y+12	; 0x0c
     760:	01 96       	adiw	r24, 0x01	; 1
     762:	9c 87       	std	Y+12, r25	; 0x0c
     764:	8b 87       	std	Y+11, r24	; 0x0b
     766:	13 c0       	rjmp	.+38     	; 0x78e <__LOCK_REGION_LENGTH__+0x38e>
			 
			 /* aplica a matriz Q em todo o restante da matriz, sem calcular a matriz Q propriamente, e sim (a - gamma*u*(ut*a)), onde a são os vetores da matriz A */
			 for (j=k+1; j<n; j++) {
				 f = 0.0;
				 for (i=k; i<m; i++) f += A[i][k]*A[i][j];
				 f *= gamma[k];
     768:	eb 81       	ldd	r30, Y+3	; 0x03
     76a:	fc 81       	ldd	r31, Y+4	; 0x04
     76c:	20 81       	ld	r18, Z
     76e:	31 81       	ldd	r19, Z+1	; 0x01
     770:	42 81       	ldd	r20, Z+2	; 0x02
     772:	53 81       	ldd	r21, Z+3	; 0x03
     774:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <__mulsf3>
     778:	4b 01       	movw	r8, r22
     77a:	5c 01       	movw	r10, r24
     77c:	ef 80       	ldd	r14, Y+7	; 0x07
     77e:	f8 84       	ldd	r15, Y+8	; 0x08
     780:	ec 0c       	add	r14, r12
     782:	fd 1c       	adc	r15, r13
     784:	09 81       	ldd	r16, Y+1	; 0x01
     786:	1a 81       	ldd	r17, Y+2	; 0x02
     788:	dc 86       	std	Y+12, r13	; 0x0c
     78a:	cb 86       	std	Y+11, r12	; 0x0b
     78c:	74 cf       	rjmp	.-280    	; 0x676 <__LOCK_REGION_LENGTH__+0x276>
			 }
		 }
	 }
	 /* o valor que essa função devolve é a dimensão de R11 */
	 return k;
 }
     78e:	8b 85       	ldd	r24, Y+11	; 0x0b
     790:	9c 85       	ldd	r25, Y+12	; 0x0c
     792:	a4 96       	adiw	r28, 0x24	; 36
     794:	0f b6       	in	r0, 0x3f	; 63
     796:	f8 94       	cli
     798:	de bf       	out	0x3e, r29	; 62
     79a:	0f be       	out	0x3f, r0	; 63
     79c:	cd bf       	out	0x3d, r28	; 61
     79e:	df 91       	pop	r29
     7a0:	cf 91       	pop	r28
     7a2:	1f 91       	pop	r17
     7a4:	0f 91       	pop	r16
     7a6:	ff 90       	pop	r15
     7a8:	ef 90       	pop	r14
     7aa:	df 90       	pop	r13
     7ac:	cf 90       	pop	r12
     7ae:	bf 90       	pop	r11
     7b0:	af 90       	pop	r10
     7b2:	9f 90       	pop	r9
     7b4:	8f 90       	pop	r8
     7b6:	7f 90       	pop	r7
     7b8:	6f 90       	pop	r6
     7ba:	5f 90       	pop	r5
     7bc:	4f 90       	pop	r4
     7be:	3f 90       	pop	r3
     7c0:	2f 90       	pop	r2
     7c2:	08 95       	ret

000007c4 <backrow>:

 int backrow(int n, float A[][2], float *b) {
     7c4:	2f 92       	push	r2
     7c6:	3f 92       	push	r3
     7c8:	4f 92       	push	r4
     7ca:	5f 92       	push	r5
     7cc:	6f 92       	push	r6
     7ce:	7f 92       	push	r7
     7d0:	8f 92       	push	r8
     7d2:	9f 92       	push	r9
     7d4:	af 92       	push	r10
     7d6:	bf 92       	push	r11
     7d8:	cf 92       	push	r12
     7da:	df 92       	push	r13
     7dc:	ef 92       	push	r14
     7de:	ff 92       	push	r15
     7e0:	0f 93       	push	r16
     7e2:	1f 93       	push	r17
     7e4:	cf 93       	push	r28
     7e6:	df 93       	push	r29
     7e8:	00 d0       	rcall	.+0      	; 0x7ea <backrow+0x26>
     7ea:	00 d0       	rcall	.+0      	; 0x7ec <backrow+0x28>
     7ec:	cd b7       	in	r28, 0x3d	; 61
     7ee:	de b7       	in	r29, 0x3e	; 62
	 int i, j;
	 for (i= n-1; i>=0; i--) {
     7f0:	2c 01       	movw	r4, r24
     7f2:	21 e0       	ldi	r18, 0x01	; 1
     7f4:	42 1a       	sub	r4, r18
     7f6:	51 08       	sbc	r5, r1
     7f8:	0a f4       	brpl	.+2      	; 0x7fc <backrow+0x38>
     7fa:	7e c0       	rjmp	.+252    	; 0x8f8 <backrow+0x134>
     7fc:	1a 01       	movw	r2, r20
     7fe:	3b 01       	movw	r6, r22
     800:	9c 01       	movw	r18, r24
     802:	22 0f       	add	r18, r18
     804:	33 1f       	adc	r19, r19
     806:	22 0f       	add	r18, r18
     808:	33 1f       	adc	r19, r19
     80a:	42 0f       	add	r20, r18
     80c:	53 1f       	adc	r21, r19
     80e:	5a 83       	std	Y+2, r21	; 0x02
     810:	49 83       	std	Y+1, r20	; 0x01
     812:	7c 01       	movw	r14, r24
     814:	ee 0c       	add	r14, r14
     816:	ff 1c       	adc	r15, r15
     818:	e8 0e       	add	r14, r24
     81a:	f9 1e       	adc	r15, r25
     81c:	ee 0c       	add	r14, r14
     81e:	ff 1c       	adc	r15, r15
     820:	ee 0c       	add	r14, r14
     822:	ff 1c       	adc	r15, r15
     824:	5c e0       	ldi	r21, 0x0C	; 12
     826:	e5 1a       	sub	r14, r21
     828:	f1 08       	sbc	r15, r1
     82a:	e6 0e       	add	r14, r22
     82c:	f7 1e       	adc	r15, r23
     82e:	9c 01       	movw	r18, r24
     830:	22 50       	subi	r18, 0x02	; 2
     832:	31 09       	sbc	r19, r1
     834:	22 0f       	add	r18, r18
     836:	33 1f       	adc	r19, r19
     838:	81 50       	subi	r24, 0x01	; 1
     83a:	90 4c       	sbci	r25, 0xC0	; 192
     83c:	82 0f       	add	r24, r18
     83e:	93 1f       	adc	r25, r19
     840:	88 0f       	add	r24, r24
     842:	99 1f       	adc	r25, r25
     844:	88 0f       	add	r24, r24
     846:	99 1f       	adc	r25, r25
     848:	04 96       	adiw	r24, 0x04	; 4
     84a:	68 0e       	add	r6, r24
     84c:	79 1e       	adc	r7, r25
     84e:	89 81       	ldd	r24, Y+1	; 0x01
     850:	9a 81       	ldd	r25, Y+2	; 0x02
     852:	9c 83       	std	Y+4, r25	; 0x04
     854:	8b 83       	std	Y+3, r24	; 0x03
     856:	42 01       	movw	r8, r4
     858:	2d c0       	rjmp	.+90     	; 0x8b4 <backrow+0xf0>
		 for (j=n-1; j>i; j--) {
     85a:	09 81       	ldd	r16, Y+1	; 0x01
     85c:	1a 81       	ldd	r17, Y+2	; 0x02
     85e:	53 01       	movw	r10, r6
     860:	94 e0       	ldi	r25, 0x04	; 4
     862:	c9 1a       	sub	r12, r25
     864:	d1 08       	sbc	r13, r1
			 b[i] -= A[i][j]*b[j];
     866:	f8 01       	movw	r30, r16
     868:	52 91       	ld	r21, -Z
     86a:	42 91       	ld	r20, -Z
     86c:	32 91       	ld	r19, -Z
     86e:	22 91       	ld	r18, -Z
     870:	8f 01       	movw	r16, r30
     872:	f5 01       	movw	r30, r10
     874:	92 91       	ld	r25, -Z
     876:	82 91       	ld	r24, -Z
     878:	72 91       	ld	r23, -Z
     87a:	62 91       	ld	r22, -Z
     87c:	5f 01       	movw	r10, r30
     87e:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <__mulsf3>
     882:	9b 01       	movw	r18, r22
     884:	ac 01       	movw	r20, r24
     886:	f6 01       	movw	r30, r12
     888:	60 81       	ld	r22, Z
     88a:	71 81       	ldd	r23, Z+1	; 0x01
     88c:	82 81       	ldd	r24, Z+2	; 0x02
     88e:	93 81       	ldd	r25, Z+3	; 0x03
     890:	0e 94 06 0c 	call	0x180c	; 0x180c <__subsf3>
     894:	f6 01       	movw	r30, r12
     896:	60 83       	st	Z, r22
     898:	71 83       	std	Z+1, r23	; 0x01
     89a:	82 83       	std	Z+2, r24	; 0x02
     89c:	93 83       	std	Z+3, r25	; 0x03
 }

 int backrow(int n, float A[][2], float *b) {
	 int i, j;
	 for (i= n-1; i>=0; i--) {
		 for (j=n-1; j>i; j--) {
     89e:	4b 81       	ldd	r20, Y+3	; 0x03
     8a0:	5c 81       	ldd	r21, Y+4	; 0x04
     8a2:	04 17       	cp	r16, r20
     8a4:	15 07       	cpc	r17, r21
     8a6:	f9 f6       	brne	.-66     	; 0x866 <backrow+0xa2>
     8a8:	5c e0       	ldi	r21, 0x0C	; 12
     8aa:	e5 1a       	sub	r14, r21
     8ac:	f1 08       	sbc	r15, r1
     8ae:	88 e0       	ldi	r24, 0x08	; 8
     8b0:	68 1a       	sub	r6, r24
     8b2:	71 08       	sbc	r7, r1
     8b4:	eb 81       	ldd	r30, Y+3	; 0x03
     8b6:	fc 81       	ldd	r31, Y+4	; 0x04
     8b8:	34 97       	sbiw	r30, 0x04	; 4
     8ba:	fc 83       	std	Y+4, r31	; 0x04
     8bc:	eb 83       	std	Y+3, r30	; 0x03
     8be:	6f 01       	movw	r12, r30
			 b[i] -= A[i][j]*b[j];
		 }
		 b[i] /= A[i][i];
     8c0:	f7 01       	movw	r30, r14
     8c2:	20 81       	ld	r18, Z
     8c4:	31 81       	ldd	r19, Z+1	; 0x01
     8c6:	42 81       	ldd	r20, Z+2	; 0x02
     8c8:	53 81       	ldd	r21, Z+3	; 0x03
     8ca:	f6 01       	movw	r30, r12
     8cc:	60 81       	ld	r22, Z
     8ce:	71 81       	ldd	r23, Z+1	; 0x01
     8d0:	82 81       	ldd	r24, Z+2	; 0x02
     8d2:	93 81       	ldd	r25, Z+3	; 0x03
     8d4:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <__divsf3>
     8d8:	f6 01       	movw	r30, r12
     8da:	60 83       	st	Z, r22
     8dc:	71 83       	std	Z+1, r23	; 0x01
     8de:	82 83       	std	Z+2, r24	; 0x02
     8e0:	93 83       	std	Z+3, r25	; 0x03
	 return k;
 }

 int backrow(int n, float A[][2], float *b) {
	 int i, j;
	 for (i= n-1; i>=0; i--) {
     8e2:	f1 e0       	ldi	r31, 0x01	; 1
     8e4:	8f 1a       	sub	r8, r31
     8e6:	91 08       	sbc	r9, r1
     8e8:	c2 14       	cp	r12, r2
     8ea:	d3 04       	cpc	r13, r3
     8ec:	29 f0       	breq	.+10     	; 0x8f8 <backrow+0x134>
		 for (j=n-1; j>i; j--) {
     8ee:	84 14       	cp	r8, r4
     8f0:	95 04       	cpc	r9, r5
     8f2:	0c f4       	brge	.+2      	; 0x8f6 <backrow+0x132>
     8f4:	b2 cf       	rjmp	.-156    	; 0x85a <backrow+0x96>
     8f6:	d8 cf       	rjmp	.-80     	; 0x8a8 <backrow+0xe4>
			 b[i] -= A[i][j]*b[j];
		 }
		 b[i] /= A[i][i];
	 }
	 return 0;
 }
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	0f 90       	pop	r0
     8fe:	0f 90       	pop	r0
     900:	0f 90       	pop	r0
     902:	0f 90       	pop	r0
     904:	df 91       	pop	r29
     906:	cf 91       	pop	r28
     908:	1f 91       	pop	r17
     90a:	0f 91       	pop	r16
     90c:	ff 90       	pop	r15
     90e:	ef 90       	pop	r14
     910:	df 90       	pop	r13
     912:	cf 90       	pop	r12
     914:	bf 90       	pop	r11
     916:	af 90       	pop	r10
     918:	9f 90       	pop	r9
     91a:	8f 90       	pop	r8
     91c:	7f 90       	pop	r7
     91e:	6f 90       	pop	r6
     920:	5f 90       	pop	r5
     922:	4f 90       	pop	r4
     924:	3f 90       	pop	r3
     926:	2f 90       	pop	r2
     928:	08 95       	ret

0000092a <permutation>:

 int permutation(int n, float *v, int *p, int inverse) { /* permuta os elementos do vetor de acordo com o vetor de permutação p */
     92a:	cf 92       	push	r12
     92c:	df 92       	push	r13
     92e:	ef 92       	push	r14
     930:	ff 92       	push	r15
     932:	0f 93       	push	r16
     934:	1f 93       	push	r17
     936:	cf 93       	push	r28
     938:	df 93       	push	r29
	 int i;
	 float aux;
	 if (!inverse) {
     93a:	23 2b       	or	r18, r19
     93c:	31 f5       	brne	.+76     	; 0x98a <permutation+0x60>
		 for (i=0; i<n; i++) {
     93e:	18 16       	cp	r1, r24
     940:	19 06       	cpc	r1, r25
     942:	0c f0       	brlt	.+2      	; 0x946 <permutation+0x1c>
     944:	4f c0       	rjmp	.+158    	; 0x9e4 <permutation+0xba>
     946:	da 01       	movw	r26, r20
     948:	eb 01       	movw	r28, r22
     94a:	88 0f       	add	r24, r24
     94c:	99 1f       	adc	r25, r25
     94e:	48 0f       	add	r20, r24
     950:	59 1f       	adc	r21, r25
			 aux = v[p[i]];
     952:	ed 91       	ld	r30, X+
     954:	fd 91       	ld	r31, X+
     956:	ee 0f       	add	r30, r30
     958:	ff 1f       	adc	r31, r31
     95a:	ee 0f       	add	r30, r30
     95c:	ff 1f       	adc	r31, r31
     95e:	e6 0f       	add	r30, r22
     960:	f7 1f       	adc	r31, r23
     962:	00 81       	ld	r16, Z
     964:	11 81       	ldd	r17, Z+1	; 0x01
     966:	22 81       	ldd	r18, Z+2	; 0x02
     968:	33 81       	ldd	r19, Z+3	; 0x03
			 v[p[i]] = v[i];
     96a:	c8 80       	ld	r12, Y
     96c:	d9 80       	ldd	r13, Y+1	; 0x01
     96e:	ea 80       	ldd	r14, Y+2	; 0x02
     970:	fb 80       	ldd	r15, Y+3	; 0x03
     972:	c0 82       	st	Z, r12
     974:	d1 82       	std	Z+1, r13	; 0x01
     976:	e2 82       	std	Z+2, r14	; 0x02
     978:	f3 82       	std	Z+3, r15	; 0x03
			 v[i] = aux;
     97a:	09 93       	st	Y+, r16
     97c:	19 93       	st	Y+, r17
     97e:	29 93       	st	Y+, r18
     980:	39 93       	st	Y+, r19

 int permutation(int n, float *v, int *p, int inverse) { /* permuta os elementos do vetor de acordo com o vetor de permutação p */
	 int i;
	 float aux;
	 if (!inverse) {
		 for (i=0; i<n; i++) {
     982:	a4 17       	cp	r26, r20
     984:	b5 07       	cpc	r27, r21
     986:	29 f7       	brne	.-54     	; 0x952 <permutation+0x28>
     988:	2d c0       	rjmp	.+90     	; 0x9e4 <permutation+0xba>
			 aux = v[p[i]];
			 v[p[i]] = v[i];
			 v[i] = aux;
		 }
		 } else {
		 for (i = n-1; i>=0; i--) {
     98a:	9c 01       	movw	r18, r24
     98c:	21 50       	subi	r18, 0x01	; 1
     98e:	31 09       	sbc	r19, r1
     990:	4a f1       	brmi	.+82     	; 0x9e4 <permutation+0xba>
     992:	ec 01       	movw	r28, r24
     994:	cc 0f       	add	r28, r28
     996:	dd 1f       	adc	r29, r29
     998:	c4 0f       	add	r28, r20
     99a:	d5 1f       	adc	r29, r21
     99c:	88 0f       	add	r24, r24
     99e:	99 1f       	adc	r25, r25
     9a0:	88 0f       	add	r24, r24
     9a2:	99 1f       	adc	r25, r25
     9a4:	db 01       	movw	r26, r22
     9a6:	a8 0f       	add	r26, r24
     9a8:	b9 1f       	adc	r27, r25
     9aa:	cb 01       	movw	r24, r22
			 aux = v[p[i]];
     9ac:	fa 91       	ld	r31, -Y
     9ae:	ea 91       	ld	r30, -Y
     9b0:	ee 0f       	add	r30, r30
     9b2:	ff 1f       	adc	r31, r31
     9b4:	ee 0f       	add	r30, r30
     9b6:	ff 1f       	adc	r31, r31
     9b8:	e6 0f       	add	r30, r22
     9ba:	f7 1f       	adc	r31, r23
     9bc:	00 81       	ld	r16, Z
     9be:	11 81       	ldd	r17, Z+1	; 0x01
     9c0:	22 81       	ldd	r18, Z+2	; 0x02
     9c2:	33 81       	ldd	r19, Z+3	; 0x03
			 v[p[i]] = v[i];
     9c4:	fe 90       	ld	r15, -X
     9c6:	ee 90       	ld	r14, -X
     9c8:	de 90       	ld	r13, -X
     9ca:	ce 90       	ld	r12, -X
     9cc:	c0 82       	st	Z, r12
     9ce:	d1 82       	std	Z+1, r13	; 0x01
     9d0:	e2 82       	std	Z+2, r14	; 0x02
     9d2:	f3 82       	std	Z+3, r15	; 0x03
			 v[i] = aux;
     9d4:	0d 93       	st	X+, r16
     9d6:	1d 93       	st	X+, r17
     9d8:	2d 93       	st	X+, r18
     9da:	3c 93       	st	X, r19
     9dc:	13 97       	sbiw	r26, 0x03	; 3
			 aux = v[p[i]];
			 v[p[i]] = v[i];
			 v[i] = aux;
		 }
		 } else {
		 for (i = n-1; i>=0; i--) {
     9de:	a8 17       	cp	r26, r24
     9e0:	b9 07       	cpc	r27, r25
     9e2:	21 f7       	brne	.-56     	; 0x9ac <permutation+0x82>
			 v[p[i]] = v[i];
			 v[i] = aux;
		 }
	 }
	 return 0;
 }
     9e4:	80 e0       	ldi	r24, 0x00	; 0
     9e6:	90 e0       	ldi	r25, 0x00	; 0
     9e8:	df 91       	pop	r29
     9ea:	cf 91       	pop	r28
     9ec:	1f 91       	pop	r17
     9ee:	0f 91       	pop	r16
     9f0:	ff 90       	pop	r15
     9f2:	ef 90       	pop	r14
     9f4:	df 90       	pop	r13
     9f6:	cf 90       	pop	r12
     9f8:	08 95       	ret

000009fa <solveLeastSquare>:

 int solveLeastSquare(int m, int n, float A[][2], float *b, float *sigma, float *gamma, int *p, int r) {
     9fa:	2f 92       	push	r2
     9fc:	3f 92       	push	r3
     9fe:	4f 92       	push	r4
     a00:	5f 92       	push	r5
     a02:	6f 92       	push	r6
     a04:	7f 92       	push	r7
     a06:	8f 92       	push	r8
     a08:	9f 92       	push	r9
     a0a:	af 92       	push	r10
     a0c:	bf 92       	push	r11
     a0e:	cf 92       	push	r12
     a10:	df 92       	push	r13
     a12:	ef 92       	push	r14
     a14:	ff 92       	push	r15
     a16:	0f 93       	push	r16
     a18:	1f 93       	push	r17
     a1a:	cf 93       	push	r28
     a1c:	df 93       	push	r29
     a1e:	cd b7       	in	r28, 0x3d	; 61
     a20:	de b7       	in	r29, 0x3e	; 62
     a22:	60 97       	sbiw	r28, 0x10	; 16
     a24:	0f b6       	in	r0, 0x3f	; 63
     a26:	f8 94       	cli
     a28:	de bf       	out	0x3e, r29	; 62
     a2a:	0f be       	out	0x3f, r0	; 63
     a2c:	cd bf       	out	0x3d, r28	; 61
     a2e:	9c 83       	std	Y+4, r25	; 0x04
     a30:	8b 83       	std	Y+3, r24	; 0x03
     a32:	4f 83       	std	Y+7, r20	; 0x07
     a34:	58 87       	std	Y+8, r21	; 0x08
     a36:	3e 83       	std	Y+6, r19	; 0x06
     a38:	2d 83       	std	Y+5, r18	; 0x05
     a3a:	1c 87       	std	Y+12, r17	; 0x0c
     a3c:	0b 87       	std	Y+11, r16	; 0x0b
     a3e:	de 86       	std	Y+14, r13	; 0x0e
     a40:	cd 86       	std	Y+13, r12	; 0x0d
     a42:	ba 82       	std	Y+2, r11	; 0x02
     a44:	a9 82       	std	Y+1, r10	; 0x01
	 int i, j;
	 float f, aux;
	 /* aplica a matriz Q no vetor b, sem calcular a matriz Q propriamente, e sim (b - gamma*u*(ut*b)) */
	 for (j=0; j<r; j++) {
     a46:	1a 14       	cp	r1, r10
     a48:	1b 04       	cpc	r1, r11
     a4a:	0c f0       	brlt	.+2      	; 0xa4e <solveLeastSquare+0x54>
     a4c:	99 c0       	rjmp	.+306    	; 0xb80 <solveLeastSquare+0x186>
     a4e:	49 87       	std	Y+9, r20	; 0x09
     a50:	5a 87       	std	Y+10, r21	; 0x0a
     a52:	6d 80       	ldd	r6, Y+5	; 0x05
     a54:	7e 80       	ldd	r7, Y+6	; 0x06
     a56:	2e 2c       	mov	r2, r14
     a58:	3f 2c       	mov	r3, r15
     a5a:	7c 01       	movw	r14, r24
     a5c:	ee 0c       	add	r14, r14
     a5e:	ff 1c       	adc	r15, r15
     a60:	ee 0c       	add	r14, r14
     a62:	ff 1c       	adc	r15, r15
     a64:	e6 0c       	add	r14, r6
     a66:	f7 1c       	adc	r15, r7
     a68:	44 2e       	mov	r4, r20
     a6a:	55 2e       	mov	r5, r21
     a6c:	81 2c       	mov	r8, r1
     a6e:	91 2c       	mov	r9, r1
     a70:	5c c0       	rjmp	.+184    	; 0xb2a <solveLeastSquare+0x130>
		 f = 0.0;
		 for (i=j; i<m; i++) f += A[i][j]*b[i];
     a72:	53 01       	movw	r10, r6
     a74:	58 8a       	std	Y+16, r5	; 0x10
     a76:	4f 86       	std	Y+15, r4	; 0x0f
     a78:	c1 2c       	mov	r12, r1
     a7a:	d1 2c       	mov	r13, r1
     a7c:	00 e0       	ldi	r16, 0x00	; 0
     a7e:	10 e0       	ldi	r17, 0x00	; 0
     a80:	d5 01       	movw	r26, r10
     a82:	6d 91       	ld	r22, X+
     a84:	7d 91       	ld	r23, X+
     a86:	8d 91       	ld	r24, X+
     a88:	9d 91       	ld	r25, X+
     a8a:	5d 01       	movw	r10, r26
     a8c:	ef 85       	ldd	r30, Y+15	; 0x0f
     a8e:	f8 89       	ldd	r31, Y+16	; 0x10
     a90:	20 81       	ld	r18, Z
     a92:	31 81       	ldd	r19, Z+1	; 0x01
     a94:	42 81       	ldd	r20, Z+2	; 0x02
     a96:	53 81       	ldd	r21, Z+3	; 0x03
     a98:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <__mulsf3>
     a9c:	9b 01       	movw	r18, r22
     a9e:	ac 01       	movw	r20, r24
     aa0:	6c 2d       	mov	r22, r12
     aa2:	7d 2d       	mov	r23, r13
     aa4:	80 2f       	mov	r24, r16
     aa6:	91 2f       	mov	r25, r17
     aa8:	0e 94 07 0c 	call	0x180e	; 0x180e <__addsf3>
     aac:	c6 2e       	mov	r12, r22
     aae:	d7 2e       	mov	r13, r23
     ab0:	08 2f       	mov	r16, r24
     ab2:	19 2f       	mov	r17, r25
     ab4:	2f 85       	ldd	r18, Y+15	; 0x0f
     ab6:	38 89       	ldd	r19, Y+16	; 0x10
     ab8:	28 5f       	subi	r18, 0xF8	; 248
     aba:	3f 4f       	sbci	r19, 0xFF	; 255
     abc:	38 8b       	std	Y+16, r19	; 0x10
     abe:	2f 87       	std	Y+15, r18	; 0x0f
     ac0:	ae 14       	cp	r10, r14
     ac2:	bf 04       	cpc	r11, r15
     ac4:	e9 f6       	brne	.-70     	; 0xa80 <solveLeastSquare+0x86>
     ac6:	85 c0       	rjmp	.+266    	; 0xbd2 <solveLeastSquare+0x1d8>
		 f *= gamma[j];
		 for (i=j; i<m; i++) b[i] -= f*A[i][j];
     ac8:	d8 01       	movw	r26, r16
     aca:	2d 91       	ld	r18, X+
     acc:	3d 91       	ld	r19, X+
     ace:	4d 91       	ld	r20, X+
     ad0:	5c 91       	ld	r21, X
     ad2:	c6 01       	movw	r24, r12
     ad4:	b5 01       	movw	r22, r10
     ad6:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <__mulsf3>
     ada:	9b 01       	movw	r18, r22
     adc:	ac 01       	movw	r20, r24
     ade:	ef 85       	ldd	r30, Y+15	; 0x0f
     ae0:	f8 89       	ldd	r31, Y+16	; 0x10
     ae2:	60 81       	ld	r22, Z
     ae4:	71 81       	ldd	r23, Z+1	; 0x01
     ae6:	82 81       	ldd	r24, Z+2	; 0x02
     ae8:	93 81       	ldd	r25, Z+3	; 0x03
     aea:	0e 94 06 0c 	call	0x180c	; 0x180c <__subsf3>
     aee:	af 85       	ldd	r26, Y+15	; 0x0f
     af0:	b8 89       	ldd	r27, Y+16	; 0x10
     af2:	6d 93       	st	X+, r22
     af4:	7d 93       	st	X+, r23
     af6:	8d 93       	st	X+, r24
     af8:	9d 93       	st	X+, r25
     afa:	b8 8b       	std	Y+16, r27	; 0x10
     afc:	af 87       	std	Y+15, r26	; 0x0f
     afe:	08 5f       	subi	r16, 0xF8	; 248
     b00:	1f 4f       	sbci	r17, 0xFF	; 255
     b02:	ae 15       	cp	r26, r14
     b04:	bf 05       	cpc	r27, r15
     b06:	01 f7       	brne	.-64     	; 0xac8 <solveLeastSquare+0xce>

 int solveLeastSquare(int m, int n, float A[][2], float *b, float *sigma, float *gamma, int *p, int r) {
	 int i, j;
	 float f, aux;
	 /* aplica a matriz Q no vetor b, sem calcular a matriz Q propriamente, e sim (b - gamma*u*(ut*b)) */
	 for (j=0; j<r; j++) {
     b08:	bf ef       	ldi	r27, 0xFF	; 255
     b0a:	8b 1a       	sub	r8, r27
     b0c:	9b 0a       	sbc	r9, r27
     b0e:	ec e0       	ldi	r30, 0x0C	; 12
     b10:	4e 0e       	add	r4, r30
     b12:	51 1c       	adc	r5, r1
     b14:	f4 e0       	ldi	r31, 0x04	; 4
     b16:	6f 0e       	add	r6, r31
     b18:	71 1c       	adc	r7, r1
     b1a:	24 e0       	ldi	r18, 0x04	; 4
     b1c:	22 0e       	add	r2, r18
     b1e:	31 1c       	adc	r3, r1
     b20:	89 81       	ldd	r24, Y+1	; 0x01
     b22:	9a 81       	ldd	r25, Y+2	; 0x02
     b24:	88 15       	cp	r24, r8
     b26:	99 05       	cpc	r25, r9
     b28:	39 f0       	breq	.+14     	; 0xb38 <solveLeastSquare+0x13e>
		 f = 0.0;
		 for (i=j; i<m; i++) f += A[i][j]*b[i];
     b2a:	ab 81       	ldd	r26, Y+3	; 0x03
     b2c:	bc 81       	ldd	r27, Y+4	; 0x04
     b2e:	8a 16       	cp	r8, r26
     b30:	9b 06       	cpc	r9, r27
     b32:	0c f4       	brge	.+2      	; 0xb36 <solveLeastSquare+0x13c>
     b34:	9e cf       	rjmp	.-196    	; 0xa72 <solveLeastSquare+0x78>
     b36:	e8 cf       	rjmp	.-48     	; 0xb08 <solveLeastSquare+0x10e>
     b38:	eb 85       	ldd	r30, Y+11	; 0x0b
     b3a:	fc 85       	ldd	r31, Y+12	; 0x0c
     b3c:	89 81       	ldd	r24, Y+1	; 0x01
     b3e:	9a 81       	ldd	r25, Y+2	; 0x02
     b40:	88 0f       	add	r24, r24
     b42:	99 1f       	adc	r25, r25
     b44:	88 0f       	add	r24, r24
     b46:	99 1f       	adc	r25, r25
     b48:	8e 0f       	add	r24, r30
     b4a:	9f 1f       	adc	r25, r31
     b4c:	a9 85       	ldd	r26, Y+9	; 0x09
     b4e:	ba 85       	ldd	r27, Y+10	; 0x0a
		 f *= gamma[j];
		 for (i=j; i<m; i++) b[i] -= f*A[i][j];
	 }
	 /* coloca os (-sigma) na diogonal da matriz (reconstruindo a R) */
	 for (i=0; i<r; i++) {
		 aux = (-1) * sigma[i];
     b50:	40 81       	ld	r20, Z
     b52:	51 81       	ldd	r21, Z+1	; 0x01
     b54:	62 81       	ldd	r22, Z+2	; 0x02
     b56:	73 81       	ldd	r23, Z+3	; 0x03
     b58:	70 58       	subi	r23, 0x80	; 128
		 sigma[i] = A[i][i];
     b5a:	0d 91       	ld	r16, X+
     b5c:	1d 91       	ld	r17, X+
     b5e:	2d 91       	ld	r18, X+
     b60:	3c 91       	ld	r19, X
     b62:	13 97       	sbiw	r26, 0x03	; 3
     b64:	01 93       	st	Z+, r16
     b66:	11 93       	st	Z+, r17
     b68:	21 93       	st	Z+, r18
     b6a:	31 93       	st	Z+, r19
		 A[i][i] = aux;
     b6c:	4d 93       	st	X+, r20
     b6e:	5d 93       	st	X+, r21
     b70:	6d 93       	st	X+, r22
     b72:	7c 93       	st	X, r23
     b74:	13 97       	sbiw	r26, 0x03	; 3
     b76:	1c 96       	adiw	r26, 0x0c	; 12
		 for (i=j; i<m; i++) f += A[i][j]*b[i];
		 f *= gamma[j];
		 for (i=j; i<m; i++) b[i] -= f*A[i][j];
	 }
	 /* coloca os (-sigma) na diogonal da matriz (reconstruindo a R) */
	 for (i=0; i<r; i++) {
     b78:	e8 17       	cp	r30, r24
     b7a:	f9 07       	cpc	r31, r25
     b7c:	49 f7       	brne	.-46     	; 0xb50 <solveLeastSquare+0x156>
     b7e:	36 c0       	rjmp	.+108    	; 0xbec <solveLeastSquare+0x1f2>
		 aux = (-1) * sigma[i];
		 sigma[i] = A[i][i];
		 A[i][i] = aux;
	 }
	 /* se a matriz a for de posto-imcompleto, temos que minimizar || c - R11x1 - R12x2 ||, nesta implementação, suponho que x2 = 0, e resolvo o sistema c - R11x = 0 */
	 backrow(r, A, b);
     b80:	4d 81       	ldd	r20, Y+5	; 0x05
     b82:	5e 81       	ldd	r21, Y+6	; 0x06
     b84:	6f 81       	ldd	r22, Y+7	; 0x07
     b86:	78 85       	ldd	r23, Y+8	; 0x08
     b88:	89 81       	ldd	r24, Y+1	; 0x01
     b8a:	9a 81       	ldd	r25, Y+2	; 0x02
     b8c:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <backrow>
     b90:	3f c0       	rjmp	.+126    	; 0xc10 <solveLeastSquare+0x216>
	 /* laço que recoloca os (sigma) no vetor de sigma, e coloca os elemtos de u no lugar novamente */
	 for (i=0; i<r; i++) {
		 aux = sigma[i];
     b92:	db 01       	movw	r26, r22
     b94:	cd 90       	ld	r12, X+
     b96:	dd 90       	ld	r13, X+
     b98:	ed 90       	ld	r14, X+
     b9a:	fc 90       	ld	r15, X
		 sigma[i] = (-1) * A[i][i];
     b9c:	80 81       	ld	r24, Z
     b9e:	91 81       	ldd	r25, Z+1	; 0x01
     ba0:	a2 81       	ldd	r26, Z+2	; 0x02
     ba2:	b3 81       	ldd	r27, Z+3	; 0x03
     ba4:	4c 01       	movw	r8, r24
     ba6:	5d 01       	movw	r10, r26
     ba8:	b7 fa       	bst	r11, 7
     baa:	b0 94       	com	r11
     bac:	b7 f8       	bld	r11, 7
     bae:	b0 94       	com	r11
     bb0:	db 01       	movw	r26, r22
     bb2:	8d 92       	st	X+, r8
     bb4:	9d 92       	st	X+, r9
     bb6:	ad 92       	st	X+, r10
     bb8:	bd 92       	st	X+, r11
     bba:	bd 01       	movw	r22, r26
		 A[i][i] = aux;
     bbc:	c0 82       	st	Z, r12
     bbe:	d1 82       	std	Z+1, r13	; 0x01
     bc0:	e2 82       	std	Z+2, r14	; 0x02
     bc2:	f3 82       	std	Z+3, r15	; 0x03
		 A[i][i] = aux;
	 }
	 /* se a matriz a for de posto-imcompleto, temos que minimizar || c - R11x1 - R12x2 ||, nesta implementação, suponho que x2 = 0, e resolvo o sistema c - R11x = 0 */
	 backrow(r, A, b);
	 /* laço que recoloca os (sigma) no vetor de sigma, e coloca os elemtos de u no lugar novamente */
	 for (i=0; i<r; i++) {
     bc4:	2f 5f       	subi	r18, 0xFF	; 255
     bc6:	3f 4f       	sbci	r19, 0xFF	; 255
     bc8:	3c 96       	adiw	r30, 0x0c	; 12
     bca:	24 17       	cp	r18, r20
     bcc:	35 07       	cpc	r19, r21
     bce:	0c f3       	brlt	.-62     	; 0xb92 <solveLeastSquare+0x198>
     bd0:	1f c0       	rjmp	.+62     	; 0xc10 <solveLeastSquare+0x216>
	 float f, aux;
	 /* aplica a matriz Q no vetor b, sem calcular a matriz Q propriamente, e sim (b - gamma*u*(ut*b)) */
	 for (j=0; j<r; j++) {
		 f = 0.0;
		 for (i=j; i<m; i++) f += A[i][j]*b[i];
		 f *= gamma[j];
     bd2:	f1 01       	movw	r30, r2
     bd4:	20 81       	ld	r18, Z
     bd6:	31 81       	ldd	r19, Z+1	; 0x01
     bd8:	42 81       	ldd	r20, Z+2	; 0x02
     bda:	53 81       	ldd	r21, Z+3	; 0x03
     bdc:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <__mulsf3>
     be0:	5b 01       	movw	r10, r22
     be2:	6c 01       	movw	r12, r24
     be4:	78 8a       	std	Y+16, r7	; 0x10
     be6:	6f 86       	std	Y+15, r6	; 0x0f
     be8:	82 01       	movw	r16, r4
     bea:	6e cf       	rjmp	.-292    	; 0xac8 <solveLeastSquare+0xce>
		 aux = (-1) * sigma[i];
		 sigma[i] = A[i][i];
		 A[i][i] = aux;
	 }
	 /* se a matriz a for de posto-imcompleto, temos que minimizar || c - R11x1 - R12x2 ||, nesta implementação, suponho que x2 = 0, e resolvo o sistema c - R11x = 0 */
	 backrow(r, A, b);
     bec:	4d 81       	ldd	r20, Y+5	; 0x05
     bee:	5e 81       	ldd	r21, Y+6	; 0x06
     bf0:	6f 81       	ldd	r22, Y+7	; 0x07
     bf2:	78 85       	ldd	r23, Y+8	; 0x08
     bf4:	89 81       	ldd	r24, Y+1	; 0x01
     bf6:	9a 81       	ldd	r25, Y+2	; 0x02
     bf8:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <backrow>
     bfc:	ef 81       	ldd	r30, Y+7	; 0x07
     bfe:	f8 85       	ldd	r31, Y+8	; 0x08
     c00:	8b 85       	ldd	r24, Y+11	; 0x0b
     c02:	9c 85       	ldd	r25, Y+12	; 0x0c
     c04:	20 e0       	ldi	r18, 0x00	; 0
     c06:	30 e0       	ldi	r19, 0x00	; 0
     c08:	bc 01       	movw	r22, r24
     c0a:	49 81       	ldd	r20, Y+1	; 0x01
     c0c:	5a 81       	ldd	r21, Y+2	; 0x02
     c0e:	c1 cf       	rjmp	.-126    	; 0xb92 <solveLeastSquare+0x198>
		 aux = sigma[i];
		 sigma[i] = (-1) * A[i][i];
		 A[i][i] = aux;
	 }
	 /* permuta o vetor da solução de mínimos quadrados */
	 permutation(r, b, p, 1);
     c10:	21 e0       	ldi	r18, 0x01	; 1
     c12:	30 e0       	ldi	r19, 0x00	; 0
     c14:	4d 85       	ldd	r20, Y+13	; 0x0d
     c16:	5e 85       	ldd	r21, Y+14	; 0x0e
     c18:	6d 81       	ldd	r22, Y+5	; 0x05
     c1a:	7e 81       	ldd	r23, Y+6	; 0x06
     c1c:	89 81       	ldd	r24, Y+1	; 0x01
     c1e:	9a 81       	ldd	r25, Y+2	; 0x02
     c20:	0e 94 95 04 	call	0x92a	; 0x92a <permutation>
	 return 0;
 }
     c24:	80 e0       	ldi	r24, 0x00	; 0
     c26:	90 e0       	ldi	r25, 0x00	; 0
     c28:	60 96       	adiw	r28, 0x10	; 16
     c2a:	0f b6       	in	r0, 0x3f	; 63
     c2c:	f8 94       	cli
     c2e:	de bf       	out	0x3e, r29	; 62
     c30:	0f be       	out	0x3f, r0	; 63
     c32:	cd bf       	out	0x3d, r28	; 61
     c34:	df 91       	pop	r29
     c36:	cf 91       	pop	r28
     c38:	1f 91       	pop	r17
     c3a:	0f 91       	pop	r16
     c3c:	ff 90       	pop	r15
     c3e:	ef 90       	pop	r14
     c40:	df 90       	pop	r13
     c42:	cf 90       	pop	r12
     c44:	bf 90       	pop	r11
     c46:	af 90       	pop	r10
     c48:	9f 90       	pop	r9
     c4a:	8f 90       	pop	r8
     c4c:	7f 90       	pop	r7
     c4e:	6f 90       	pop	r6
     c50:	5f 90       	pop	r5
     c52:	4f 90       	pop	r4
     c54:	3f 90       	pop	r3
     c56:	2f 90       	pop	r2
     c58:	08 95       	ret

00000c5a <main>:
#include <util/delay.h>
#include <time.h>

int main(void)
{
	initializeSystem();
     c5a:	0e 94 3e 09 	call	0x127c	; 0x127c <initializeSystem>
	while (1)
	{
		processBLEMessages();
     c5e:	0e 94 ca 07 	call	0xf94	; 0xf94 <processBLEMessages>
		if (sendADValue) {
     c62:	80 91 35 02 	lds	r24, 0x0235	; 0x800235 <sendADValue>
     c66:	81 11       	cpse	r24, r1
			bleSendADValue();
     c68:	0e 94 07 08 	call	0x100e	; 0x100e <bleSendADValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c6c:	2f ef       	ldi	r18, 0xFF	; 255
     c6e:	8f e5       	ldi	r24, 0x5F	; 95
     c70:	93 e0       	ldi	r25, 0x03	; 3
     c72:	21 50       	subi	r18, 0x01	; 1
     c74:	80 40       	sbci	r24, 0x00	; 0
     c76:	90 40       	sbci	r25, 0x00	; 0
     c78:	e1 f7       	brne	.-8      	; 0xc72 <main+0x18>
     c7a:	00 c0       	rjmp	.+0      	; 0xc7c <main+0x22>
     c7c:	00 00       	nop
     c7e:	ef cf       	rjmp	.-34     	; 0xc5e <main+0x4>

00000c80 <loadDisplayUnitType>:
 unsigned char loadDisplayTensionUnit() {
	 displayTensionUnit = eeprom_read_byte((uint8_t*)EEPROM_ADR_DISPLAY_TENSION_UNIT);
	 if (displayTensionUnit >= TENSION_UNITS_LEN)
	 displayTensionUnit = 0;
	 return displayTensionUnit;
 }
     c80:	80 e0       	ldi	r24, 0x00	; 0
     c82:	90 e0       	ldi	r25, 0x00	; 0
     c84:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <eeprom_read_byte>
     c88:	82 30       	cpi	r24, 0x02	; 2
     c8a:	18 f4       	brcc	.+6      	; 0xc92 <loadDisplayUnitType+0x12>
     c8c:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <displayUnitType>
     c90:	02 c0       	rjmp	.+4      	; 0xc96 <loadDisplayUnitType+0x16>
     c92:	10 92 34 02 	sts	0x0234, r1	; 0x800234 <displayUnitType>
     c96:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <displayUnitType>
     c9a:	08 95       	ret

00000c9c <loadDisplayForceUnit>:
     c9c:	81 e0       	ldi	r24, 0x01	; 1
     c9e:	90 e0       	ldi	r25, 0x00	; 0
     ca0:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <eeprom_read_byte>
     ca4:	88 30       	cpi	r24, 0x08	; 8
     ca6:	18 f4       	brcc	.+6      	; 0xcae <loadDisplayForceUnit+0x12>
     ca8:	80 93 33 02 	sts	0x0233, r24	; 0x800233 <displayForceUnit>
     cac:	02 c0       	rjmp	.+4      	; 0xcb2 <loadDisplayForceUnit+0x16>
     cae:	10 92 33 02 	sts	0x0233, r1	; 0x800233 <displayForceUnit>
     cb2:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <displayForceUnit>
     cb6:	08 95       	ret

00000cb8 <loadSample>:

 unsigned char loadSample() {
	 sample = eeprom_read_byte((uint8_t*)EEPROM_ADR_SAMPLE);
     cb8:	85 e5       	ldi	r24, 0x55	; 85
     cba:	90 e0       	ldi	r25, 0x00	; 0
     cbc:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <eeprom_read_byte>
	 if (sample >= MAX_SAMPLE)
     cc0:	86 30       	cpi	r24, 0x06	; 6
     cc2:	18 f4       	brcc	.+6      	; 0xcca <loadSample+0x12>
	 displayTensionUnit = 0;
	 return displayTensionUnit;
 }

 unsigned char loadSample() {
	 sample = eeprom_read_byte((uint8_t*)EEPROM_ADR_SAMPLE);
     cc4:	80 93 30 02 	sts	0x0230, r24	; 0x800230 <sample>
     cc8:	02 c0       	rjmp	.+4      	; 0xcce <loadSample+0x16>
	 if (sample >= MAX_SAMPLE)
	 sample = 0;
     cca:	10 92 30 02 	sts	0x0230, r1	; 0x800230 <sample>
	 return sample;
 }
     cce:	80 91 30 02 	lds	r24, 0x0230	; 0x800230 <sample>
     cd2:	08 95       	ret

00000cd4 <loadSampleValues>:

 void loadSampleValues() {
     cd4:	cf 92       	push	r12
     cd6:	df 92       	push	r13
     cd8:	ef 92       	push	r14
     cda:	ff 92       	push	r15
     cdc:	0f 93       	push	r16
     cde:	1f 93       	push	r17
     ce0:	cf 93       	push	r28
     ce2:	df 93       	push	r29
     ce4:	04 e2       	ldi	r16, 0x24	; 36
     ce6:	12 e0       	ldi	r17, 0x02	; 2
     ce8:	c6 e5       	ldi	r28, 0x56	; 86
     cea:	d0 e0       	ldi	r29, 0x00	; 0
	 unsigned char i;
	 for (i=0; i<3; i++) {
		sampleValues[i] = eeprom_read_float((float*)(EEPROM_ADR_SAMPLE_VALUE1+(i*sizeof(float))));
		if (isnan(sampleValues[i]))
			sampleValues[i] = 1.0;
     cec:	0f 2e       	mov	r0, r31
     cee:	c1 2c       	mov	r12, r1
     cf0:	d1 2c       	mov	r13, r1
     cf2:	f0 e8       	ldi	r31, 0x80	; 128
     cf4:	ef 2e       	mov	r14, r31
     cf6:	ff e3       	ldi	r31, 0x3F	; 63
     cf8:	ff 2e       	mov	r15, r31
     cfa:	f0 2d       	mov	r31, r0
 }

 void loadSampleValues() {
	 unsigned char i;
	 for (i=0; i<3; i++) {
		sampleValues[i] = eeprom_read_float((float*)(EEPROM_ADR_SAMPLE_VALUE1+(i*sizeof(float))));
     cfc:	ce 01       	movw	r24, r28
     cfe:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <eeprom_read_dword>
     d02:	f8 01       	movw	r30, r16
     d04:	60 83       	st	Z, r22
     d06:	71 83       	std	Z+1, r23	; 0x01
     d08:	82 83       	std	Z+2, r24	; 0x02
     d0a:	93 83       	std	Z+3, r25	; 0x03
		if (isnan(sampleValues[i]))
     d0c:	9b 01       	movw	r18, r22
     d0e:	ac 01       	movw	r20, r24
     d10:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <__unordsf2>
     d14:	88 23       	and	r24, r24
     d16:	29 f0       	breq	.+10     	; 0xd22 <loadSampleValues+0x4e>
			sampleValues[i] = 1.0;
     d18:	f8 01       	movw	r30, r16
     d1a:	c0 82       	st	Z, r12
     d1c:	d1 82       	std	Z+1, r13	; 0x01
     d1e:	e2 82       	std	Z+2, r14	; 0x02
     d20:	f3 82       	std	Z+3, r15	; 0x03
     d22:	24 96       	adiw	r28, 0x04	; 4
     d24:	0c 5f       	subi	r16, 0xFC	; 252
     d26:	1f 4f       	sbci	r17, 0xFF	; 255
	 return sample;
 }

 void loadSampleValues() {
	 unsigned char i;
	 for (i=0; i<3; i++) {
     d28:	c2 36       	cpi	r28, 0x62	; 98
     d2a:	d1 05       	cpc	r29, r1
     d2c:	39 f7       	brne	.-50     	; 0xcfc <loadSampleValues+0x28>
		sampleValues[i] = eeprom_read_float((float*)(EEPROM_ADR_SAMPLE_VALUE1+(i*sizeof(float))));
		if (isnan(sampleValues[i]))
			sampleValues[i] = 1.0;
	 }
	 sampleArea = eeprom_read_float((float*)(EEPROM_ADR_SAMPLE_AREA));
     d2e:	82 e6       	ldi	r24, 0x62	; 98
     d30:	90 e0       	ldi	r25, 0x00	; 0
     d32:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <eeprom_read_dword>
     d36:	6b 01       	movw	r12, r22
     d38:	7c 01       	movw	r14, r24
	 if (isnan(sampleArea) || sampleArea < EPSILON)
     d3a:	9b 01       	movw	r18, r22
     d3c:	ac 01       	movw	r20, r24
     d3e:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <__unordsf2>
     d42:	81 11       	cpse	r24, r1
     d44:	13 c0       	rjmp	.+38     	; 0xd6c <loadSampleValues+0x98>
     d46:	2c ea       	ldi	r18, 0xAC	; 172
     d48:	35 ec       	ldi	r19, 0xC5	; 197
     d4a:	47 e2       	ldi	r20, 0x27	; 39
     d4c:	57 e3       	ldi	r21, 0x37	; 55
     d4e:	c7 01       	movw	r24, r14
     d50:	b6 01       	movw	r22, r12
     d52:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <__cmpsf2>
     d56:	88 23       	and	r24, r24
     d58:	4c f0       	brlt	.+18     	; 0xd6c <loadSampleValues+0x98>
	 for (i=0; i<3; i++) {
		sampleValues[i] = eeprom_read_float((float*)(EEPROM_ADR_SAMPLE_VALUE1+(i*sizeof(float))));
		if (isnan(sampleValues[i]))
			sampleValues[i] = 1.0;
	 }
	 sampleArea = eeprom_read_float((float*)(EEPROM_ADR_SAMPLE_AREA));
     d5a:	c0 92 09 01 	sts	0x0109, r12	; 0x800109 <sampleArea>
     d5e:	d0 92 0a 01 	sts	0x010A, r13	; 0x80010a <sampleArea+0x1>
     d62:	e0 92 0b 01 	sts	0x010B, r14	; 0x80010b <sampleArea+0x2>
     d66:	f0 92 0c 01 	sts	0x010C, r15	; 0x80010c <sampleArea+0x3>
     d6a:	0c c0       	rjmp	.+24     	; 0xd84 <loadSampleValues+0xb0>
	 if (isnan(sampleArea) || sampleArea < EPSILON)
		sampleArea = 1.0;
     d6c:	80 e0       	ldi	r24, 0x00	; 0
     d6e:	90 e0       	ldi	r25, 0x00	; 0
     d70:	a0 e8       	ldi	r26, 0x80	; 128
     d72:	bf e3       	ldi	r27, 0x3F	; 63
     d74:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <sampleArea>
     d78:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <sampleArea+0x1>
     d7c:	a0 93 0b 01 	sts	0x010B, r26	; 0x80010b <sampleArea+0x2>
     d80:	b0 93 0c 01 	sts	0x010C, r27	; 0x80010c <sampleArea+0x3>
 }
     d84:	df 91       	pop	r29
     d86:	cf 91       	pop	r28
     d88:	1f 91       	pop	r17
     d8a:	0f 91       	pop	r16
     d8c:	ff 90       	pop	r15
     d8e:	ef 90       	pop	r14
     d90:	df 90       	pop	r13
     d92:	cf 90       	pop	r12
     d94:	08 95       	ret

00000d96 <loadMachineCapacity>:

 void loadMachineCapacity() {
	 machineCapacity = eeprom_read_float((float*)(EEPROM_ADR_MACHINE_CAPACITY));
     d96:	86 e6       	ldi	r24, 0x66	; 102
     d98:	90 e0       	ldi	r25, 0x00	; 0
     d9a:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <eeprom_read_dword>
     d9e:	60 93 05 01 	sts	0x0105, r22	; 0x800105 <machineCapacity>
     da2:	70 93 06 01 	sts	0x0106, r23	; 0x800106 <machineCapacity+0x1>
     da6:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <machineCapacity+0x2>
     daa:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <machineCapacity+0x3>
	 if (isnan(machineCapacity))
     dae:	9b 01       	movw	r18, r22
     db0:	ac 01       	movw	r20, r24
     db2:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <__unordsf2>
     db6:	88 23       	and	r24, r24
     db8:	61 f0       	breq	.+24     	; 0xdd2 <loadMachineCapacity+0x3c>
	 machineCapacity = 1000.0;
     dba:	80 e0       	ldi	r24, 0x00	; 0
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	aa e7       	ldi	r26, 0x7A	; 122
     dc0:	b4 e4       	ldi	r27, 0x44	; 68
     dc2:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <machineCapacity>
     dc6:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <machineCapacity+0x1>
     dca:	a0 93 07 01 	sts	0x0107, r26	; 0x800107 <machineCapacity+0x2>
     dce:	b0 93 08 01 	sts	0x0108, r27	; 0x800108 <machineCapacity+0x3>
	 calculateOverflowThresholdForce();
     dd2:	0e 94 15 09 	call	0x122a	; 0x122a <calculateOverflowThresholdForce>
     dd6:	08 95       	ret

00000dd8 <loadOverflowProtectionDetails>:
 }

 void loadOverflowProtectionDetails() {
	 overflowProtectionMode = eeprom_read_byte((uint8_t*)EEPROM_ADR_OVERFLOW_PROTECTION_MODE);
     dd8:	8a e6       	ldi	r24, 0x6A	; 106
     dda:	90 e0       	ldi	r25, 0x00	; 0
     ddc:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <eeprom_read_byte>
	 if (overflowProtectionMode >= 2)
     de0:	82 30       	cpi	r24, 0x02	; 2
     de2:	18 f4       	brcc	.+6      	; 0xdea <loadOverflowProtectionDetails+0x12>
	 machineCapacity = 1000.0;
	 calculateOverflowThresholdForce();
 }

 void loadOverflowProtectionDetails() {
	 overflowProtectionMode = eeprom_read_byte((uint8_t*)EEPROM_ADR_OVERFLOW_PROTECTION_MODE);
     de4:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <overflowProtectionMode>
     de8:	02 c0       	rjmp	.+4      	; 0xdee <loadOverflowProtectionDetails+0x16>
	 if (overflowProtectionMode >= 2)
	 overflowProtectionMode = 0;
     dea:	10 92 23 02 	sts	0x0223, r1	; 0x800223 <overflowProtectionMode>

	 overflowProtectionThreshold = eeprom_read_byte((uint8_t*)EEPROM_ADR_OVERFLOW_PROTECTION_THRESHOLD);
     dee:	8b e6       	ldi	r24, 0x6B	; 107
     df0:	90 e0       	ldi	r25, 0x00	; 0
     df2:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <eeprom_read_byte>
	 if (overflowProtectionThreshold > 100)
     df6:	85 36       	cpi	r24, 0x65	; 101
     df8:	18 f4       	brcc	.+6      	; 0xe00 <loadOverflowProtectionDetails+0x28>
 void loadOverflowProtectionDetails() {
	 overflowProtectionMode = eeprom_read_byte((uint8_t*)EEPROM_ADR_OVERFLOW_PROTECTION_MODE);
	 if (overflowProtectionMode >= 2)
	 overflowProtectionMode = 0;

	 overflowProtectionThreshold = eeprom_read_byte((uint8_t*)EEPROM_ADR_OVERFLOW_PROTECTION_THRESHOLD);
     dfa:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <overflowProtectionThreshold>
     dfe:	03 c0       	rjmp	.+6      	; 0xe06 <loadOverflowProtectionDetails+0x2e>
	 if (overflowProtectionThreshold > 100)
	 overflowProtectionThreshold = 80U;
     e00:	80 e5       	ldi	r24, 0x50	; 80
     e02:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <overflowProtectionThreshold>
	 calculateOverflowThresholdForce();
     e06:	0e 94 15 09 	call	0x122a	; 0x122a <calculateOverflowThresholdForce>

	 overflowProtectionEnabled = eeprom_read_byte((uint8_t*)EEPROM_ADR_OVERFLOW_PROTECTION_ENABLED);
     e0a:	8c e6       	ldi	r24, 0x6C	; 108
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <eeprom_read_byte>
	 if (overflowProtectionEnabled > 1)
     e12:	82 30       	cpi	r24, 0x02	; 2
     e14:	18 f4       	brcc	.+6      	; 0xe1c <loadOverflowProtectionDetails+0x44>
	 overflowProtectionThreshold = eeprom_read_byte((uint8_t*)EEPROM_ADR_OVERFLOW_PROTECTION_THRESHOLD);
	 if (overflowProtectionThreshold > 100)
	 overflowProtectionThreshold = 80U;
	 calculateOverflowThresholdForce();

	 overflowProtectionEnabled = eeprom_read_byte((uint8_t*)EEPROM_ADR_OVERFLOW_PROTECTION_ENABLED);
     e16:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <overflowProtectionEnabled>
     e1a:	08 95       	ret
	 if (overflowProtectionEnabled > 1)
	 overflowProtectionEnabled = 0U;
     e1c:	10 92 22 02 	sts	0x0222, r1	; 0x800222 <overflowProtectionEnabled>
     e20:	08 95       	ret

00000e22 <loadNumCalibratedPoints>:
 }

 unsigned char loadNumCalibratedPoints() {
	 calibratedPoints = eeprom_read_byte((uint8_t*)EEPROM_ADR_CAL_POINTS);
     e22:	83 e0       	ldi	r24, 0x03	; 3
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <eeprom_read_byte>
	 if (calibratedPoints > 10)
     e2a:	8b 30       	cpi	r24, 0x0B	; 11
     e2c:	18 f4       	brcc	.+6      	; 0xe34 <loadNumCalibratedPoints+0x12>
	 if (overflowProtectionEnabled > 1)
	 overflowProtectionEnabled = 0U;
 }

 unsigned char loadNumCalibratedPoints() {
	 calibratedPoints = eeprom_read_byte((uint8_t*)EEPROM_ADR_CAL_POINTS);
     e2e:	80 93 32 02 	sts	0x0232, r24	; 0x800232 <calibratedPoints>
     e32:	02 c0       	rjmp	.+4      	; 0xe38 <loadNumCalibratedPoints+0x16>
	 if (calibratedPoints > 10)
	 calibratedPoints = 0;
     e34:	10 92 32 02 	sts	0x0232, r1	; 0x800232 <calibratedPoints>
	 return calibratedPoints;
 }
     e38:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <calibratedPoints>
     e3c:	08 95       	ret

00000e3e <loadCalibrationUnit>:

 unsigned char loadCalibrationUnit() {
	 calibrationUnit = eeprom_read_byte((uint8_t*)EEPROM_ADR_CAL_UNIT);
     e3e:	84 e5       	ldi	r24, 0x54	; 84
     e40:	90 e0       	ldi	r25, 0x00	; 0
     e42:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <eeprom_read_byte>
	 if (calibrationUnit >= FORCE_UNITS_LEN)
     e46:	88 30       	cpi	r24, 0x08	; 8
     e48:	18 f4       	brcc	.+6      	; 0xe50 <loadCalibrationUnit+0x12>
	 calibratedPoints = 0;
	 return calibratedPoints;
 }

 unsigned char loadCalibrationUnit() {
	 calibrationUnit = eeprom_read_byte((uint8_t*)EEPROM_ADR_CAL_UNIT);
     e4a:	80 93 31 02 	sts	0x0231, r24	; 0x800231 <calibrationUnit>
     e4e:	02 c0       	rjmp	.+4      	; 0xe54 <loadCalibrationUnit+0x16>
	 if (calibrationUnit >= FORCE_UNITS_LEN)
	 calibrationUnit = 0;
     e50:	10 92 31 02 	sts	0x0231, r1	; 0x800231 <calibrationUnit>
	 return calibrationUnit;
 }
     e54:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <calibrationUnit>
     e58:	08 95       	ret

00000e5a <loadCalibrationPoint>:

 void loadCalibrationPoint(unsigned char index) {
     e5a:	cf 92       	push	r12
     e5c:	df 92       	push	r13
     e5e:	ef 92       	push	r14
     e60:	ff 92       	push	r15
     e62:	cf 93       	push	r28
     e64:	df 93       	push	r29
	 unsigned long adRawValue = eeprom_read_dword((uint32_t*)(EEPROM_ADR_CAL_POINTS_VECTOR+(index*8)));
     e66:	98 e0       	ldi	r25, 0x08	; 8
     e68:	89 9f       	mul	r24, r25
     e6a:	e0 01       	movw	r28, r0
     e6c:	11 24       	eor	r1, r1
     e6e:	ce 01       	movw	r24, r28
     e70:	04 96       	adiw	r24, 0x04	; 4
     e72:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <eeprom_read_dword>
     e76:	6b 01       	movw	r12, r22
     e78:	7c 01       	movw	r14, r24
	 float calibrationValue = eeprom_read_float((float*)(EEPROM_ADR_CAL_POINTS_VECTOR+(index*8)+4));
     e7a:	ce 01       	movw	r24, r28
     e7c:	08 96       	adiw	r24, 0x08	; 8
     e7e:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <eeprom_read_dword>
	 CalibrationPoint p;
	 p.rawValue = adRawValue;
	 p.value = calibrationValue;
	 calibrationPoints[index] = p;
     e82:	cd 59       	subi	r28, 0x9D	; 157
     e84:	dd 4f       	sbci	r29, 0xFD	; 253
     e86:	c8 82       	st	Y, r12
     e88:	d9 82       	std	Y+1, r13	; 0x01
     e8a:	ea 82       	std	Y+2, r14	; 0x02
     e8c:	fb 82       	std	Y+3, r15	; 0x03
     e8e:	6c 83       	std	Y+4, r22	; 0x04
     e90:	7d 83       	std	Y+5, r23	; 0x05
     e92:	8e 83       	std	Y+6, r24	; 0x06
     e94:	9f 83       	std	Y+7, r25	; 0x07
 }
     e96:	df 91       	pop	r29
     e98:	cf 91       	pop	r28
     e9a:	ff 90       	pop	r15
     e9c:	ef 90       	pop	r14
     e9e:	df 90       	pop	r13
     ea0:	cf 90       	pop	r12
     ea2:	08 95       	ret

00000ea4 <displaySetValue>:
	//serialBufferReadAll(_nextionResponse);
	//return _nextionResponse[0];
	return 0;
}

unsigned char displaySetValue(const unsigned char *valueName, const unsigned char *text) {
     ea4:	cf 93       	push	r28
     ea6:	df 93       	push	r29
     ea8:	eb 01       	movw	r28, r22
	//disableGlobalInterrupt();
	//serialClearInputBuffer();
	serialPrint(valueName);
     eaa:	0e 94 ae 09 	call	0x135c	; 0x135c <serialPrint>
	serialPrint(VAL);
     eae:	85 e1       	ldi	r24, 0x15	; 21
     eb0:	91 e0       	ldi	r25, 0x01	; 1
     eb2:	0e 94 ae 09 	call	0x135c	; 0x135c <serialPrint>
	serialPrint(text);
     eb6:	ce 01       	movw	r24, r28
     eb8:	0e 94 ae 09 	call	0x135c	; 0x135c <serialPrint>
	serialPrint(END);
     ebc:	8b e1       	ldi	r24, 0x1B	; 27
     ebe:	91 e0       	ldi	r25, 0x01	; 1
     ec0:	0e 94 ae 09 	call	0x135c	; 0x135c <serialPrint>
     ec4:	8f ef       	ldi	r24, 0xFF	; 255
     ec6:	9b e6       	ldi	r25, 0x6B	; 107
     ec8:	01 97       	sbiw	r24, 0x01	; 1
     eca:	f1 f7       	brne	.-4      	; 0xec8 <displaySetValue+0x24>
     ecc:	00 c0       	rjmp	.+0      	; 0xece <displaySetValue+0x2a>
     ece:	00 00       	nop
	//enableGlobalInterrupt();
	_delay_ms(RESPONSE_WAIT_TIME);
	//serialBufferReadAll(_nextionResponse);
	//return _nextionResponse[0];
	return 0;
}
     ed0:	80 e0       	ldi	r24, 0x00	; 0
     ed2:	df 91       	pop	r29
     ed4:	cf 91       	pop	r28
     ed6:	08 95       	ret

00000ed8 <displaySetValueUInt>:

unsigned char displaySetValueUInt(const unsigned char *valueName, const unsigned char val) {	
     ed8:	0f 93       	push	r16
     eda:	1f 93       	push	r17
     edc:	cf 93       	push	r28
     ede:	df 93       	push	r29
     ee0:	cd b7       	in	r28, 0x3d	; 61
     ee2:	de b7       	in	r29, 0x3e	; 62
     ee4:	60 97       	sbiw	r28, 0x10	; 16
     ee6:	0f b6       	in	r0, 0x3f	; 63
     ee8:	f8 94       	cli
     eea:	de bf       	out	0x3e, r29	; 62
     eec:	0f be       	out	0x3f, r0	; 63
     eee:	cd bf       	out	0x3d, r28	; 61
     ef0:	8c 01       	movw	r16, r24
     ef2:	86 2f       	mov	r24, r22
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__utoa_ncheck (unsigned int, char *, unsigned char);
	return __utoa_ncheck (__val, __s, __radix);
     ef4:	4a e0       	ldi	r20, 0x0A	; 10
     ef6:	be 01       	movw	r22, r28
     ef8:	6f 5f       	subi	r22, 0xFF	; 255
     efa:	7f 4f       	sbci	r23, 0xFF	; 255
     efc:	90 e0       	ldi	r25, 0x00	; 0
     efe:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <__utoa_ncheck>
	unsigned char conversionBuffer[16];
	utoa(val, conversionBuffer, 10);
	return displaySetValue(valueName, conversionBuffer);
     f02:	be 01       	movw	r22, r28
     f04:	6f 5f       	subi	r22, 0xFF	; 255
     f06:	7f 4f       	sbci	r23, 0xFF	; 255
     f08:	c8 01       	movw	r24, r16
     f0a:	0e 94 52 07 	call	0xea4	; 0xea4 <displaySetValue>
}
     f0e:	60 96       	adiw	r28, 0x10	; 16
     f10:	0f b6       	in	r0, 0x3f	; 63
     f12:	f8 94       	cli
     f14:	de bf       	out	0x3e, r29	; 62
     f16:	0f be       	out	0x3f, r0	; 63
     f18:	cd bf       	out	0x3d, r28	; 61
     f1a:	df 91       	pop	r29
     f1c:	cf 91       	pop	r28
     f1e:	1f 91       	pop	r17
     f20:	0f 91       	pop	r16
     f22:	08 95       	ret

00000f24 <__vector_14>:

void afterSetSampleValue() {
	sampleArea = calculateSampleArea(sample, sampleValues[0], sampleValues[1], sampleValues[2]);
	storeSampleValues();
	updateSamplePage();
}
     f24:	1f 92       	push	r1
     f26:	0f 92       	push	r0
     f28:	0f b6       	in	r0, 0x3f	; 63
     f2a:	0f 92       	push	r0
     f2c:	11 24       	eor	r1, r1
     f2e:	8f 93       	push	r24
     f30:	9f 93       	push	r25
     f32:	af 93       	push	r26
     f34:	bf 93       	push	r27
     f36:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <__data_end>
     f3a:	90 91 1f 02 	lds	r25, 0x021F	; 0x80021f <__data_end+0x1>
     f3e:	a0 91 20 02 	lds	r26, 0x0220	; 0x800220 <__data_end+0x2>
     f42:	b0 91 21 02 	lds	r27, 0x0221	; 0x800221 <__data_end+0x3>
     f46:	01 96       	adiw	r24, 0x01	; 1
     f48:	a1 1d       	adc	r26, r1
     f4a:	b1 1d       	adc	r27, r1
     f4c:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <__data_end>
     f50:	90 93 1f 02 	sts	0x021F, r25	; 0x80021f <__data_end+0x1>
     f54:	a0 93 20 02 	sts	0x0220, r26	; 0x800220 <__data_end+0x2>
     f58:	b0 93 21 02 	sts	0x0221, r27	; 0x800221 <__data_end+0x3>
     f5c:	bf 91       	pop	r27
     f5e:	af 91       	pop	r26
     f60:	9f 91       	pop	r25
     f62:	8f 91       	pop	r24
     f64:	0f 90       	pop	r0
     f66:	0f be       	out	0x3f, r0	; 63
     f68:	0f 90       	pop	r0
     f6a:	1f 90       	pop	r1
     f6c:	18 95       	reti

00000f6e <enableGlobalInterrupt>:
     f6e:	8f b7       	in	r24, 0x3f	; 63
     f70:	80 68       	ori	r24, 0x80	; 128
     f72:	8f bf       	out	0x3f, r24	; 63
     f74:	08 95       	ret

00000f76 <initiliazeTimerTicker>:
     f76:	82 e0       	ldi	r24, 0x02	; 2
     f78:	84 bd       	out	0x24, r24	; 36
     f7a:	15 bc       	out	0x25, r1	; 37
     f7c:	16 bc       	out	0x26, r1	; 38
     f7e:	9c e6       	ldi	r25, 0x6C	; 108
     f80:	97 bd       	out	0x27, r25	; 39
     f82:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
     f86:	0e 94 b7 07 	call	0xf6e	; 0xf6e <enableGlobalInterrupt>
     f8a:	08 95       	ret

00000f8c <startTimerTicker>:
     f8c:	85 b5       	in	r24, 0x25	; 37
     f8e:	85 60       	ori	r24, 0x05	; 5
     f90:	85 bd       	out	0x25, r24	; 37
     f92:	08 95       	ret

00000f94 <processBLEMessages>:
     f94:	ff 92       	push	r15
     f96:	0f 93       	push	r16
     f98:	1f 93       	push	r17
     f9a:	cf 93       	push	r28
     f9c:	df 93       	push	r29
     f9e:	cd b7       	in	r28, 0x3d	; 61
     fa0:	de b7       	in	r29, 0x3e	; 62
     fa2:	a4 97       	sbiw	r28, 0x24	; 36
     fa4:	0f b6       	in	r0, 0x3f	; 63
     fa6:	f8 94       	cli
     fa8:	de bf       	out	0x3e, r29	; 62
     faa:	0f be       	out	0x3f, r0	; 63
     fac:	cd bf       	out	0x3d, r28	; 61
     fae:	8e 01       	movw	r16, r28
     fb0:	0f 5f       	subi	r16, 0xFF	; 255
     fb2:	1f 4f       	sbci	r17, 0xFF	; 255
     fb4:	ff 24       	eor	r15, r15
     fb6:	f3 94       	inc	r15
     fb8:	19 c0       	rjmp	.+50     	; 0xfec <processBLEMessages+0x58>
     fba:	b8 01       	movw	r22, r16
     fbc:	8b e3       	ldi	r24, 0x3B	; 59
     fbe:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <bleBufferReadUntil>
     fc2:	6f e1       	ldi	r22, 0x1F	; 31
     fc4:	71 e0       	ldi	r23, 0x01	; 1
     fc6:	c8 01       	movw	r24, r16
     fc8:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <strstr>
     fcc:	08 17       	cp	r16, r24
     fce:	19 07       	cpc	r17, r25
     fd0:	19 f4       	brne	.+6      	; 0xfd8 <processBLEMessages+0x44>
     fd2:	f0 92 35 02 	sts	0x0235, r15	; 0x800235 <sendADValue>
     fd6:	0a c0       	rjmp	.+20     	; 0xfec <processBLEMessages+0x58>
     fd8:	65 e2       	ldi	r22, 0x25	; 37
     fda:	71 e0       	ldi	r23, 0x01	; 1
     fdc:	c8 01       	movw	r24, r16
     fde:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <strstr>
     fe2:	08 17       	cp	r16, r24
     fe4:	19 07       	cpc	r17, r25
     fe6:	11 f4       	brne	.+4      	; 0xfec <processBLEMessages+0x58>
     fe8:	10 92 35 02 	sts	0x0235, r1	; 0x800235 <sendADValue>
     fec:	8b e3       	ldi	r24, 0x3B	; 59
     fee:	0e 94 93 0b 	call	0x1726	; 0x1726 <serialBleFind>
     ff2:	01 96       	adiw	r24, 0x01	; 1
     ff4:	11 f7       	brne	.-60     	; 0xfba <processBLEMessages+0x26>
     ff6:	a4 96       	adiw	r28, 0x24	; 36
     ff8:	0f b6       	in	r0, 0x3f	; 63
     ffa:	f8 94       	cli
     ffc:	de bf       	out	0x3e, r29	; 62
     ffe:	0f be       	out	0x3f, r0	; 63
    1000:	cd bf       	out	0x3d, r28	; 61
    1002:	df 91       	pop	r29
    1004:	cf 91       	pop	r28
    1006:	1f 91       	pop	r17
    1008:	0f 91       	pop	r16
    100a:	ff 90       	pop	r15
    100c:	08 95       	ret

0000100e <bleSendADValue>:
    100e:	cf 92       	push	r12
    1010:	df 92       	push	r13
    1012:	ef 92       	push	r14
    1014:	ff 92       	push	r15
    1016:	0e 94 5e 00 	call	0xbc	; 0xbc <adcFetchData>
    101a:	6b 01       	movw	r12, r22
    101c:	7c 01       	movw	r14, r24
    101e:	8a e2       	ldi	r24, 0x2A	; 42
    1020:	91 e0       	ldi	r25, 0x01	; 1
    1022:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <bleSerialPrint>
    1026:	c7 01       	movw	r24, r14
    1028:	b6 01       	movw	r22, r12
    102a:	0e 94 01 0b 	call	0x1602	; 0x1602 <bleSerialPrintLong>
    102e:	81 e3       	ldi	r24, 0x31	; 49
    1030:	91 e0       	ldi	r25, 0x01	; 1
    1032:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <bleSerialPrint>
    1036:	ff 90       	pop	r15
    1038:	ef 90       	pop	r14
    103a:	df 90       	pop	r13
    103c:	cf 90       	pop	r12
    103e:	08 95       	ret

00001040 <fitStraighLine>:
    1040:	4f 92       	push	r4
    1042:	5f 92       	push	r5
    1044:	6f 92       	push	r6
    1046:	7f 92       	push	r7
    1048:	9f 92       	push	r9
    104a:	af 92       	push	r10
    104c:	bf 92       	push	r11
    104e:	cf 92       	push	r12
    1050:	df 92       	push	r13
    1052:	ef 92       	push	r14
    1054:	ff 92       	push	r15
    1056:	0f 93       	push	r16
    1058:	1f 93       	push	r17
    105a:	cf 93       	push	r28
    105c:	df 93       	push	r29
    105e:	cd b7       	in	r28, 0x3d	; 61
    1060:	de b7       	in	r29, 0x3e	; 62
    1062:	cc 5d       	subi	r28, 0xDC	; 220
    1064:	d1 09       	sbc	r29, r1
    1066:	0f b6       	in	r0, 0x3f	; 63
    1068:	f8 94       	cli
    106a:	de bf       	out	0x3e, r29	; 62
    106c:	0f be       	out	0x3f, r0	; 63
    106e:	cd bf       	out	0x3d, r28	; 61
    1070:	90 90 32 02 	lds	r9, 0x0232	; 0x800232 <calibratedPoints>
    1074:	21 e0       	ldi	r18, 0x01	; 1
    1076:	29 15       	cp	r18, r9
    1078:	08 f0       	brcs	.+2      	; 0x107c <fitStraighLine+0x3c>
    107a:	8a c0       	rjmp	.+276    	; 0x1190 <fitStraighLine+0x150>
    107c:	99 20       	and	r9, r9
    107e:	09 f4       	brne	.+2      	; 0x1082 <fitStraighLine+0x42>
    1080:	48 c0       	rjmp	.+144    	; 0x1112 <fitStraighLine+0xd2>
    1082:	8e 01       	movw	r16, r28
    1084:	0f 5f       	subi	r16, 0xFF	; 255
    1086:	1f 4f       	sbci	r17, 0xFF	; 255
    1088:	0f 2e       	mov	r0, r31
    108a:	f3 e6       	ldi	r31, 0x63	; 99
    108c:	ef 2e       	mov	r14, r31
    108e:	f2 e0       	ldi	r31, 0x02	; 2
    1090:	ff 2e       	mov	r15, r31
    1092:	f0 2d       	mov	r31, r0
    1094:	6e 01       	movw	r12, r28
    1096:	31 ea       	ldi	r19, 0xA1	; 161
    1098:	c3 0e       	add	r12, r19
    109a:	d1 1c       	adc	r13, r1
    109c:	aa 24       	eor	r10, r10
    109e:	aa 94       	dec	r10
    10a0:	a9 0c       	add	r10, r9
    10a2:	b1 2c       	mov	r11, r1
    10a4:	8f ef       	ldi	r24, 0xFF	; 255
    10a6:	a8 1a       	sub	r10, r24
    10a8:	b8 0a       	sbc	r11, r24
    10aa:	aa 0c       	add	r10, r10
    10ac:	bb 1c       	adc	r11, r11
    10ae:	aa 0c       	add	r10, r10
    10b0:	bb 1c       	adc	r11, r11
    10b2:	aa 0c       	add	r10, r10
    10b4:	bb 1c       	adc	r11, r11
    10b6:	a0 0e       	add	r10, r16
    10b8:	b1 1e       	adc	r11, r17
    10ba:	0f 2e       	mov	r0, r31
    10bc:	41 2c       	mov	r4, r1
    10be:	51 2c       	mov	r5, r1
    10c0:	f0 e8       	ldi	r31, 0x80	; 128
    10c2:	6f 2e       	mov	r6, r31
    10c4:	ff e3       	ldi	r31, 0x3F	; 63
    10c6:	7f 2e       	mov	r7, r31
    10c8:	f0 2d       	mov	r31, r0
    10ca:	f8 01       	movw	r30, r16
    10cc:	40 82       	st	Z, r4
    10ce:	51 82       	std	Z+1, r5	; 0x01
    10d0:	62 82       	std	Z+2, r6	; 0x02
    10d2:	73 82       	std	Z+3, r7	; 0x03
    10d4:	f7 01       	movw	r30, r14
    10d6:	60 81       	ld	r22, Z
    10d8:	71 81       	ldd	r23, Z+1	; 0x01
    10da:	82 81       	ldd	r24, Z+2	; 0x02
    10dc:	93 81       	ldd	r25, Z+3	; 0x03
    10de:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <__floatsisf>
    10e2:	f8 01       	movw	r30, r16
    10e4:	64 83       	std	Z+4, r22	; 0x04
    10e6:	75 83       	std	Z+5, r23	; 0x05
    10e8:	86 83       	std	Z+6, r24	; 0x06
    10ea:	97 83       	std	Z+7, r25	; 0x07
    10ec:	f7 01       	movw	r30, r14
    10ee:	84 81       	ldd	r24, Z+4	; 0x04
    10f0:	95 81       	ldd	r25, Z+5	; 0x05
    10f2:	a6 81       	ldd	r26, Z+6	; 0x06
    10f4:	b7 81       	ldd	r27, Z+7	; 0x07
    10f6:	f6 01       	movw	r30, r12
    10f8:	81 93       	st	Z+, r24
    10fa:	91 93       	st	Z+, r25
    10fc:	a1 93       	st	Z+, r26
    10fe:	b1 93       	st	Z+, r27
    1100:	6f 01       	movw	r12, r30
    1102:	08 5f       	subi	r16, 0xF8	; 248
    1104:	1f 4f       	sbci	r17, 0xFF	; 255
    1106:	f8 e0       	ldi	r31, 0x08	; 8
    1108:	ef 0e       	add	r14, r31
    110a:	f1 1c       	adc	r15, r1
    110c:	0a 15       	cp	r16, r10
    110e:	1b 05       	cpc	r17, r11
    1110:	e1 f6       	brne	.-72     	; 0x10ca <fitStraighLine+0x8a>
    1112:	9e 01       	movw	r18, r28
    1114:	27 53       	subi	r18, 0x37	; 55
    1116:	3f 4f       	sbci	r19, 0xFF	; 255
    1118:	79 01       	movw	r14, r18
    111a:	8e 01       	movw	r16, r28
    111c:	0f 5a       	subi	r16, 0xAF	; 175
    111e:	1f 4f       	sbci	r17, 0xFF	; 255
    1120:	20 55       	subi	r18, 0x50	; 80
    1122:	31 09       	sbc	r19, r1
    1124:	ae 01       	movw	r20, r28
    1126:	4f 5f       	subi	r20, 0xFF	; 255
    1128:	5f 4f       	sbci	r21, 0xFF	; 255
    112a:	62 e0       	ldi	r22, 0x02	; 2
    112c:	70 e0       	ldi	r23, 0x00	; 0
    112e:	89 2d       	mov	r24, r9
    1130:	90 e0       	ldi	r25, 0x00	; 0
    1132:	0e 94 87 00 	call	0x10e	; 0x10e <QR>
    1136:	5c 01       	movw	r10, r24
    1138:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <calibratedPoints>
    113c:	67 01       	movw	r12, r14
    113e:	98 01       	movw	r18, r16
    1140:	78 01       	movw	r14, r16
    1142:	08 5d       	subi	r16, 0xD8	; 216
    1144:	1f 4f       	sbci	r17, 0xFF	; 255
    1146:	20 5b       	subi	r18, 0xB0	; 176
    1148:	3f 4f       	sbci	r19, 0xFF	; 255
    114a:	ae 01       	movw	r20, r28
    114c:	4f 5f       	subi	r20, 0xFF	; 255
    114e:	5f 4f       	sbci	r21, 0xFF	; 255
    1150:	62 e0       	ldi	r22, 0x02	; 2
    1152:	70 e0       	ldi	r23, 0x00	; 0
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	0e 94 fd 04 	call	0x9fa	; 0x9fa <solveLeastSquare>
    115a:	ed e0       	ldi	r30, 0x0D	; 13
    115c:	f1 e0       	ldi	r31, 0x01	; 1
    115e:	cf 55       	subi	r28, 0x5F	; 95
    1160:	df 4f       	sbci	r29, 0xFF	; 255
    1162:	88 81       	ld	r24, Y
    1164:	99 81       	ldd	r25, Y+1	; 0x01
    1166:	aa 81       	ldd	r26, Y+2	; 0x02
    1168:	bb 81       	ldd	r27, Y+3	; 0x03
    116a:	c1 5a       	subi	r28, 0xA1	; 161
    116c:	d0 40       	sbci	r29, 0x00	; 0
    116e:	80 83       	st	Z, r24
    1170:	91 83       	std	Z+1, r25	; 0x01
    1172:	a2 83       	std	Z+2, r26	; 0x02
    1174:	b3 83       	std	Z+3, r27	; 0x03
    1176:	cb 55       	subi	r28, 0x5B	; 91
    1178:	df 4f       	sbci	r29, 0xFF	; 255
    117a:	88 81       	ld	r24, Y
    117c:	99 81       	ldd	r25, Y+1	; 0x01
    117e:	aa 81       	ldd	r26, Y+2	; 0x02
    1180:	bb 81       	ldd	r27, Y+3	; 0x03
    1182:	c5 5a       	subi	r28, 0xA5	; 165
    1184:	d0 40       	sbci	r29, 0x00	; 0
    1186:	84 83       	std	Z+4, r24	; 0x04
    1188:	95 83       	std	Z+5, r25	; 0x05
    118a:	a6 83       	std	Z+6, r26	; 0x06
    118c:	b7 83       	std	Z+7, r27	; 0x07
    118e:	0e c0       	rjmp	.+28     	; 0x11ac <fitStraighLine+0x16c>
    1190:	ed e0       	ldi	r30, 0x0D	; 13
    1192:	f1 e0       	ldi	r31, 0x01	; 1
    1194:	10 82       	st	Z, r1
    1196:	11 82       	std	Z+1, r1	; 0x01
    1198:	12 82       	std	Z+2, r1	; 0x02
    119a:	13 82       	std	Z+3, r1	; 0x03
    119c:	80 e0       	ldi	r24, 0x00	; 0
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	a0 e8       	ldi	r26, 0x80	; 128
    11a2:	bf e3       	ldi	r27, 0x3F	; 63
    11a4:	84 83       	std	Z+4, r24	; 0x04
    11a6:	95 83       	std	Z+5, r25	; 0x05
    11a8:	a6 83       	std	Z+6, r26	; 0x06
    11aa:	b7 83       	std	Z+7, r27	; 0x07
    11ac:	c4 52       	subi	r28, 0x24	; 36
    11ae:	df 4f       	sbci	r29, 0xFF	; 255
    11b0:	0f b6       	in	r0, 0x3f	; 63
    11b2:	f8 94       	cli
    11b4:	de bf       	out	0x3e, r29	; 62
    11b6:	0f be       	out	0x3f, r0	; 63
    11b8:	cd bf       	out	0x3d, r28	; 61
    11ba:	df 91       	pop	r29
    11bc:	cf 91       	pop	r28
    11be:	1f 91       	pop	r17
    11c0:	0f 91       	pop	r16
    11c2:	ff 90       	pop	r15
    11c4:	ef 90       	pop	r14
    11c6:	df 90       	pop	r13
    11c8:	cf 90       	pop	r12
    11ca:	bf 90       	pop	r11
    11cc:	af 90       	pop	r10
    11ce:	9f 90       	pop	r9
    11d0:	7f 90       	pop	r7
    11d2:	6f 90       	pop	r6
    11d4:	5f 90       	pop	r5
    11d6:	4f 90       	pop	r4
    11d8:	08 95       	ret

000011da <loadStoredParameters>:
    11da:	cf 93       	push	r28
    11dc:	0e 94 40 06 	call	0xc80	; 0xc80 <loadDisplayUnitType>
    11e0:	0e 94 cb 06 	call	0xd96	; 0xd96 <loadMachineCapacity>
    11e4:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <loadOverflowProtectionDetails>
    11e8:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <loadSample>
    11ec:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <loadSampleValues>
    11f0:	0e 94 4e 06 	call	0xc9c	; 0xc9c <loadDisplayForceUnit>
    11f4:	0e 94 1f 07 	call	0xe3e	; 0xe3e <loadCalibrationUnit>
    11f8:	0e 94 11 07 	call	0xe22	; 0xe22 <loadNumCalibratedPoints>
    11fc:	60 91 32 02 	lds	r22, 0x0232	; 0x800232 <calibratedPoints>
    1200:	8b e6       	ldi	r24, 0x6B	; 107
    1202:	91 e0       	ldi	r25, 0x01	; 1
    1204:	0e 94 6c 07 	call	0xed8	; 0xed8 <displaySetValueUInt>
    1208:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <calibratedPoints>
    120c:	88 23       	and	r24, r24
    120e:	49 f0       	breq	.+18     	; 0x1222 <loadStoredParameters+0x48>
    1210:	c0 e0       	ldi	r28, 0x00	; 0
    1212:	8c 2f       	mov	r24, r28
    1214:	0e 94 2d 07 	call	0xe5a	; 0xe5a <loadCalibrationPoint>
    1218:	cf 5f       	subi	r28, 0xFF	; 255
    121a:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <calibratedPoints>
    121e:	c8 17       	cp	r28, r24
    1220:	c0 f3       	brcs	.-16     	; 0x1212 <loadStoredParameters+0x38>
    1222:	0e 94 20 08 	call	0x1040	; 0x1040 <fitStraighLine>
    1226:	cf 91       	pop	r28
    1228:	08 95       	ret

0000122a <calculateOverflowThresholdForce>:
    122a:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <overflowProtectionThreshold>
    122e:	70 e0       	ldi	r23, 0x00	; 0
    1230:	80 e0       	ldi	r24, 0x00	; 0
    1232:	90 e0       	ldi	r25, 0x00	; 0
    1234:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <__floatsisf>
    1238:	20 91 05 01 	lds	r18, 0x0105	; 0x800105 <machineCapacity>
    123c:	30 91 06 01 	lds	r19, 0x0106	; 0x800106 <machineCapacity+0x1>
    1240:	40 91 07 01 	lds	r20, 0x0107	; 0x800107 <machineCapacity+0x2>
    1244:	50 91 08 01 	lds	r21, 0x0108	; 0x800108 <machineCapacity+0x3>
    1248:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <__mulsf3>
    124c:	20 e0       	ldi	r18, 0x00	; 0
    124e:	30 e0       	ldi	r19, 0x00	; 0
    1250:	48 ec       	ldi	r20, 0xC8	; 200
    1252:	52 e4       	ldi	r21, 0x42	; 66
    1254:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <__divsf3>
    1258:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
    125c:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
    1260:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
    1264:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
    1268:	08 95       	ret

0000126a <clearFVarPointers>:
	dtostrf(sampleArea, 7, 1, output);
	displaySetText(SAMPLE_AREA_NAME, output);
}

void clearFVarPointers() {
	fVarCallbackPtr = 0;
    126a:	10 92 3a 02 	sts	0x023A, r1	; 0x80023a <fVarCallbackPtr+0x1>
    126e:	10 92 39 02 	sts	0x0239, r1	; 0x800239 <fVarCallbackPtr>
	fVarPtr = 0;
    1272:	10 92 c0 02 	sts	0x02C0, r1	; 0x8002c0 <fVarPtr+0x1>
    1276:	10 92 bf 02 	sts	0x02BF, r1	; 0x8002bf <fVarPtr>
    127a:	08 95       	ret

0000127c <initializeSystem>:
 void disableGlobalInterrupt() {
	 SREG &= ~((1<<SREG_I));
 }

void initializeSystem() {
	initializeBuzzer();
    127c:	0e 94 68 09 	call	0x12d0	; 0x12d0 <initializeBuzzer>
	initSoftwareUARTSend();
    1280:	0e 94 bd 09 	call	0x137a	; 0x137a <initSoftwareUARTSend>
	initSoftwareUARTReceive();
    1284:	0e 94 ca 09 	call	0x1394	; 0x1394 <initSoftwareUARTReceive>
	initBleUARTSend();
    1288:	0e 94 92 0a 	call	0x1524	; 0x1524 <initBleUARTSend>
	initBleUARTReceive();
    128c:	0e 94 9f 0a 	call	0x153e	; 0x153e <initBleUARTReceive>
	//serialInitialize(BAUDRATE);
	adcInitialize(0);
    1290:	80 e0       	ldi	r24, 0x00	; 0
    1292:	0e 94 53 00 	call	0xa6	; 0xa6 <adcInitialize>
	loadStoredParameters();
    1296:	0e 94 ed 08 	call	0x11da	; 0x11da <loadStoredParameters>
	clearFVarPointers();
    129a:	0e 94 35 09 	call	0x126a	; 0x126a <clearFVarPointers>
	initializeRelay(!overflowProtectionMode);
    129e:	81 e0       	ldi	r24, 0x01	; 1
    12a0:	90 91 23 02 	lds	r25, 0x0223	; 0x800223 <overflowProtectionMode>
    12a4:	91 11       	cpse	r25, r1
    12a6:	80 e0       	ldi	r24, 0x00	; 0
    12a8:	0e 94 02 0c 	call	0x1804	; 0x1804 <initializeRelay>
    12ac:	2f ef       	ldi	r18, 0xFF	; 255
    12ae:	8f ef       	ldi	r24, 0xFF	; 255
    12b0:	9a e1       	ldi	r25, 0x1A	; 26
    12b2:	21 50       	subi	r18, 0x01	; 1
    12b4:	80 40       	sbci	r24, 0x00	; 0
    12b6:	90 40       	sbci	r25, 0x00	; 0
    12b8:	e1 f7       	brne	.-8      	; 0x12b2 <initializeSystem+0x36>
    12ba:	00 c0       	rjmp	.+0      	; 0x12bc <initializeSystem+0x40>
    12bc:	00 00       	nop
	_delay_ms(800);

	initiliazeTimerTicker();
    12be:	0e 94 bb 07 	call	0xf76	; 0xf76 <initiliazeTimerTicker>
	startTimerTicker();
    12c2:	0e 94 c6 07 	call	0xf8c	; 0xf8c <startTimerTicker>

	softwareSerialPrint(READY);
    12c6:	87 e1       	ldi	r24, 0x17	; 23
    12c8:	92 e0       	ldi	r25, 0x02	; 2
    12ca:	0e 94 0f 0a 	call	0x141e	; 0x141e <softwareSerialPrint>
    12ce:	08 95       	ret

000012d0 <initializeBuzzer>:
 #include "passive_buzzer.h"
 #include <avr/io.h>
 #include <util/delay.h>

 void initializeBuzzer() {
	 DDRC |= (1<<BUZZER_PIN);
    12d0:	3c 9a       	sbi	0x07, 4	; 7
    12d2:	08 95       	ret

000012d4 <serialPutChar>:
 }

 void serialClearInputBuffer() {
	 disableGlobalInterrupt();
	 inBufferStartIndex = inBufferEndIndex = 0;
	 enableGlobalInterrupt();
    12d4:	e0 ec       	ldi	r30, 0xC0	; 192
    12d6:	f0 e0       	ldi	r31, 0x00	; 0
    12d8:	90 81       	ld	r25, Z
    12da:	95 ff       	sbrs	r25, 5
    12dc:	fd cf       	rjmp	.-6      	; 0x12d8 <serialPutChar+0x4>
    12de:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    12e2:	08 95       	ret

000012e4 <serialReadChar>:
    12e4:	e0 ec       	ldi	r30, 0xC0	; 192
    12e6:	f0 e0       	ldi	r31, 0x00	; 0
    12e8:	80 81       	ld	r24, Z
    12ea:	88 23       	and	r24, r24
    12ec:	ec f7       	brge	.-6      	; 0x12e8 <serialReadChar+0x4>
    12ee:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    12f2:	08 95       	ret

000012f4 <__vector_18>:
    12f4:	1f 92       	push	r1
    12f6:	0f 92       	push	r0
    12f8:	0f b6       	in	r0, 0x3f	; 63
    12fa:	0f 92       	push	r0
    12fc:	11 24       	eor	r1, r1
    12fe:	2f 93       	push	r18
    1300:	3f 93       	push	r19
    1302:	4f 93       	push	r20
    1304:	5f 93       	push	r21
    1306:	6f 93       	push	r22
    1308:	7f 93       	push	r23
    130a:	8f 93       	push	r24
    130c:	9f 93       	push	r25
    130e:	af 93       	push	r26
    1310:	bf 93       	push	r27
    1312:	ef 93       	push	r30
    1314:	ff 93       	push	r31
    1316:	0e 94 72 09 	call	0x12e4	; 0x12e4 <serialReadChar>
    131a:	e0 91 36 02 	lds	r30, 0x0236	; 0x800236 <inBufferEndIndex>
    131e:	f0 e0       	ldi	r31, 0x00	; 0
    1320:	ef 53       	subi	r30, 0x3F	; 63
    1322:	fd 4f       	sbci	r31, 0xFD	; 253
    1324:	80 83       	st	Z, r24
    1326:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <inBufferEndIndex>
    132a:	90 e0       	ldi	r25, 0x00	; 0
    132c:	01 96       	adiw	r24, 0x01	; 1
    132e:	68 e1       	ldi	r22, 0x18	; 24
    1330:	70 e0       	ldi	r23, 0x00	; 0
    1332:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <__divmodhi4>
    1336:	80 93 36 02 	sts	0x0236, r24	; 0x800236 <inBufferEndIndex>
    133a:	ff 91       	pop	r31
    133c:	ef 91       	pop	r30
    133e:	bf 91       	pop	r27
    1340:	af 91       	pop	r26
    1342:	9f 91       	pop	r25
    1344:	8f 91       	pop	r24
    1346:	7f 91       	pop	r23
    1348:	6f 91       	pop	r22
    134a:	5f 91       	pop	r21
    134c:	4f 91       	pop	r20
    134e:	3f 91       	pop	r19
    1350:	2f 91       	pop	r18
    1352:	0f 90       	pop	r0
    1354:	0f be       	out	0x3f, r0	; 63
    1356:	0f 90       	pop	r0
    1358:	1f 90       	pop	r1
    135a:	18 95       	reti

0000135c <serialPrint>:
 }

 void serialPrint(const unsigned char *str) {
    135c:	cf 93       	push	r28
    135e:	df 93       	push	r29
    1360:	ec 01       	movw	r28, r24
	 unsigned int i = 0;
	 for (i=0; str[i] != '\0'; i++) {
    1362:	88 81       	ld	r24, Y
    1364:	88 23       	and	r24, r24
    1366:	31 f0       	breq	.+12     	; 0x1374 <serialPrint+0x18>
    1368:	21 96       	adiw	r28, 0x01	; 1
		 serialPutChar(str[i]);
    136a:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <serialPutChar>
	 enableGlobalInterrupt();
 }

 void serialPrint(const unsigned char *str) {
	 unsigned int i = 0;
	 for (i=0; str[i] != '\0'; i++) {
    136e:	89 91       	ld	r24, Y+
    1370:	81 11       	cpse	r24, r1
    1372:	fb cf       	rjmp	.-10     	; 0x136a <serialPrint+0xe>
		 serialPutChar(str[i]);
	 }
 }
    1374:	df 91       	pop	r29
    1376:	cf 91       	pop	r28
    1378:	08 95       	ret

0000137a <initSoftwareUARTSend>:
		////testSoftwareUARTSend();
	//}
//}

void initSoftwareUARTSend() {
	DDRD |= (1<<PORTD3);
    137a:	53 9a       	sbi	0x0a, 3	; 10
	TCCR1B |= (1 << WGM12);
    137c:	e1 e8       	ldi	r30, 0x81	; 129
    137e:	f0 e0       	ldi	r31, 0x00	; 0
    1380:	80 81       	ld	r24, Z
    1382:	88 60       	ori	r24, 0x08	; 8
    1384:	80 83       	st	Z, r24
	OCR1A = 1152;
    1386:	80 e8       	ldi	r24, 0x80	; 128
    1388:	94 e0       	ldi	r25, 0x04	; 4
    138a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    138e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    1392:	08 95       	ret

00001394 <initSoftwareUARTReceive>:
}

void initSoftwareUARTReceive() {
	DDRD &= ~(1<<PORTD2);
    1394:	52 98       	cbi	0x0a, 2	; 10
	PORTD |= (1<<PORTD2);
    1396:	5a 9a       	sbi	0x0b, 2	; 11
	TCCR1B |= (1 << WGM12);
    1398:	e1 e8       	ldi	r30, 0x81	; 129
    139a:	f0 e0       	ldi	r31, 0x00	; 0
    139c:	80 81       	ld	r24, Z
    139e:	88 60       	ori	r24, 0x08	; 8
    13a0:	80 83       	st	Z, r24
	OCR1A = 1152;
    13a2:	80 e8       	ldi	r24, 0x80	; 128
    13a4:	94 e0       	ldi	r25, 0x04	; 4
    13a6:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    13aa:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	PCICR |= (1 << PCIE2);
    13ae:	e8 e6       	ldi	r30, 0x68	; 104
    13b0:	f0 e0       	ldi	r31, 0x00	; 0
    13b2:	80 81       	ld	r24, Z
    13b4:	84 60       	ori	r24, 0x04	; 4
    13b6:	80 83       	st	Z, r24
	PCMSK2 |= (1 << PCINT18);
    13b8:	ed e6       	ldi	r30, 0x6D	; 109
    13ba:	f0 e0       	ldi	r31, 0x00	; 0
    13bc:	80 81       	ld	r24, Z
    13be:	84 60       	ori	r24, 0x04	; 4
    13c0:	80 83       	st	Z, r24
	sei();
    13c2:	78 94       	sei
    13c4:	08 95       	ret

000013c6 <softwareSendBit>:
	}
	softwareSendBit(1);
}

void softwareSendBit(unsigned char b) {
	TCCR1B &= ~(1 << CS10);
    13c6:	e1 e8       	ldi	r30, 0x81	; 129
    13c8:	f0 e0       	ldi	r31, 0x00	; 0
    13ca:	90 81       	ld	r25, Z
    13cc:	9e 7f       	andi	r25, 0xFE	; 254
    13ce:	90 83       	st	Z, r25
	if (b)
    13d0:	88 23       	and	r24, r24
    13d2:	11 f0       	breq	.+4      	; 0x13d8 <softwareSendBit+0x12>
		PORTD = PORTD | (1 << PORTD3);
    13d4:	5b 9a       	sbi	0x0b, 3	; 11
    13d6:	01 c0       	rjmp	.+2      	; 0x13da <softwareSendBit+0x14>
	else
		PORTD = PORTD & ~(1 << PORTD3);
    13d8:	5b 98       	cbi	0x0b, 3	; 11
	TCCR1B |= (1 << CS10);
    13da:	e1 e8       	ldi	r30, 0x81	; 129
    13dc:	f0 e0       	ldi	r31, 0x00	; 0
    13de:	80 81       	ld	r24, Z
    13e0:	81 60       	ori	r24, 0x01	; 1
    13e2:	80 83       	st	Z, r24
	while (!(TIFR1 & (1 << OCF1A)));
    13e4:	b1 9b       	sbis	0x16, 1	; 22
    13e6:	fe cf       	rjmp	.-4      	; 0x13e4 <softwareSendBit+0x1e>
	TIFR1 = (TIFR1 | (1 << OCF1A));
    13e8:	b1 9a       	sbi	0x16, 1	; 22
	TCCR1B &= ~(1 << CS10);
    13ea:	e1 e8       	ldi	r30, 0x81	; 129
    13ec:	f0 e0       	ldi	r31, 0x00	; 0
    13ee:	80 81       	ld	r24, Z
    13f0:	8e 7f       	andi	r24, 0xFE	; 254
    13f2:	80 83       	st	Z, r24
    13f4:	08 95       	ret

000013f6 <softwareSendByte>:
	softwareSerialPrintULong(t->tm_min);
	softwareSerialPrint(":");
	softwareSerialPrintULong(t->tm_sec);
}

void softwareSendByte(unsigned char c) {
    13f6:	cf 93       	push	r28
    13f8:	df 93       	push	r29
    13fa:	d8 2f       	mov	r29, r24
	unsigned char i;
	softwareSendBit(0);
    13fc:	80 e0       	ldi	r24, 0x00	; 0
    13fe:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <softwareSendBit>
    1402:	c8 e0       	ldi	r28, 0x08	; 8
	for (i = 0; i < 8; i++) {
		softwareSendBit(c & 0x01);
    1404:	8d 2f       	mov	r24, r29
    1406:	81 70       	andi	r24, 0x01	; 1
    1408:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <softwareSendBit>
		c >>= 1;
    140c:	d6 95       	lsr	r29
    140e:	c1 50       	subi	r28, 0x01	; 1
}

void softwareSendByte(unsigned char c) {
	unsigned char i;
	softwareSendBit(0);
	for (i = 0; i < 8; i++) {
    1410:	c9 f7       	brne	.-14     	; 0x1404 <softwareSendByte+0xe>
		softwareSendBit(c & 0x01);
		c >>= 1;
	}
	softwareSendBit(1);
    1412:	81 e0       	ldi	r24, 0x01	; 1
    1414:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <softwareSendBit>
}
    1418:	df 91       	pop	r29
    141a:	cf 91       	pop	r28
    141c:	08 95       	ret

0000141e <softwareSerialPrint>:
	PCICR |= (1 << PCIE2);
	PCMSK2 |= (1 << PCINT18);
	sei();
}

void softwareSerialPrint(const unsigned char *c) {
    141e:	0f 93       	push	r16
    1420:	1f 93       	push	r17
    1422:	cf 93       	push	r28
    1424:	fc 01       	movw	r30, r24
	unsigned char i;
	for (i=0; c[i] != 0; i++) {
    1426:	80 81       	ld	r24, Z
    1428:	88 23       	and	r24, r24
    142a:	59 f0       	breq	.+22     	; 0x1442 <softwareSerialPrint+0x24>
    142c:	8f 01       	movw	r16, r30
    142e:	c0 e0       	ldi	r28, 0x00	; 0
		softwareSendByte(c[i]);
    1430:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <softwareSendByte>
	sei();
}

void softwareSerialPrint(const unsigned char *c) {
	unsigned char i;
	for (i=0; c[i] != 0; i++) {
    1434:	cf 5f       	subi	r28, 0xFF	; 255
    1436:	f8 01       	movw	r30, r16
    1438:	ec 0f       	add	r30, r28
    143a:	f1 1d       	adc	r31, r1
    143c:	80 81       	ld	r24, Z
    143e:	81 11       	cpse	r24, r1
    1440:	f7 cf       	rjmp	.-18     	; 0x1430 <softwareSerialPrint+0x12>
		softwareSendByte(c[i]);
	}
}
    1442:	cf 91       	pop	r28
    1444:	1f 91       	pop	r17
    1446:	0f 91       	pop	r16
    1448:	08 95       	ret

0000144a <disableBleInterupt>:
}

void bleBufferReadAll(unsigned char *buffer) {
	unsigned char bufferLen = (bleInBufferEndIndex-bleInBufferStartIndex+BLE_BUFFER_SIZE)%BLE_BUFFER_SIZE;
	if (bufferLen > 0) {
		bleBufferRead(bufferLen, buffer);
    144a:	ed e6       	ldi	r30, 0x6D	; 109
    144c:	f0 e0       	ldi	r31, 0x00	; 0
    144e:	80 81       	ld	r24, Z
    1450:	8f 77       	andi	r24, 0x7F	; 127
    1452:	80 83       	st	Z, r24
    1454:	08 95       	ret

00001456 <enableBleInterupt>:
    1456:	ed e6       	ldi	r30, 0x6D	; 109
    1458:	f0 e0       	ldi	r31, 0x00	; 0
    145a:	80 81       	ld	r24, Z
    145c:	80 68       	ori	r24, 0x80	; 128
    145e:	80 83       	st	Z, r24
    1460:	08 95       	ret

00001462 <__vector_5>:
    1462:	1f 92       	push	r1
    1464:	0f 92       	push	r0
    1466:	0f b6       	in	r0, 0x3f	; 63
    1468:	0f 92       	push	r0
    146a:	11 24       	eor	r1, r1
    146c:	2f 93       	push	r18
    146e:	3f 93       	push	r19
    1470:	4f 93       	push	r20
    1472:	5f 93       	push	r21
    1474:	6f 93       	push	r22
    1476:	7f 93       	push	r23
    1478:	8f 93       	push	r24
    147a:	9f 93       	push	r25
    147c:	af 93       	push	r26
    147e:	bf 93       	push	r27
    1480:	ef 93       	push	r30
    1482:	ff 93       	push	r31
    1484:	0e 94 25 0a 	call	0x144a	; 0x144a <disableBleInterupt>
    1488:	4f 99       	sbic	0x09, 7	; 9
    148a:	39 c0       	rjmp	.+114    	; 0x14fe <__vector_5+0x9c>
    148c:	80 e4       	ldi	r24, 0x40	; 64
    148e:	92 e0       	ldi	r25, 0x02	; 2
    1490:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    1494:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    1498:	e1 e8       	ldi	r30, 0x81	; 129
    149a:	f0 e0       	ldi	r31, 0x00	; 0
    149c:	80 81       	ld	r24, Z
    149e:	81 60       	ori	r24, 0x01	; 1
    14a0:	80 83       	st	Z, r24
    14a2:	b1 9b       	sbis	0x16, 1	; 22
    14a4:	fe cf       	rjmp	.-4      	; 0x14a2 <__vector_5+0x40>
    14a6:	e1 e8       	ldi	r30, 0x81	; 129
    14a8:	f0 e0       	ldi	r31, 0x00	; 0
    14aa:	80 81       	ld	r24, Z
    14ac:	8e 7f       	andi	r24, 0xFE	; 254
    14ae:	80 83       	st	Z, r24
    14b0:	b1 9a       	sbi	0x16, 1	; 22
    14b2:	80 e8       	ldi	r24, 0x80	; 128
    14b4:	94 e0       	ldi	r25, 0x04	; 4
    14b6:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    14ba:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    14be:	98 e0       	ldi	r25, 0x08	; 8
    14c0:	20 e0       	ldi	r18, 0x00	; 0
    14c2:	26 95       	lsr	r18
    14c4:	80 81       	ld	r24, Z
    14c6:	81 60       	ori	r24, 0x01	; 1
    14c8:	80 83       	st	Z, r24
    14ca:	b1 9b       	sbis	0x16, 1	; 22
    14cc:	fe cf       	rjmp	.-4      	; 0x14ca <__vector_5+0x68>
    14ce:	80 81       	ld	r24, Z
    14d0:	8e 7f       	andi	r24, 0xFE	; 254
    14d2:	80 83       	st	Z, r24
    14d4:	4f 99       	sbic	0x09, 7	; 9
    14d6:	20 68       	ori	r18, 0x80	; 128
    14d8:	b1 9a       	sbi	0x16, 1	; 22
    14da:	91 50       	subi	r25, 0x01	; 1
    14dc:	91 f7       	brne	.-28     	; 0x14c2 <__vector_5+0x60>
    14de:	e0 91 37 02 	lds	r30, 0x0237	; 0x800237 <bleInBufferEndIndex>
    14e2:	f0 e0       	ldi	r31, 0x00	; 0
    14e4:	e7 52       	subi	r30, 0x27	; 39
    14e6:	fd 4f       	sbci	r31, 0xFD	; 253
    14e8:	20 83       	st	Z, r18
    14ea:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <bleInBufferEndIndex>
    14ee:	90 e0       	ldi	r25, 0x00	; 0
    14f0:	01 96       	adiw	r24, 0x01	; 1
    14f2:	68 e1       	ldi	r22, 0x18	; 24
    14f4:	70 e0       	ldi	r23, 0x00	; 0
    14f6:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <__divmodhi4>
    14fa:	80 93 37 02 	sts	0x0237, r24	; 0x800237 <bleInBufferEndIndex>
    14fe:	0e 94 2b 0a 	call	0x1456	; 0x1456 <enableBleInterupt>
    1502:	ff 91       	pop	r31
    1504:	ef 91       	pop	r30
    1506:	bf 91       	pop	r27
    1508:	af 91       	pop	r26
    150a:	9f 91       	pop	r25
    150c:	8f 91       	pop	r24
    150e:	7f 91       	pop	r23
    1510:	6f 91       	pop	r22
    1512:	5f 91       	pop	r21
    1514:	4f 91       	pop	r20
    1516:	3f 91       	pop	r19
    1518:	2f 91       	pop	r18
    151a:	0f 90       	pop	r0
    151c:	0f be       	out	0x3f, r0	; 63
    151e:	0f 90       	pop	r0
    1520:	1f 90       	pop	r1
    1522:	18 95       	reti

00001524 <initBleUARTSend>:
    1524:	56 9a       	sbi	0x0a, 6	; 10
    1526:	e1 e8       	ldi	r30, 0x81	; 129
    1528:	f0 e0       	ldi	r31, 0x00	; 0
    152a:	80 81       	ld	r24, Z
    152c:	88 60       	ori	r24, 0x08	; 8
    152e:	80 83       	st	Z, r24
    1530:	80 e8       	ldi	r24, 0x80	; 128
    1532:	94 e0       	ldi	r25, 0x04	; 4
    1534:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    1538:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    153c:	08 95       	ret

0000153e <initBleUARTReceive>:
    153e:	57 98       	cbi	0x0a, 7	; 10
    1540:	5f 98       	cbi	0x0b, 7	; 11
    1542:	e1 e8       	ldi	r30, 0x81	; 129
    1544:	f0 e0       	ldi	r31, 0x00	; 0
    1546:	80 81       	ld	r24, Z
    1548:	88 60       	ori	r24, 0x08	; 8
    154a:	80 83       	st	Z, r24
    154c:	80 e8       	ldi	r24, 0x80	; 128
    154e:	94 e0       	ldi	r25, 0x04	; 4
    1550:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    1554:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    1558:	e8 e6       	ldi	r30, 0x68	; 104
    155a:	f0 e0       	ldi	r31, 0x00	; 0
    155c:	80 81       	ld	r24, Z
    155e:	84 60       	ori	r24, 0x04	; 4
    1560:	80 83       	st	Z, r24
    1562:	ed e6       	ldi	r30, 0x6D	; 109
    1564:	f0 e0       	ldi	r31, 0x00	; 0
    1566:	80 81       	ld	r24, Z
    1568:	80 68       	ori	r24, 0x80	; 128
    156a:	80 83       	st	Z, r24
    156c:	78 94       	sei
    156e:	08 95       	ret

00001570 <bleSendBit>:
    1570:	cf 93       	push	r28
    1572:	c8 2f       	mov	r28, r24
    1574:	0e 94 25 0a 	call	0x144a	; 0x144a <disableBleInterupt>
    1578:	e1 e8       	ldi	r30, 0x81	; 129
    157a:	f0 e0       	ldi	r31, 0x00	; 0
    157c:	80 81       	ld	r24, Z
    157e:	8e 7f       	andi	r24, 0xFE	; 254
    1580:	80 83       	st	Z, r24
    1582:	cc 23       	and	r28, r28
    1584:	11 f0       	breq	.+4      	; 0x158a <bleSendBit+0x1a>
    1586:	5e 9a       	sbi	0x0b, 6	; 11
    1588:	01 c0       	rjmp	.+2      	; 0x158c <bleSendBit+0x1c>
    158a:	5e 98       	cbi	0x0b, 6	; 11
    158c:	e1 e8       	ldi	r30, 0x81	; 129
    158e:	f0 e0       	ldi	r31, 0x00	; 0
    1590:	80 81       	ld	r24, Z
    1592:	81 60       	ori	r24, 0x01	; 1
    1594:	80 83       	st	Z, r24
    1596:	b1 9b       	sbis	0x16, 1	; 22
    1598:	fe cf       	rjmp	.-4      	; 0x1596 <bleSendBit+0x26>
    159a:	b1 9a       	sbi	0x16, 1	; 22
    159c:	e1 e8       	ldi	r30, 0x81	; 129
    159e:	f0 e0       	ldi	r31, 0x00	; 0
    15a0:	80 81       	ld	r24, Z
    15a2:	8e 7f       	andi	r24, 0xFE	; 254
    15a4:	80 83       	st	Z, r24
    15a6:	0e 94 2b 0a 	call	0x1456	; 0x1456 <enableBleInterupt>
    15aa:	cf 91       	pop	r28
    15ac:	08 95       	ret

000015ae <bleSendByte>:
    15ae:	cf 93       	push	r28
    15b0:	df 93       	push	r29
    15b2:	d8 2f       	mov	r29, r24
    15b4:	80 e0       	ldi	r24, 0x00	; 0
    15b6:	0e 94 b8 0a 	call	0x1570	; 0x1570 <bleSendBit>
    15ba:	c8 e0       	ldi	r28, 0x08	; 8
    15bc:	8d 2f       	mov	r24, r29
    15be:	81 70       	andi	r24, 0x01	; 1
    15c0:	0e 94 b8 0a 	call	0x1570	; 0x1570 <bleSendBit>
    15c4:	d6 95       	lsr	r29
    15c6:	c1 50       	subi	r28, 0x01	; 1
    15c8:	c9 f7       	brne	.-14     	; 0x15bc <bleSendByte+0xe>
    15ca:	81 e0       	ldi	r24, 0x01	; 1
    15cc:	0e 94 b8 0a 	call	0x1570	; 0x1570 <bleSendBit>
    15d0:	df 91       	pop	r29
    15d2:	cf 91       	pop	r28
    15d4:	08 95       	ret

000015d6 <bleSerialPrint>:
    15d6:	0f 93       	push	r16
    15d8:	1f 93       	push	r17
    15da:	cf 93       	push	r28
    15dc:	fc 01       	movw	r30, r24
    15de:	80 81       	ld	r24, Z
    15e0:	88 23       	and	r24, r24
    15e2:	59 f0       	breq	.+22     	; 0x15fa <bleSerialPrint+0x24>
    15e4:	8f 01       	movw	r16, r30
    15e6:	c0 e0       	ldi	r28, 0x00	; 0
    15e8:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <bleSendByte>
    15ec:	cf 5f       	subi	r28, 0xFF	; 255
    15ee:	f8 01       	movw	r30, r16
    15f0:	ec 0f       	add	r30, r28
    15f2:	f1 1d       	adc	r31, r1
    15f4:	80 81       	ld	r24, Z
    15f6:	81 11       	cpse	r24, r1
    15f8:	f7 cf       	rjmp	.-18     	; 0x15e8 <bleSerialPrint+0x12>
    15fa:	cf 91       	pop	r28
    15fc:	1f 91       	pop	r17
    15fe:	0f 91       	pop	r16
    1600:	08 95       	ret

00001602 <bleSerialPrintLong>:
    1602:	cf 93       	push	r28
    1604:	df 93       	push	r29
    1606:	cd b7       	in	r28, 0x3d	; 61
    1608:	de b7       	in	r29, 0x3e	; 62
    160a:	60 97       	sbiw	r28, 0x10	; 16
    160c:	0f b6       	in	r0, 0x3f	; 63
    160e:	f8 94       	cli
    1610:	de bf       	out	0x3e, r29	; 62
    1612:	0f be       	out	0x3f, r0	; 63
    1614:	cd bf       	out	0x3d, r28	; 61
    1616:	2a e0       	ldi	r18, 0x0A	; 10
    1618:	ae 01       	movw	r20, r28
    161a:	4f 5f       	subi	r20, 0xFF	; 255
    161c:	5f 4f       	sbci	r21, 0xFF	; 255
    161e:	0e 94 bf 0e 	call	0x1d7e	; 0x1d7e <__ltoa_ncheck>
    1622:	ce 01       	movw	r24, r28
    1624:	01 96       	adiw	r24, 0x01	; 1
    1626:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <bleSerialPrint>
    162a:	60 96       	adiw	r28, 0x10	; 16
    162c:	0f b6       	in	r0, 0x3f	; 63
    162e:	f8 94       	cli
    1630:	de bf       	out	0x3e, r29	; 62
    1632:	0f be       	out	0x3f, r0	; 63
    1634:	cd bf       	out	0x3d, r28	; 61
    1636:	df 91       	pop	r29
    1638:	cf 91       	pop	r28
    163a:	08 95       	ret

0000163c <bleBufferRead>:
    163c:	ef 92       	push	r14
    163e:	ff 92       	push	r15
    1640:	0f 93       	push	r16
    1642:	1f 93       	push	r17
    1644:	cf 93       	push	r28
    1646:	df 93       	push	r29
    1648:	ec 01       	movw	r28, r24
    164a:	8b 01       	movw	r16, r22
    164c:	0e 94 25 0a 	call	0x144a	; 0x144a <disableBleInterupt>
    1650:	28 e1       	ldi	r18, 0x18	; 24
    1652:	30 e0       	ldi	r19, 0x00	; 0
    1654:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <bleInBufferEndIndex>
    1658:	40 91 38 02 	lds	r20, 0x0238	; 0x800238 <bleInBufferStartIndex>
    165c:	90 e0       	ldi	r25, 0x00	; 0
    165e:	84 1b       	sub	r24, r20
    1660:	91 09       	sbc	r25, r1
    1662:	48 96       	adiw	r24, 0x18	; 24
    1664:	b9 01       	movw	r22, r18
    1666:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <__divmodhi4>
    166a:	8c 17       	cp	r24, r28
    166c:	9d 07       	cpc	r25, r29
    166e:	90 f3       	brcs	.-28     	; 0x1654 <bleBufferRead+0x18>
    1670:	20 97       	sbiw	r28, 0x00	; 0
    1672:	69 f1       	breq	.+90     	; 0x16ce <bleBufferRead+0x92>
    1674:	f8 01       	movw	r30, r16
    1676:	40 e0       	ldi	r20, 0x00	; 0
    1678:	50 e0       	ldi	r21, 0x00	; 0
    167a:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <bleInBufferStartIndex>
    167e:	7a 01       	movw	r14, r20
    1680:	e8 0e       	add	r14, r24
    1682:	f1 1c       	adc	r15, r1
    1684:	97 01       	movw	r18, r14
    1686:	ab ea       	ldi	r26, 0xAB	; 171
    1688:	ba ea       	ldi	r27, 0xAA	; 170
    168a:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <__umulhisi3>
    168e:	92 95       	swap	r25
    1690:	82 95       	swap	r24
    1692:	8f 70       	andi	r24, 0x0F	; 15
    1694:	89 27       	eor	r24, r25
    1696:	9f 70       	andi	r25, 0x0F	; 15
    1698:	89 27       	eor	r24, r25
    169a:	9c 01       	movw	r18, r24
    169c:	22 0f       	add	r18, r18
    169e:	33 1f       	adc	r19, r19
    16a0:	82 0f       	add	r24, r18
    16a2:	93 1f       	adc	r25, r19
    16a4:	88 0f       	add	r24, r24
    16a6:	99 1f       	adc	r25, r25
    16a8:	88 0f       	add	r24, r24
    16aa:	99 1f       	adc	r25, r25
    16ac:	88 0f       	add	r24, r24
    16ae:	99 1f       	adc	r25, r25
    16b0:	97 01       	movw	r18, r14
    16b2:	28 1b       	sub	r18, r24
    16b4:	39 0b       	sbc	r19, r25
    16b6:	d9 01       	movw	r26, r18
    16b8:	a7 52       	subi	r26, 0x27	; 39
    16ba:	bd 4f       	sbci	r27, 0xFD	; 253
    16bc:	8c 91       	ld	r24, X
    16be:	81 93       	st	Z+, r24
    16c0:	4f 5f       	subi	r20, 0xFF	; 255
    16c2:	5f 4f       	sbci	r21, 0xFF	; 255
    16c4:	c4 17       	cp	r28, r20
    16c6:	d5 07       	cpc	r29, r21
    16c8:	c1 f6       	brne	.-80     	; 0x167a <bleBufferRead+0x3e>
    16ca:	ce 01       	movw	r24, r28
    16cc:	01 c0       	rjmp	.+2      	; 0x16d0 <bleBufferRead+0x94>
    16ce:	ce 01       	movw	r24, r28
    16d0:	f8 01       	movw	r30, r16
    16d2:	e8 0f       	add	r30, r24
    16d4:	f9 1f       	adc	r31, r25
    16d6:	10 82       	st	Z, r1
    16d8:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <bleInBufferStartIndex>
    16dc:	c8 0f       	add	r28, r24
    16de:	d1 1d       	adc	r29, r1
    16e0:	9e 01       	movw	r18, r28
    16e2:	ab ea       	ldi	r26, 0xAB	; 171
    16e4:	ba ea       	ldi	r27, 0xAA	; 170
    16e6:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <__umulhisi3>
    16ea:	92 95       	swap	r25
    16ec:	82 95       	swap	r24
    16ee:	8f 70       	andi	r24, 0x0F	; 15
    16f0:	89 27       	eor	r24, r25
    16f2:	9f 70       	andi	r25, 0x0F	; 15
    16f4:	89 27       	eor	r24, r25
    16f6:	9c 01       	movw	r18, r24
    16f8:	22 0f       	add	r18, r18
    16fa:	33 1f       	adc	r19, r19
    16fc:	82 0f       	add	r24, r18
    16fe:	93 1f       	adc	r25, r19
    1700:	88 0f       	add	r24, r24
    1702:	99 1f       	adc	r25, r25
    1704:	88 0f       	add	r24, r24
    1706:	99 1f       	adc	r25, r25
    1708:	88 0f       	add	r24, r24
    170a:	99 1f       	adc	r25, r25
    170c:	c8 1b       	sub	r28, r24
    170e:	d9 0b       	sbc	r29, r25
    1710:	c0 93 38 02 	sts	0x0238, r28	; 0x800238 <bleInBufferStartIndex>
    1714:	0e 94 2b 0a 	call	0x1456	; 0x1456 <enableBleInterupt>
    1718:	df 91       	pop	r29
    171a:	cf 91       	pop	r28
    171c:	1f 91       	pop	r17
    171e:	0f 91       	pop	r16
    1720:	ff 90       	pop	r15
    1722:	ef 90       	pop	r14
    1724:	08 95       	ret

00001726 <serialBleFind>:
	}
}

 int serialBleFind(unsigned char c) {
    1726:	0f 93       	push	r16
    1728:	1f 93       	push	r17
    172a:	cf 93       	push	r28
    172c:	df 93       	push	r29
    172e:	48 2f       	mov	r20, r24
	 int i;
	 unsigned char bufferLen = (bleInBufferEndIndex-bleInBufferStartIndex+BLE_BUFFER_SIZE)%BLE_BUFFER_SIZE;
    1730:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <bleInBufferEndIndex>
    1734:	20 91 38 02 	lds	r18, 0x0238	; 0x800238 <bleInBufferStartIndex>
    1738:	90 e0       	ldi	r25, 0x00	; 0
    173a:	82 1b       	sub	r24, r18
    173c:	91 09       	sbc	r25, r1
    173e:	48 96       	adiw	r24, 0x18	; 24
    1740:	68 e1       	ldi	r22, 0x18	; 24
    1742:	70 e0       	ldi	r23, 0x00	; 0
    1744:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <__divmodhi4>
	 if (bufferLen > 0) {
    1748:	88 23       	and	r24, r24
    174a:	71 f1       	breq	.+92     	; 0x17a8 <serialBleFind+0x82>
    174c:	ec 01       	movw	r28, r24
    174e:	dd 27       	eor	r29, r29
		 for (i=0U; i<bufferLen; i++) {
    1750:	1c 16       	cp	r1, r28
    1752:	1d 06       	cpc	r1, r29
    1754:	64 f5       	brge	.+88     	; 0x17ae <serialBleFind+0x88>
			 if (bleBuffer[(bleInBufferStartIndex+i)%BLE_BUFFER_SIZE] == c)
    1756:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <bleInBufferStartIndex>
    175a:	90 e0       	ldi	r25, 0x00	; 0
    175c:	68 e1       	ldi	r22, 0x18	; 24
    175e:	70 e0       	ldi	r23, 0x00	; 0
    1760:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <__divmodhi4>
    1764:	fc 01       	movw	r30, r24
    1766:	e7 52       	subi	r30, 0x27	; 39
    1768:	fd 4f       	sbci	r31, 0xFD	; 253
    176a:	80 81       	ld	r24, Z
    176c:	48 17       	cp	r20, r24
    176e:	11 f1       	breq	.+68     	; 0x17b4 <serialBleFind+0x8e>
    1770:	20 e0       	ldi	r18, 0x00	; 0
    1772:	30 e0       	ldi	r19, 0x00	; 0
    1774:	08 e1       	ldi	r16, 0x18	; 24
    1776:	10 e0       	ldi	r17, 0x00	; 0
    1778:	0f c0       	rjmp	.+30     	; 0x1798 <serialBleFind+0x72>
    177a:	90 91 38 02 	lds	r25, 0x0238	; 0x800238 <bleInBufferStartIndex>
    177e:	b9 01       	movw	r22, r18
    1780:	69 0f       	add	r22, r25
    1782:	71 1d       	adc	r23, r1
    1784:	cb 01       	movw	r24, r22
    1786:	b8 01       	movw	r22, r16
    1788:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <__divmodhi4>
    178c:	fc 01       	movw	r30, r24
    178e:	e7 52       	subi	r30, 0x27	; 39
    1790:	fd 4f       	sbci	r31, 0xFD	; 253
    1792:	90 81       	ld	r25, Z
    1794:	94 17       	cp	r25, r20
    1796:	89 f0       	breq	.+34     	; 0x17ba <serialBleFind+0x94>

 int serialBleFind(unsigned char c) {
	 int i;
	 unsigned char bufferLen = (bleInBufferEndIndex-bleInBufferStartIndex+BLE_BUFFER_SIZE)%BLE_BUFFER_SIZE;
	 if (bufferLen > 0) {
		 for (i=0U; i<bufferLen; i++) {
    1798:	2f 5f       	subi	r18, 0xFF	; 255
    179a:	3f 4f       	sbci	r19, 0xFF	; 255
    179c:	2c 17       	cp	r18, r28
    179e:	3d 07       	cpc	r19, r29
    17a0:	61 f7       	brne	.-40     	; 0x177a <serialBleFind+0x54>
			 if (bleBuffer[(bleInBufferStartIndex+i)%BLE_BUFFER_SIZE] == c)
			 return i;
		 }
	 }
	 return -1;
    17a2:	8f ef       	ldi	r24, 0xFF	; 255
    17a4:	9f ef       	ldi	r25, 0xFF	; 255
    17a6:	0b c0       	rjmp	.+22     	; 0x17be <serialBleFind+0x98>
    17a8:	8f ef       	ldi	r24, 0xFF	; 255
    17aa:	9f ef       	ldi	r25, 0xFF	; 255
    17ac:	08 c0       	rjmp	.+16     	; 0x17be <serialBleFind+0x98>
    17ae:	8f ef       	ldi	r24, 0xFF	; 255
    17b0:	9f ef       	ldi	r25, 0xFF	; 255
    17b2:	05 c0       	rjmp	.+10     	; 0x17be <serialBleFind+0x98>
 int serialBleFind(unsigned char c) {
	 int i;
	 unsigned char bufferLen = (bleInBufferEndIndex-bleInBufferStartIndex+BLE_BUFFER_SIZE)%BLE_BUFFER_SIZE;
	 if (bufferLen > 0) {
		 for (i=0U; i<bufferLen; i++) {
			 if (bleBuffer[(bleInBufferStartIndex+i)%BLE_BUFFER_SIZE] == c)
    17b4:	80 e0       	ldi	r24, 0x00	; 0
    17b6:	90 e0       	ldi	r25, 0x00	; 0
    17b8:	02 c0       	rjmp	.+4      	; 0x17be <serialBleFind+0x98>

 int serialBleFind(unsigned char c) {
	 int i;
	 unsigned char bufferLen = (bleInBufferEndIndex-bleInBufferStartIndex+BLE_BUFFER_SIZE)%BLE_BUFFER_SIZE;
	 if (bufferLen > 0) {
		 for (i=0U; i<bufferLen; i++) {
    17ba:	82 2f       	mov	r24, r18
    17bc:	93 2f       	mov	r25, r19
			 if (bleBuffer[(bleInBufferStartIndex+i)%BLE_BUFFER_SIZE] == c)
			 return i;
		 }
	 }
	 return -1;
 }
    17be:	df 91       	pop	r29
    17c0:	cf 91       	pop	r28
    17c2:	1f 91       	pop	r17
    17c4:	0f 91       	pop	r16
    17c6:	08 95       	ret

000017c8 <bleBufferReadUntil>:
 
  void bleBufferReadUntil(unsigned char stopChar, unsigned char *buffer) {
    17c8:	0f 93       	push	r16
    17ca:	1f 93       	push	r17
    17cc:	cf 93       	push	r28
    17ce:	c8 2f       	mov	r28, r24
    17d0:	8b 01       	movw	r16, r22
	  unsigned char i = 0;
	  while (i == 0)
	  i = serialBleFind(stopChar) + 1;
    17d2:	8c 2f       	mov	r24, r28
    17d4:	0e 94 93 0b 	call	0x1726	; 0x1726 <serialBleFind>
    17d8:	8f 5f       	subi	r24, 0xFF	; 255
	 return -1;
 }
 
  void bleBufferReadUntil(unsigned char stopChar, unsigned char *buffer) {
	  unsigned char i = 0;
	  while (i == 0)
    17da:	d9 f3       	breq	.-10     	; 0x17d2 <bleBufferReadUntil+0xa>
	  i = serialBleFind(stopChar) + 1;
	  bleBufferRead(i, buffer);
    17dc:	b8 01       	movw	r22, r16
    17de:	90 e0       	ldi	r25, 0x00	; 0
    17e0:	0e 94 1e 0b 	call	0x163c	; 0x163c <bleBufferRead>
	  return;
    17e4:	cf 91       	pop	r28
    17e6:	1f 91       	pop	r17
    17e8:	0f 91       	pop	r16
    17ea:	08 95       	ret

000017ec <relayTurnOn>:
		relayTurnOff();
	}
 }

 void relayTurnOn() {
	PORTB |= (1<<SSR_PIN);
    17ec:	28 9a       	sbi	0x05, 0	; 5
    17ee:	08 95       	ret

000017f0 <relayTurnOff>:
 }

 void relayTurnOff() {
	PORTB &= ~(1<<SSR_PIN);
    17f0:	28 98       	cbi	0x05, 0	; 5
    17f2:	08 95       	ret

000017f4 <relayOnOff>:
	DDRB |= (1<<SSR_PIN);
	relayOnOff(onOff);
 }

 void relayOnOff(unsigned char onOff) {
	if (onOff) {
    17f4:	88 23       	and	r24, r24
    17f6:	19 f0       	breq	.+6      	; 0x17fe <relayOnOff+0xa>
		relayTurnOn();
    17f8:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <relayTurnOn>
    17fc:	08 95       	ret
	}
	else {
		relayTurnOff();
    17fe:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <relayTurnOff>
    1802:	08 95       	ret

00001804 <initializeRelay>:

 #include "ssr.h"
 #include <avr/io.h>

 void initializeRelay(unsigned char onOff) {
	DDRB |= (1<<SSR_PIN);
    1804:	20 9a       	sbi	0x04, 0	; 4
	relayOnOff(onOff);
    1806:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <relayOnOff>
    180a:	08 95       	ret

0000180c <__subsf3>:
    180c:	50 58       	subi	r21, 0x80	; 128

0000180e <__addsf3>:
    180e:	bb 27       	eor	r27, r27
    1810:	aa 27       	eor	r26, r26
    1812:	0e 94 1e 0c 	call	0x183c	; 0x183c <__addsf3x>
    1816:	0c 94 62 0d 	jmp	0x1ac4	; 0x1ac4 <__fp_round>
    181a:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <__fp_pscA>
    181e:	38 f0       	brcs	.+14     	; 0x182e <__addsf3+0x20>
    1820:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <__fp_pscB>
    1824:	20 f0       	brcs	.+8      	; 0x182e <__addsf3+0x20>
    1826:	39 f4       	brne	.+14     	; 0x1836 <__addsf3+0x28>
    1828:	9f 3f       	cpi	r25, 0xFF	; 255
    182a:	19 f4       	brne	.+6      	; 0x1832 <__addsf3+0x24>
    182c:	26 f4       	brtc	.+8      	; 0x1836 <__addsf3+0x28>
    182e:	0c 94 51 0d 	jmp	0x1aa2	; 0x1aa2 <__fp_nan>
    1832:	0e f4       	brtc	.+2      	; 0x1836 <__addsf3+0x28>
    1834:	e0 95       	com	r30
    1836:	e7 fb       	bst	r30, 7
    1838:	0c 94 4b 0d 	jmp	0x1a96	; 0x1a96 <__fp_inf>

0000183c <__addsf3x>:
    183c:	e9 2f       	mov	r30, r25
    183e:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <__fp_split3>
    1842:	58 f3       	brcs	.-42     	; 0x181a <__addsf3+0xc>
    1844:	ba 17       	cp	r27, r26
    1846:	62 07       	cpc	r22, r18
    1848:	73 07       	cpc	r23, r19
    184a:	84 07       	cpc	r24, r20
    184c:	95 07       	cpc	r25, r21
    184e:	20 f0       	brcs	.+8      	; 0x1858 <__addsf3x+0x1c>
    1850:	79 f4       	brne	.+30     	; 0x1870 <__addsf3x+0x34>
    1852:	a6 f5       	brtc	.+104    	; 0x18bc <__addsf3x+0x80>
    1854:	0c 94 95 0d 	jmp	0x1b2a	; 0x1b2a <__fp_zero>
    1858:	0e f4       	brtc	.+2      	; 0x185c <__addsf3x+0x20>
    185a:	e0 95       	com	r30
    185c:	0b 2e       	mov	r0, r27
    185e:	ba 2f       	mov	r27, r26
    1860:	a0 2d       	mov	r26, r0
    1862:	0b 01       	movw	r0, r22
    1864:	b9 01       	movw	r22, r18
    1866:	90 01       	movw	r18, r0
    1868:	0c 01       	movw	r0, r24
    186a:	ca 01       	movw	r24, r20
    186c:	a0 01       	movw	r20, r0
    186e:	11 24       	eor	r1, r1
    1870:	ff 27       	eor	r31, r31
    1872:	59 1b       	sub	r21, r25
    1874:	99 f0       	breq	.+38     	; 0x189c <__addsf3x+0x60>
    1876:	59 3f       	cpi	r21, 0xF9	; 249
    1878:	50 f4       	brcc	.+20     	; 0x188e <__addsf3x+0x52>
    187a:	50 3e       	cpi	r21, 0xE0	; 224
    187c:	68 f1       	brcs	.+90     	; 0x18d8 <__addsf3x+0x9c>
    187e:	1a 16       	cp	r1, r26
    1880:	f0 40       	sbci	r31, 0x00	; 0
    1882:	a2 2f       	mov	r26, r18
    1884:	23 2f       	mov	r18, r19
    1886:	34 2f       	mov	r19, r20
    1888:	44 27       	eor	r20, r20
    188a:	58 5f       	subi	r21, 0xF8	; 248
    188c:	f3 cf       	rjmp	.-26     	; 0x1874 <__addsf3x+0x38>
    188e:	46 95       	lsr	r20
    1890:	37 95       	ror	r19
    1892:	27 95       	ror	r18
    1894:	a7 95       	ror	r26
    1896:	f0 40       	sbci	r31, 0x00	; 0
    1898:	53 95       	inc	r21
    189a:	c9 f7       	brne	.-14     	; 0x188e <__addsf3x+0x52>
    189c:	7e f4       	brtc	.+30     	; 0x18bc <__addsf3x+0x80>
    189e:	1f 16       	cp	r1, r31
    18a0:	ba 0b       	sbc	r27, r26
    18a2:	62 0b       	sbc	r22, r18
    18a4:	73 0b       	sbc	r23, r19
    18a6:	84 0b       	sbc	r24, r20
    18a8:	ba f0       	brmi	.+46     	; 0x18d8 <__addsf3x+0x9c>
    18aa:	91 50       	subi	r25, 0x01	; 1
    18ac:	a1 f0       	breq	.+40     	; 0x18d6 <__addsf3x+0x9a>
    18ae:	ff 0f       	add	r31, r31
    18b0:	bb 1f       	adc	r27, r27
    18b2:	66 1f       	adc	r22, r22
    18b4:	77 1f       	adc	r23, r23
    18b6:	88 1f       	adc	r24, r24
    18b8:	c2 f7       	brpl	.-16     	; 0x18aa <__addsf3x+0x6e>
    18ba:	0e c0       	rjmp	.+28     	; 0x18d8 <__addsf3x+0x9c>
    18bc:	ba 0f       	add	r27, r26
    18be:	62 1f       	adc	r22, r18
    18c0:	73 1f       	adc	r23, r19
    18c2:	84 1f       	adc	r24, r20
    18c4:	48 f4       	brcc	.+18     	; 0x18d8 <__addsf3x+0x9c>
    18c6:	87 95       	ror	r24
    18c8:	77 95       	ror	r23
    18ca:	67 95       	ror	r22
    18cc:	b7 95       	ror	r27
    18ce:	f7 95       	ror	r31
    18d0:	9e 3f       	cpi	r25, 0xFE	; 254
    18d2:	08 f0       	brcs	.+2      	; 0x18d6 <__addsf3x+0x9a>
    18d4:	b0 cf       	rjmp	.-160    	; 0x1836 <__addsf3+0x28>
    18d6:	93 95       	inc	r25
    18d8:	88 0f       	add	r24, r24
    18da:	08 f0       	brcs	.+2      	; 0x18de <__addsf3x+0xa2>
    18dc:	99 27       	eor	r25, r25
    18de:	ee 0f       	add	r30, r30
    18e0:	97 95       	ror	r25
    18e2:	87 95       	ror	r24
    18e4:	08 95       	ret

000018e6 <__cmpsf2>:
    18e6:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <__fp_cmp>
    18ea:	08 f4       	brcc	.+2      	; 0x18ee <__cmpsf2+0x8>
    18ec:	81 e0       	ldi	r24, 0x01	; 1
    18ee:	08 95       	ret

000018f0 <__divsf3>:
    18f0:	0e 94 8c 0c 	call	0x1918	; 0x1918 <__divsf3x>
    18f4:	0c 94 62 0d 	jmp	0x1ac4	; 0x1ac4 <__fp_round>
    18f8:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <__fp_pscB>
    18fc:	58 f0       	brcs	.+22     	; 0x1914 <__divsf3+0x24>
    18fe:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <__fp_pscA>
    1902:	40 f0       	brcs	.+16     	; 0x1914 <__divsf3+0x24>
    1904:	29 f4       	brne	.+10     	; 0x1910 <__divsf3+0x20>
    1906:	5f 3f       	cpi	r21, 0xFF	; 255
    1908:	29 f0       	breq	.+10     	; 0x1914 <__divsf3+0x24>
    190a:	0c 94 4b 0d 	jmp	0x1a96	; 0x1a96 <__fp_inf>
    190e:	51 11       	cpse	r21, r1
    1910:	0c 94 96 0d 	jmp	0x1b2c	; 0x1b2c <__fp_szero>
    1914:	0c 94 51 0d 	jmp	0x1aa2	; 0x1aa2 <__fp_nan>

00001918 <__divsf3x>:
    1918:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <__fp_split3>
    191c:	68 f3       	brcs	.-38     	; 0x18f8 <__divsf3+0x8>

0000191e <__divsf3_pse>:
    191e:	99 23       	and	r25, r25
    1920:	b1 f3       	breq	.-20     	; 0x190e <__divsf3+0x1e>
    1922:	55 23       	and	r21, r21
    1924:	91 f3       	breq	.-28     	; 0x190a <__divsf3+0x1a>
    1926:	95 1b       	sub	r25, r21
    1928:	55 0b       	sbc	r21, r21
    192a:	bb 27       	eor	r27, r27
    192c:	aa 27       	eor	r26, r26
    192e:	62 17       	cp	r22, r18
    1930:	73 07       	cpc	r23, r19
    1932:	84 07       	cpc	r24, r20
    1934:	38 f0       	brcs	.+14     	; 0x1944 <__divsf3_pse+0x26>
    1936:	9f 5f       	subi	r25, 0xFF	; 255
    1938:	5f 4f       	sbci	r21, 0xFF	; 255
    193a:	22 0f       	add	r18, r18
    193c:	33 1f       	adc	r19, r19
    193e:	44 1f       	adc	r20, r20
    1940:	aa 1f       	adc	r26, r26
    1942:	a9 f3       	breq	.-22     	; 0x192e <__divsf3_pse+0x10>
    1944:	35 d0       	rcall	.+106    	; 0x19b0 <__divsf3_pse+0x92>
    1946:	0e 2e       	mov	r0, r30
    1948:	3a f0       	brmi	.+14     	; 0x1958 <__divsf3_pse+0x3a>
    194a:	e0 e8       	ldi	r30, 0x80	; 128
    194c:	32 d0       	rcall	.+100    	; 0x19b2 <__divsf3_pse+0x94>
    194e:	91 50       	subi	r25, 0x01	; 1
    1950:	50 40       	sbci	r21, 0x00	; 0
    1952:	e6 95       	lsr	r30
    1954:	00 1c       	adc	r0, r0
    1956:	ca f7       	brpl	.-14     	; 0x194a <__divsf3_pse+0x2c>
    1958:	2b d0       	rcall	.+86     	; 0x19b0 <__divsf3_pse+0x92>
    195a:	fe 2f       	mov	r31, r30
    195c:	29 d0       	rcall	.+82     	; 0x19b0 <__divsf3_pse+0x92>
    195e:	66 0f       	add	r22, r22
    1960:	77 1f       	adc	r23, r23
    1962:	88 1f       	adc	r24, r24
    1964:	bb 1f       	adc	r27, r27
    1966:	26 17       	cp	r18, r22
    1968:	37 07       	cpc	r19, r23
    196a:	48 07       	cpc	r20, r24
    196c:	ab 07       	cpc	r26, r27
    196e:	b0 e8       	ldi	r27, 0x80	; 128
    1970:	09 f0       	breq	.+2      	; 0x1974 <__divsf3_pse+0x56>
    1972:	bb 0b       	sbc	r27, r27
    1974:	80 2d       	mov	r24, r0
    1976:	bf 01       	movw	r22, r30
    1978:	ff 27       	eor	r31, r31
    197a:	93 58       	subi	r25, 0x83	; 131
    197c:	5f 4f       	sbci	r21, 0xFF	; 255
    197e:	3a f0       	brmi	.+14     	; 0x198e <__divsf3_pse+0x70>
    1980:	9e 3f       	cpi	r25, 0xFE	; 254
    1982:	51 05       	cpc	r21, r1
    1984:	78 f0       	brcs	.+30     	; 0x19a4 <__divsf3_pse+0x86>
    1986:	0c 94 4b 0d 	jmp	0x1a96	; 0x1a96 <__fp_inf>
    198a:	0c 94 96 0d 	jmp	0x1b2c	; 0x1b2c <__fp_szero>
    198e:	5f 3f       	cpi	r21, 0xFF	; 255
    1990:	e4 f3       	brlt	.-8      	; 0x198a <__divsf3_pse+0x6c>
    1992:	98 3e       	cpi	r25, 0xE8	; 232
    1994:	d4 f3       	brlt	.-12     	; 0x198a <__divsf3_pse+0x6c>
    1996:	86 95       	lsr	r24
    1998:	77 95       	ror	r23
    199a:	67 95       	ror	r22
    199c:	b7 95       	ror	r27
    199e:	f7 95       	ror	r31
    19a0:	9f 5f       	subi	r25, 0xFF	; 255
    19a2:	c9 f7       	brne	.-14     	; 0x1996 <__divsf3_pse+0x78>
    19a4:	88 0f       	add	r24, r24
    19a6:	91 1d       	adc	r25, r1
    19a8:	96 95       	lsr	r25
    19aa:	87 95       	ror	r24
    19ac:	97 f9       	bld	r25, 7
    19ae:	08 95       	ret
    19b0:	e1 e0       	ldi	r30, 0x01	; 1
    19b2:	66 0f       	add	r22, r22
    19b4:	77 1f       	adc	r23, r23
    19b6:	88 1f       	adc	r24, r24
    19b8:	bb 1f       	adc	r27, r27
    19ba:	62 17       	cp	r22, r18
    19bc:	73 07       	cpc	r23, r19
    19be:	84 07       	cpc	r24, r20
    19c0:	ba 07       	cpc	r27, r26
    19c2:	20 f0       	brcs	.+8      	; 0x19cc <__divsf3_pse+0xae>
    19c4:	62 1b       	sub	r22, r18
    19c6:	73 0b       	sbc	r23, r19
    19c8:	84 0b       	sbc	r24, r20
    19ca:	ba 0b       	sbc	r27, r26
    19cc:	ee 1f       	adc	r30, r30
    19ce:	88 f7       	brcc	.-30     	; 0x19b2 <__divsf3_pse+0x94>
    19d0:	e0 95       	com	r30
    19d2:	08 95       	ret

000019d4 <__floatunsisf>:
    19d4:	e8 94       	clt
    19d6:	09 c0       	rjmp	.+18     	; 0x19ea <__floatsisf+0x12>

000019d8 <__floatsisf>:
    19d8:	97 fb       	bst	r25, 7
    19da:	3e f4       	brtc	.+14     	; 0x19ea <__floatsisf+0x12>
    19dc:	90 95       	com	r25
    19de:	80 95       	com	r24
    19e0:	70 95       	com	r23
    19e2:	61 95       	neg	r22
    19e4:	7f 4f       	sbci	r23, 0xFF	; 255
    19e6:	8f 4f       	sbci	r24, 0xFF	; 255
    19e8:	9f 4f       	sbci	r25, 0xFF	; 255
    19ea:	99 23       	and	r25, r25
    19ec:	a9 f0       	breq	.+42     	; 0x1a18 <__floatsisf+0x40>
    19ee:	f9 2f       	mov	r31, r25
    19f0:	96 e9       	ldi	r25, 0x96	; 150
    19f2:	bb 27       	eor	r27, r27
    19f4:	93 95       	inc	r25
    19f6:	f6 95       	lsr	r31
    19f8:	87 95       	ror	r24
    19fa:	77 95       	ror	r23
    19fc:	67 95       	ror	r22
    19fe:	b7 95       	ror	r27
    1a00:	f1 11       	cpse	r31, r1
    1a02:	f8 cf       	rjmp	.-16     	; 0x19f4 <__floatsisf+0x1c>
    1a04:	fa f4       	brpl	.+62     	; 0x1a44 <__floatsisf+0x6c>
    1a06:	bb 0f       	add	r27, r27
    1a08:	11 f4       	brne	.+4      	; 0x1a0e <__floatsisf+0x36>
    1a0a:	60 ff       	sbrs	r22, 0
    1a0c:	1b c0       	rjmp	.+54     	; 0x1a44 <__floatsisf+0x6c>
    1a0e:	6f 5f       	subi	r22, 0xFF	; 255
    1a10:	7f 4f       	sbci	r23, 0xFF	; 255
    1a12:	8f 4f       	sbci	r24, 0xFF	; 255
    1a14:	9f 4f       	sbci	r25, 0xFF	; 255
    1a16:	16 c0       	rjmp	.+44     	; 0x1a44 <__floatsisf+0x6c>
    1a18:	88 23       	and	r24, r24
    1a1a:	11 f0       	breq	.+4      	; 0x1a20 <__floatsisf+0x48>
    1a1c:	96 e9       	ldi	r25, 0x96	; 150
    1a1e:	11 c0       	rjmp	.+34     	; 0x1a42 <__floatsisf+0x6a>
    1a20:	77 23       	and	r23, r23
    1a22:	21 f0       	breq	.+8      	; 0x1a2c <__floatsisf+0x54>
    1a24:	9e e8       	ldi	r25, 0x8E	; 142
    1a26:	87 2f       	mov	r24, r23
    1a28:	76 2f       	mov	r23, r22
    1a2a:	05 c0       	rjmp	.+10     	; 0x1a36 <__floatsisf+0x5e>
    1a2c:	66 23       	and	r22, r22
    1a2e:	71 f0       	breq	.+28     	; 0x1a4c <__floatsisf+0x74>
    1a30:	96 e8       	ldi	r25, 0x86	; 134
    1a32:	86 2f       	mov	r24, r22
    1a34:	70 e0       	ldi	r23, 0x00	; 0
    1a36:	60 e0       	ldi	r22, 0x00	; 0
    1a38:	2a f0       	brmi	.+10     	; 0x1a44 <__floatsisf+0x6c>
    1a3a:	9a 95       	dec	r25
    1a3c:	66 0f       	add	r22, r22
    1a3e:	77 1f       	adc	r23, r23
    1a40:	88 1f       	adc	r24, r24
    1a42:	da f7       	brpl	.-10     	; 0x1a3a <__floatsisf+0x62>
    1a44:	88 0f       	add	r24, r24
    1a46:	96 95       	lsr	r25
    1a48:	87 95       	ror	r24
    1a4a:	97 f9       	bld	r25, 7
    1a4c:	08 95       	ret

00001a4e <__fp_cmp>:
    1a4e:	99 0f       	add	r25, r25
    1a50:	00 08       	sbc	r0, r0
    1a52:	55 0f       	add	r21, r21
    1a54:	aa 0b       	sbc	r26, r26
    1a56:	e0 e8       	ldi	r30, 0x80	; 128
    1a58:	fe ef       	ldi	r31, 0xFE	; 254
    1a5a:	16 16       	cp	r1, r22
    1a5c:	17 06       	cpc	r1, r23
    1a5e:	e8 07       	cpc	r30, r24
    1a60:	f9 07       	cpc	r31, r25
    1a62:	c0 f0       	brcs	.+48     	; 0x1a94 <__fp_cmp+0x46>
    1a64:	12 16       	cp	r1, r18
    1a66:	13 06       	cpc	r1, r19
    1a68:	e4 07       	cpc	r30, r20
    1a6a:	f5 07       	cpc	r31, r21
    1a6c:	98 f0       	brcs	.+38     	; 0x1a94 <__fp_cmp+0x46>
    1a6e:	62 1b       	sub	r22, r18
    1a70:	73 0b       	sbc	r23, r19
    1a72:	84 0b       	sbc	r24, r20
    1a74:	95 0b       	sbc	r25, r21
    1a76:	39 f4       	brne	.+14     	; 0x1a86 <__fp_cmp+0x38>
    1a78:	0a 26       	eor	r0, r26
    1a7a:	61 f0       	breq	.+24     	; 0x1a94 <__fp_cmp+0x46>
    1a7c:	23 2b       	or	r18, r19
    1a7e:	24 2b       	or	r18, r20
    1a80:	25 2b       	or	r18, r21
    1a82:	21 f4       	brne	.+8      	; 0x1a8c <__fp_cmp+0x3e>
    1a84:	08 95       	ret
    1a86:	0a 26       	eor	r0, r26
    1a88:	09 f4       	brne	.+2      	; 0x1a8c <__fp_cmp+0x3e>
    1a8a:	a1 40       	sbci	r26, 0x01	; 1
    1a8c:	a6 95       	lsr	r26
    1a8e:	8f ef       	ldi	r24, 0xFF	; 255
    1a90:	81 1d       	adc	r24, r1
    1a92:	81 1d       	adc	r24, r1
    1a94:	08 95       	ret

00001a96 <__fp_inf>:
    1a96:	97 f9       	bld	r25, 7
    1a98:	9f 67       	ori	r25, 0x7F	; 127
    1a9a:	80 e8       	ldi	r24, 0x80	; 128
    1a9c:	70 e0       	ldi	r23, 0x00	; 0
    1a9e:	60 e0       	ldi	r22, 0x00	; 0
    1aa0:	08 95       	ret

00001aa2 <__fp_nan>:
    1aa2:	9f ef       	ldi	r25, 0xFF	; 255
    1aa4:	80 ec       	ldi	r24, 0xC0	; 192
    1aa6:	08 95       	ret

00001aa8 <__fp_pscA>:
    1aa8:	00 24       	eor	r0, r0
    1aaa:	0a 94       	dec	r0
    1aac:	16 16       	cp	r1, r22
    1aae:	17 06       	cpc	r1, r23
    1ab0:	18 06       	cpc	r1, r24
    1ab2:	09 06       	cpc	r0, r25
    1ab4:	08 95       	ret

00001ab6 <__fp_pscB>:
    1ab6:	00 24       	eor	r0, r0
    1ab8:	0a 94       	dec	r0
    1aba:	12 16       	cp	r1, r18
    1abc:	13 06       	cpc	r1, r19
    1abe:	14 06       	cpc	r1, r20
    1ac0:	05 06       	cpc	r0, r21
    1ac2:	08 95       	ret

00001ac4 <__fp_round>:
    1ac4:	09 2e       	mov	r0, r25
    1ac6:	03 94       	inc	r0
    1ac8:	00 0c       	add	r0, r0
    1aca:	11 f4       	brne	.+4      	; 0x1ad0 <__fp_round+0xc>
    1acc:	88 23       	and	r24, r24
    1ace:	52 f0       	brmi	.+20     	; 0x1ae4 <__fp_round+0x20>
    1ad0:	bb 0f       	add	r27, r27
    1ad2:	40 f4       	brcc	.+16     	; 0x1ae4 <__fp_round+0x20>
    1ad4:	bf 2b       	or	r27, r31
    1ad6:	11 f4       	brne	.+4      	; 0x1adc <__fp_round+0x18>
    1ad8:	60 ff       	sbrs	r22, 0
    1ada:	04 c0       	rjmp	.+8      	; 0x1ae4 <__fp_round+0x20>
    1adc:	6f 5f       	subi	r22, 0xFF	; 255
    1ade:	7f 4f       	sbci	r23, 0xFF	; 255
    1ae0:	8f 4f       	sbci	r24, 0xFF	; 255
    1ae2:	9f 4f       	sbci	r25, 0xFF	; 255
    1ae4:	08 95       	ret

00001ae6 <__fp_split3>:
    1ae6:	57 fd       	sbrc	r21, 7
    1ae8:	90 58       	subi	r25, 0x80	; 128
    1aea:	44 0f       	add	r20, r20
    1aec:	55 1f       	adc	r21, r21
    1aee:	59 f0       	breq	.+22     	; 0x1b06 <__fp_splitA+0x10>
    1af0:	5f 3f       	cpi	r21, 0xFF	; 255
    1af2:	71 f0       	breq	.+28     	; 0x1b10 <__fp_splitA+0x1a>
    1af4:	47 95       	ror	r20

00001af6 <__fp_splitA>:
    1af6:	88 0f       	add	r24, r24
    1af8:	97 fb       	bst	r25, 7
    1afa:	99 1f       	adc	r25, r25
    1afc:	61 f0       	breq	.+24     	; 0x1b16 <__fp_splitA+0x20>
    1afe:	9f 3f       	cpi	r25, 0xFF	; 255
    1b00:	79 f0       	breq	.+30     	; 0x1b20 <__fp_splitA+0x2a>
    1b02:	87 95       	ror	r24
    1b04:	08 95       	ret
    1b06:	12 16       	cp	r1, r18
    1b08:	13 06       	cpc	r1, r19
    1b0a:	14 06       	cpc	r1, r20
    1b0c:	55 1f       	adc	r21, r21
    1b0e:	f2 cf       	rjmp	.-28     	; 0x1af4 <__fp_split3+0xe>
    1b10:	46 95       	lsr	r20
    1b12:	f1 df       	rcall	.-30     	; 0x1af6 <__fp_splitA>
    1b14:	08 c0       	rjmp	.+16     	; 0x1b26 <__fp_splitA+0x30>
    1b16:	16 16       	cp	r1, r22
    1b18:	17 06       	cpc	r1, r23
    1b1a:	18 06       	cpc	r1, r24
    1b1c:	99 1f       	adc	r25, r25
    1b1e:	f1 cf       	rjmp	.-30     	; 0x1b02 <__fp_splitA+0xc>
    1b20:	86 95       	lsr	r24
    1b22:	71 05       	cpc	r23, r1
    1b24:	61 05       	cpc	r22, r1
    1b26:	08 94       	sec
    1b28:	08 95       	ret

00001b2a <__fp_zero>:
    1b2a:	e8 94       	clt

00001b2c <__fp_szero>:
    1b2c:	bb 27       	eor	r27, r27
    1b2e:	66 27       	eor	r22, r22
    1b30:	77 27       	eor	r23, r23
    1b32:	cb 01       	movw	r24, r22
    1b34:	97 f9       	bld	r25, 7
    1b36:	08 95       	ret

00001b38 <__gesf2>:
    1b38:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <__fp_cmp>
    1b3c:	08 f4       	brcc	.+2      	; 0x1b40 <__gesf2+0x8>
    1b3e:	8f ef       	ldi	r24, 0xFF	; 255
    1b40:	08 95       	ret

00001b42 <__mulsf3>:
    1b42:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <__mulsf3x>
    1b46:	0c 94 62 0d 	jmp	0x1ac4	; 0x1ac4 <__fp_round>
    1b4a:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <__fp_pscA>
    1b4e:	38 f0       	brcs	.+14     	; 0x1b5e <__mulsf3+0x1c>
    1b50:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <__fp_pscB>
    1b54:	20 f0       	brcs	.+8      	; 0x1b5e <__mulsf3+0x1c>
    1b56:	95 23       	and	r25, r21
    1b58:	11 f0       	breq	.+4      	; 0x1b5e <__mulsf3+0x1c>
    1b5a:	0c 94 4b 0d 	jmp	0x1a96	; 0x1a96 <__fp_inf>
    1b5e:	0c 94 51 0d 	jmp	0x1aa2	; 0x1aa2 <__fp_nan>
    1b62:	11 24       	eor	r1, r1
    1b64:	0c 94 96 0d 	jmp	0x1b2c	; 0x1b2c <__fp_szero>

00001b68 <__mulsf3x>:
    1b68:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <__fp_split3>
    1b6c:	70 f3       	brcs	.-36     	; 0x1b4a <__mulsf3+0x8>

00001b6e <__mulsf3_pse>:
    1b6e:	95 9f       	mul	r25, r21
    1b70:	c1 f3       	breq	.-16     	; 0x1b62 <__mulsf3+0x20>
    1b72:	95 0f       	add	r25, r21
    1b74:	50 e0       	ldi	r21, 0x00	; 0
    1b76:	55 1f       	adc	r21, r21
    1b78:	62 9f       	mul	r22, r18
    1b7a:	f0 01       	movw	r30, r0
    1b7c:	72 9f       	mul	r23, r18
    1b7e:	bb 27       	eor	r27, r27
    1b80:	f0 0d       	add	r31, r0
    1b82:	b1 1d       	adc	r27, r1
    1b84:	63 9f       	mul	r22, r19
    1b86:	aa 27       	eor	r26, r26
    1b88:	f0 0d       	add	r31, r0
    1b8a:	b1 1d       	adc	r27, r1
    1b8c:	aa 1f       	adc	r26, r26
    1b8e:	64 9f       	mul	r22, r20
    1b90:	66 27       	eor	r22, r22
    1b92:	b0 0d       	add	r27, r0
    1b94:	a1 1d       	adc	r26, r1
    1b96:	66 1f       	adc	r22, r22
    1b98:	82 9f       	mul	r24, r18
    1b9a:	22 27       	eor	r18, r18
    1b9c:	b0 0d       	add	r27, r0
    1b9e:	a1 1d       	adc	r26, r1
    1ba0:	62 1f       	adc	r22, r18
    1ba2:	73 9f       	mul	r23, r19
    1ba4:	b0 0d       	add	r27, r0
    1ba6:	a1 1d       	adc	r26, r1
    1ba8:	62 1f       	adc	r22, r18
    1baa:	83 9f       	mul	r24, r19
    1bac:	a0 0d       	add	r26, r0
    1bae:	61 1d       	adc	r22, r1
    1bb0:	22 1f       	adc	r18, r18
    1bb2:	74 9f       	mul	r23, r20
    1bb4:	33 27       	eor	r19, r19
    1bb6:	a0 0d       	add	r26, r0
    1bb8:	61 1d       	adc	r22, r1
    1bba:	23 1f       	adc	r18, r19
    1bbc:	84 9f       	mul	r24, r20
    1bbe:	60 0d       	add	r22, r0
    1bc0:	21 1d       	adc	r18, r1
    1bc2:	82 2f       	mov	r24, r18
    1bc4:	76 2f       	mov	r23, r22
    1bc6:	6a 2f       	mov	r22, r26
    1bc8:	11 24       	eor	r1, r1
    1bca:	9f 57       	subi	r25, 0x7F	; 127
    1bcc:	50 40       	sbci	r21, 0x00	; 0
    1bce:	9a f0       	brmi	.+38     	; 0x1bf6 <__mulsf3_pse+0x88>
    1bd0:	f1 f0       	breq	.+60     	; 0x1c0e <__mulsf3_pse+0xa0>
    1bd2:	88 23       	and	r24, r24
    1bd4:	4a f0       	brmi	.+18     	; 0x1be8 <__mulsf3_pse+0x7a>
    1bd6:	ee 0f       	add	r30, r30
    1bd8:	ff 1f       	adc	r31, r31
    1bda:	bb 1f       	adc	r27, r27
    1bdc:	66 1f       	adc	r22, r22
    1bde:	77 1f       	adc	r23, r23
    1be0:	88 1f       	adc	r24, r24
    1be2:	91 50       	subi	r25, 0x01	; 1
    1be4:	50 40       	sbci	r21, 0x00	; 0
    1be6:	a9 f7       	brne	.-22     	; 0x1bd2 <__mulsf3_pse+0x64>
    1be8:	9e 3f       	cpi	r25, 0xFE	; 254
    1bea:	51 05       	cpc	r21, r1
    1bec:	80 f0       	brcs	.+32     	; 0x1c0e <__mulsf3_pse+0xa0>
    1bee:	0c 94 4b 0d 	jmp	0x1a96	; 0x1a96 <__fp_inf>
    1bf2:	0c 94 96 0d 	jmp	0x1b2c	; 0x1b2c <__fp_szero>
    1bf6:	5f 3f       	cpi	r21, 0xFF	; 255
    1bf8:	e4 f3       	brlt	.-8      	; 0x1bf2 <__mulsf3_pse+0x84>
    1bfa:	98 3e       	cpi	r25, 0xE8	; 232
    1bfc:	d4 f3       	brlt	.-12     	; 0x1bf2 <__mulsf3_pse+0x84>
    1bfe:	86 95       	lsr	r24
    1c00:	77 95       	ror	r23
    1c02:	67 95       	ror	r22
    1c04:	b7 95       	ror	r27
    1c06:	f7 95       	ror	r31
    1c08:	e7 95       	ror	r30
    1c0a:	9f 5f       	subi	r25, 0xFF	; 255
    1c0c:	c1 f7       	brne	.-16     	; 0x1bfe <__mulsf3_pse+0x90>
    1c0e:	fe 2b       	or	r31, r30
    1c10:	88 0f       	add	r24, r24
    1c12:	91 1d       	adc	r25, r1
    1c14:	96 95       	lsr	r25
    1c16:	87 95       	ror	r24
    1c18:	97 f9       	bld	r25, 7
    1c1a:	08 95       	ret
    1c1c:	19 f4       	brne	.+6      	; 0x1c24 <__mulsf3_pse+0xb6>
    1c1e:	16 f4       	brtc	.+4      	; 0x1c24 <__mulsf3_pse+0xb6>
    1c20:	0c 94 51 0d 	jmp	0x1aa2	; 0x1aa2 <__fp_nan>
    1c24:	0c 94 59 0e 	jmp	0x1cb2	; 0x1cb2 <__fp_mpack>

00001c28 <sqrt>:
    1c28:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <__fp_splitA>
    1c2c:	b8 f3       	brcs	.-18     	; 0x1c1c <__mulsf3_pse+0xae>
    1c2e:	99 23       	and	r25, r25
    1c30:	c9 f3       	breq	.-14     	; 0x1c24 <__mulsf3_pse+0xb6>
    1c32:	b6 f3       	brts	.-20     	; 0x1c20 <__mulsf3_pse+0xb2>
    1c34:	9f 57       	subi	r25, 0x7F	; 127
    1c36:	55 0b       	sbc	r21, r21
    1c38:	87 ff       	sbrs	r24, 7
    1c3a:	0e 94 67 0e 	call	0x1cce	; 0x1cce <__fp_norm2>
    1c3e:	00 24       	eor	r0, r0
    1c40:	a0 e6       	ldi	r26, 0x60	; 96
    1c42:	40 ea       	ldi	r20, 0xA0	; 160
    1c44:	90 01       	movw	r18, r0
    1c46:	80 58       	subi	r24, 0x80	; 128
    1c48:	56 95       	lsr	r21
    1c4a:	97 95       	ror	r25
    1c4c:	28 f4       	brcc	.+10     	; 0x1c58 <sqrt+0x30>
    1c4e:	80 5c       	subi	r24, 0xC0	; 192
    1c50:	66 0f       	add	r22, r22
    1c52:	77 1f       	adc	r23, r23
    1c54:	88 1f       	adc	r24, r24
    1c56:	20 f0       	brcs	.+8      	; 0x1c60 <sqrt+0x38>
    1c58:	26 17       	cp	r18, r22
    1c5a:	37 07       	cpc	r19, r23
    1c5c:	48 07       	cpc	r20, r24
    1c5e:	30 f4       	brcc	.+12     	; 0x1c6c <sqrt+0x44>
    1c60:	62 1b       	sub	r22, r18
    1c62:	73 0b       	sbc	r23, r19
    1c64:	84 0b       	sbc	r24, r20
    1c66:	20 29       	or	r18, r0
    1c68:	31 29       	or	r19, r1
    1c6a:	4a 2b       	or	r20, r26
    1c6c:	a6 95       	lsr	r26
    1c6e:	17 94       	ror	r1
    1c70:	07 94       	ror	r0
    1c72:	20 25       	eor	r18, r0
    1c74:	31 25       	eor	r19, r1
    1c76:	4a 27       	eor	r20, r26
    1c78:	58 f7       	brcc	.-42     	; 0x1c50 <sqrt+0x28>
    1c7a:	66 0f       	add	r22, r22
    1c7c:	77 1f       	adc	r23, r23
    1c7e:	88 1f       	adc	r24, r24
    1c80:	20 f0       	brcs	.+8      	; 0x1c8a <sqrt+0x62>
    1c82:	26 17       	cp	r18, r22
    1c84:	37 07       	cpc	r19, r23
    1c86:	48 07       	cpc	r20, r24
    1c88:	30 f4       	brcc	.+12     	; 0x1c96 <sqrt+0x6e>
    1c8a:	62 0b       	sbc	r22, r18
    1c8c:	73 0b       	sbc	r23, r19
    1c8e:	84 0b       	sbc	r24, r20
    1c90:	20 0d       	add	r18, r0
    1c92:	31 1d       	adc	r19, r1
    1c94:	41 1d       	adc	r20, r1
    1c96:	a0 95       	com	r26
    1c98:	81 f7       	brne	.-32     	; 0x1c7a <sqrt+0x52>
    1c9a:	b9 01       	movw	r22, r18
    1c9c:	84 2f       	mov	r24, r20
    1c9e:	91 58       	subi	r25, 0x81	; 129
    1ca0:	88 0f       	add	r24, r24
    1ca2:	96 95       	lsr	r25
    1ca4:	87 95       	ror	r24
    1ca6:	08 95       	ret

00001ca8 <__unordsf2>:
    1ca8:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <__fp_cmp>
    1cac:	88 0b       	sbc	r24, r24
    1cae:	99 0b       	sbc	r25, r25
    1cb0:	08 95       	ret

00001cb2 <__fp_mpack>:
    1cb2:	9f 3f       	cpi	r25, 0xFF	; 255
    1cb4:	31 f0       	breq	.+12     	; 0x1cc2 <__fp_mpack_finite+0xc>

00001cb6 <__fp_mpack_finite>:
    1cb6:	91 50       	subi	r25, 0x01	; 1
    1cb8:	20 f4       	brcc	.+8      	; 0x1cc2 <__fp_mpack_finite+0xc>
    1cba:	87 95       	ror	r24
    1cbc:	77 95       	ror	r23
    1cbe:	67 95       	ror	r22
    1cc0:	b7 95       	ror	r27
    1cc2:	88 0f       	add	r24, r24
    1cc4:	91 1d       	adc	r25, r1
    1cc6:	96 95       	lsr	r25
    1cc8:	87 95       	ror	r24
    1cca:	97 f9       	bld	r25, 7
    1ccc:	08 95       	ret

00001cce <__fp_norm2>:
    1cce:	91 50       	subi	r25, 0x01	; 1
    1cd0:	50 40       	sbci	r21, 0x00	; 0
    1cd2:	66 0f       	add	r22, r22
    1cd4:	77 1f       	adc	r23, r23
    1cd6:	88 1f       	adc	r24, r24
    1cd8:	d2 f7       	brpl	.-12     	; 0x1cce <__fp_norm2>
    1cda:	08 95       	ret

00001cdc <__divmodhi4>:
    1cdc:	97 fb       	bst	r25, 7
    1cde:	07 2e       	mov	r0, r23
    1ce0:	16 f4       	brtc	.+4      	; 0x1ce6 <__divmodhi4+0xa>
    1ce2:	00 94       	com	r0
    1ce4:	07 d0       	rcall	.+14     	; 0x1cf4 <__divmodhi4_neg1>
    1ce6:	77 fd       	sbrc	r23, 7
    1ce8:	09 d0       	rcall	.+18     	; 0x1cfc <__divmodhi4_neg2>
    1cea:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <__udivmodhi4>
    1cee:	07 fc       	sbrc	r0, 7
    1cf0:	05 d0       	rcall	.+10     	; 0x1cfc <__divmodhi4_neg2>
    1cf2:	3e f4       	brtc	.+14     	; 0x1d02 <__divmodhi4_exit>

00001cf4 <__divmodhi4_neg1>:
    1cf4:	90 95       	com	r25
    1cf6:	81 95       	neg	r24
    1cf8:	9f 4f       	sbci	r25, 0xFF	; 255
    1cfa:	08 95       	ret

00001cfc <__divmodhi4_neg2>:
    1cfc:	70 95       	com	r23
    1cfe:	61 95       	neg	r22
    1d00:	7f 4f       	sbci	r23, 0xFF	; 255

00001d02 <__divmodhi4_exit>:
    1d02:	08 95       	ret

00001d04 <__umulhisi3>:
    1d04:	a2 9f       	mul	r26, r18
    1d06:	b0 01       	movw	r22, r0
    1d08:	b3 9f       	mul	r27, r19
    1d0a:	c0 01       	movw	r24, r0
    1d0c:	a3 9f       	mul	r26, r19
    1d0e:	70 0d       	add	r23, r0
    1d10:	81 1d       	adc	r24, r1
    1d12:	11 24       	eor	r1, r1
    1d14:	91 1d       	adc	r25, r1
    1d16:	b2 9f       	mul	r27, r18
    1d18:	70 0d       	add	r23, r0
    1d1a:	81 1d       	adc	r24, r1
    1d1c:	11 24       	eor	r1, r1
    1d1e:	91 1d       	adc	r25, r1
    1d20:	08 95       	ret

00001d22 <__udivmodhi4>:
    1d22:	aa 1b       	sub	r26, r26
    1d24:	bb 1b       	sub	r27, r27
    1d26:	51 e1       	ldi	r21, 0x11	; 17
    1d28:	07 c0       	rjmp	.+14     	; 0x1d38 <__udivmodhi4_ep>

00001d2a <__udivmodhi4_loop>:
    1d2a:	aa 1f       	adc	r26, r26
    1d2c:	bb 1f       	adc	r27, r27
    1d2e:	a6 17       	cp	r26, r22
    1d30:	b7 07       	cpc	r27, r23
    1d32:	10 f0       	brcs	.+4      	; 0x1d38 <__udivmodhi4_ep>
    1d34:	a6 1b       	sub	r26, r22
    1d36:	b7 0b       	sbc	r27, r23

00001d38 <__udivmodhi4_ep>:
    1d38:	88 1f       	adc	r24, r24
    1d3a:	99 1f       	adc	r25, r25
    1d3c:	5a 95       	dec	r21
    1d3e:	a9 f7       	brne	.-22     	; 0x1d2a <__udivmodhi4_loop>
    1d40:	80 95       	com	r24
    1d42:	90 95       	com	r25
    1d44:	bc 01       	movw	r22, r24
    1d46:	cd 01       	movw	r24, r26
    1d48:	08 95       	ret

00001d4a <strstr>:
    1d4a:	fb 01       	movw	r30, r22
    1d4c:	51 91       	ld	r21, Z+
    1d4e:	55 23       	and	r21, r21
    1d50:	a9 f0       	breq	.+42     	; 0x1d7c <strstr+0x32>
    1d52:	bf 01       	movw	r22, r30
    1d54:	dc 01       	movw	r26, r24
    1d56:	4d 91       	ld	r20, X+
    1d58:	45 17       	cp	r20, r21
    1d5a:	41 11       	cpse	r20, r1
    1d5c:	e1 f7       	brne	.-8      	; 0x1d56 <strstr+0xc>
    1d5e:	59 f4       	brne	.+22     	; 0x1d76 <strstr+0x2c>
    1d60:	cd 01       	movw	r24, r26
    1d62:	01 90       	ld	r0, Z+
    1d64:	00 20       	and	r0, r0
    1d66:	49 f0       	breq	.+18     	; 0x1d7a <strstr+0x30>
    1d68:	4d 91       	ld	r20, X+
    1d6a:	40 15       	cp	r20, r0
    1d6c:	41 11       	cpse	r20, r1
    1d6e:	c9 f3       	breq	.-14     	; 0x1d62 <strstr+0x18>
    1d70:	fb 01       	movw	r30, r22
    1d72:	41 11       	cpse	r20, r1
    1d74:	ef cf       	rjmp	.-34     	; 0x1d54 <strstr+0xa>
    1d76:	81 e0       	ldi	r24, 0x01	; 1
    1d78:	90 e0       	ldi	r25, 0x00	; 0
    1d7a:	01 97       	sbiw	r24, 0x01	; 1
    1d7c:	08 95       	ret

00001d7e <__ltoa_ncheck>:
    1d7e:	bb 27       	eor	r27, r27
    1d80:	2a 30       	cpi	r18, 0x0A	; 10
    1d82:	51 f4       	brne	.+20     	; 0x1d98 <__ltoa_ncheck+0x1a>
    1d84:	99 23       	and	r25, r25
    1d86:	42 f4       	brpl	.+16     	; 0x1d98 <__ltoa_ncheck+0x1a>
    1d88:	bd e2       	ldi	r27, 0x2D	; 45
    1d8a:	90 95       	com	r25
    1d8c:	80 95       	com	r24
    1d8e:	70 95       	com	r23
    1d90:	61 95       	neg	r22
    1d92:	7f 4f       	sbci	r23, 0xFF	; 255
    1d94:	8f 4f       	sbci	r24, 0xFF	; 255
    1d96:	9f 4f       	sbci	r25, 0xFF	; 255
    1d98:	0c 94 cf 0e 	jmp	0x1d9e	; 0x1d9e <__ultoa_common>

00001d9c <__ultoa_ncheck>:
    1d9c:	bb 27       	eor	r27, r27

00001d9e <__ultoa_common>:
    1d9e:	fa 01       	movw	r30, r20
    1da0:	a6 2f       	mov	r26, r22
    1da2:	62 17       	cp	r22, r18
    1da4:	71 05       	cpc	r23, r1
    1da6:	81 05       	cpc	r24, r1
    1da8:	91 05       	cpc	r25, r1
    1daa:	33 0b       	sbc	r19, r19
    1dac:	30 fb       	bst	r19, 0
    1dae:	66 f0       	brts	.+24     	; 0x1dc8 <__ultoa_common+0x2a>
    1db0:	aa 27       	eor	r26, r26
    1db2:	66 0f       	add	r22, r22
    1db4:	77 1f       	adc	r23, r23
    1db6:	88 1f       	adc	r24, r24
    1db8:	99 1f       	adc	r25, r25
    1dba:	aa 1f       	adc	r26, r26
    1dbc:	a2 17       	cp	r26, r18
    1dbe:	10 f0       	brcs	.+4      	; 0x1dc4 <__ultoa_common+0x26>
    1dc0:	a2 1b       	sub	r26, r18
    1dc2:	63 95       	inc	r22
    1dc4:	38 50       	subi	r19, 0x08	; 8
    1dc6:	a9 f7       	brne	.-22     	; 0x1db2 <__ultoa_common+0x14>
    1dc8:	a0 5d       	subi	r26, 0xD0	; 208
    1dca:	aa 33       	cpi	r26, 0x3A	; 58
    1dcc:	08 f0       	brcs	.+2      	; 0x1dd0 <__ultoa_common+0x32>
    1dce:	a9 5d       	subi	r26, 0xD9	; 217
    1dd0:	a1 93       	st	Z+, r26
    1dd2:	36 f7       	brtc	.-52     	; 0x1da0 <__ultoa_common+0x2>
    1dd4:	b1 11       	cpse	r27, r1
    1dd6:	b1 93       	st	Z+, r27
    1dd8:	10 82       	st	Z, r1
    1dda:	ca 01       	movw	r24, r20
    1ddc:	0c 94 0a 0f 	jmp	0x1e14	; 0x1e14 <strrev>

00001de0 <__utoa_ncheck>:
    1de0:	bb 27       	eor	r27, r27

00001de2 <__utoa_common>:
    1de2:	fb 01       	movw	r30, r22
    1de4:	55 27       	eor	r21, r21
    1de6:	aa 27       	eor	r26, r26
    1de8:	88 0f       	add	r24, r24
    1dea:	99 1f       	adc	r25, r25
    1dec:	aa 1f       	adc	r26, r26
    1dee:	a4 17       	cp	r26, r20
    1df0:	10 f0       	brcs	.+4      	; 0x1df6 <__utoa_common+0x14>
    1df2:	a4 1b       	sub	r26, r20
    1df4:	83 95       	inc	r24
    1df6:	50 51       	subi	r21, 0x10	; 16
    1df8:	b9 f7       	brne	.-18     	; 0x1de8 <__utoa_common+0x6>
    1dfa:	a0 5d       	subi	r26, 0xD0	; 208
    1dfc:	aa 33       	cpi	r26, 0x3A	; 58
    1dfe:	08 f0       	brcs	.+2      	; 0x1e02 <__utoa_common+0x20>
    1e00:	a9 5d       	subi	r26, 0xD9	; 217
    1e02:	a1 93       	st	Z+, r26
    1e04:	00 97       	sbiw	r24, 0x00	; 0
    1e06:	79 f7       	brne	.-34     	; 0x1de6 <__utoa_common+0x4>
    1e08:	b1 11       	cpse	r27, r1
    1e0a:	b1 93       	st	Z+, r27
    1e0c:	11 92       	st	Z+, r1
    1e0e:	cb 01       	movw	r24, r22
    1e10:	0c 94 0a 0f 	jmp	0x1e14	; 0x1e14 <strrev>

00001e14 <strrev>:
    1e14:	dc 01       	movw	r26, r24
    1e16:	fc 01       	movw	r30, r24
    1e18:	67 2f       	mov	r22, r23
    1e1a:	71 91       	ld	r23, Z+
    1e1c:	77 23       	and	r23, r23
    1e1e:	e1 f7       	brne	.-8      	; 0x1e18 <strrev+0x4>
    1e20:	32 97       	sbiw	r30, 0x02	; 2
    1e22:	04 c0       	rjmp	.+8      	; 0x1e2c <strrev+0x18>
    1e24:	7c 91       	ld	r23, X
    1e26:	6d 93       	st	X+, r22
    1e28:	70 83       	st	Z, r23
    1e2a:	62 91       	ld	r22, -Z
    1e2c:	ae 17       	cp	r26, r30
    1e2e:	bf 07       	cpc	r27, r31
    1e30:	c8 f3       	brcs	.-14     	; 0x1e24 <strrev+0x10>
    1e32:	08 95       	ret

00001e34 <eeprom_read_byte>:
    1e34:	f9 99       	sbic	0x1f, 1	; 31
    1e36:	fe cf       	rjmp	.-4      	; 0x1e34 <eeprom_read_byte>
    1e38:	92 bd       	out	0x22, r25	; 34
    1e3a:	81 bd       	out	0x21, r24	; 33
    1e3c:	f8 9a       	sbi	0x1f, 0	; 31
    1e3e:	99 27       	eor	r25, r25
    1e40:	80 b5       	in	r24, 0x20	; 32
    1e42:	08 95       	ret

00001e44 <eeprom_read_dword>:
    1e44:	a6 e1       	ldi	r26, 0x16	; 22
    1e46:	b0 e0       	ldi	r27, 0x00	; 0
    1e48:	44 e0       	ldi	r20, 0x04	; 4
    1e4a:	50 e0       	ldi	r21, 0x00	; 0
    1e4c:	0c 94 2a 0f 	jmp	0x1e54	; 0x1e54 <eeprom_read_blraw>

00001e50 <eeprom_read_block>:
    1e50:	dc 01       	movw	r26, r24
    1e52:	cb 01       	movw	r24, r22

00001e54 <eeprom_read_blraw>:
    1e54:	fc 01       	movw	r30, r24
    1e56:	f9 99       	sbic	0x1f, 1	; 31
    1e58:	fe cf       	rjmp	.-4      	; 0x1e56 <eeprom_read_blraw+0x2>
    1e5a:	06 c0       	rjmp	.+12     	; 0x1e68 <eeprom_read_blraw+0x14>
    1e5c:	f2 bd       	out	0x22, r31	; 34
    1e5e:	e1 bd       	out	0x21, r30	; 33
    1e60:	f8 9a       	sbi	0x1f, 0	; 31
    1e62:	31 96       	adiw	r30, 0x01	; 1
    1e64:	00 b4       	in	r0, 0x20	; 32
    1e66:	0d 92       	st	X+, r0
    1e68:	41 50       	subi	r20, 0x01	; 1
    1e6a:	50 40       	sbci	r21, 0x00	; 0
    1e6c:	b8 f7       	brcc	.-18     	; 0x1e5c <eeprom_read_blraw+0x8>
    1e6e:	08 95       	ret

00001e70 <_exit>:
    1e70:	f8 94       	cli

00001e72 <__stop_program>:
    1e72:	ff cf       	rjmp	.-2      	; 0x1e72 <__stop_program>
