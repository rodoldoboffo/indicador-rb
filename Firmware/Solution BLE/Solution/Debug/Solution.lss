
Solution.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000126  00800100  00001ab8  00001b4c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001ab8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000c9  00800226  00800226  00001c72  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001c72  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001ca4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000648  00000000  00000000  00001ce8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00008565  00000000  00000000  00002330  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000019fd  00000000  00000000  0000a895  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000034d7  00000000  00000000  0000c292  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000014a4  00000000  00000000  0000f76c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001e3a  00000000  00000000  00010c10  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005f74  00000000  00000000  00012a4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000538  00000000  00000000  000189be  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 a7 09 	jmp	0x134e	; 0x134e <__vector_5>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 6a 07 	jmp	0xed4	; 0xed4 <__vector_14>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 fc 08 	jmp	0x11f8	; 0x11f8 <__vector_18>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	12 e0       	ldi	r17, 0x02	; 2
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e8 eb       	ldi	r30, 0xB8	; 184
      7c:	fa e1       	ldi	r31, 0x1A	; 26
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a6 32       	cpi	r26, 0x26	; 38
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	22 e0       	ldi	r18, 0x02	; 2
      8c:	a6 e2       	ldi	r26, 0x26	; 38
      8e:	b2 e0       	ldi	r27, 0x02	; 2
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	af 3e       	cpi	r26, 0xEF	; 239
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 04 06 	call	0xc08	; 0xc08 <main>
      9e:	0c 94 5a 0d 	jmp	0x1ab4	; 0x1ab4 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <adcInitialize>:
#include "ads1231.h"
#include <avr/io.h>
#include <util/delay.h>

void adcInitialize(unsigned char speed) {
	DDRC |= (1<<ADC_SPEED_PIN) | (1<<ADC_PDWN_PIN) | (1<<ADC_SCLK_PIN);
      a6:	97 b1       	in	r25, 0x07	; 7
      a8:	97 60       	ori	r25, 0x07	; 7
      aa:	97 b9       	out	0x07, r25	; 7
	DDRC &= ~(1<<ADC_DOUT_PIN);
      ac:	3b 98       	cbi	0x07, 3	; 7
	PORTC |= (1<<ADC_DOUT_PIN) | (1<<ADC_PDWN_PIN);
      ae:	98 b1       	in	r25, 0x08	; 8
      b0:	9a 60       	ori	r25, 0x0A	; 10
      b2:	98 b9       	out	0x08, r25	; 8
	PORTC &= ~(1<<ADC_SCLK_PIN);
      b4:	42 98       	cbi	0x08, 2	; 8
	if (speed)
      b6:	81 11       	cpse	r24, r1
		PORTC |= (1<<ADC_SPEED_PIN);
      b8:	40 9a       	sbi	0x08, 0	; 8
      ba:	08 95       	ret

000000bc <QR>:
		 softwareSerialPrint(" ");
	 }
	 softwareSerialPrint("\n");
 }

 int QR(int m, int n, float A[][2], float *sigma, float *gamma, int *p) {
      bc:	2f 92       	push	r2
      be:	3f 92       	push	r3
      c0:	4f 92       	push	r4
      c2:	5f 92       	push	r5
      c4:	6f 92       	push	r6
      c6:	7f 92       	push	r7
      c8:	8f 92       	push	r8
      ca:	9f 92       	push	r9
      cc:	af 92       	push	r10
      ce:	bf 92       	push	r11
      d0:	cf 92       	push	r12
      d2:	df 92       	push	r13
      d4:	ef 92       	push	r14
      d6:	ff 92       	push	r15
      d8:	0f 93       	push	r16
      da:	1f 93       	push	r17
      dc:	cf 93       	push	r28
      de:	df 93       	push	r29
      e0:	cd b7       	in	r28, 0x3d	; 61
      e2:	de b7       	in	r29, 0x3e	; 62
      e4:	a4 97       	sbiw	r28, 0x24	; 36
      e6:	0f b6       	in	r0, 0x3f	; 63
      e8:	f8 94       	cli
      ea:	de bf       	out	0x3e, r29	; 62
      ec:	0f be       	out	0x3f, r0	; 63
      ee:	cd bf       	out	0x3d, r28	; 61
	 int i, j, k=0, l, max_vetor;
	 float max, f, max_norma, aux;
	 /* laço que calcula a norma de todos os vetores da matriz */
	 for (j=0; j<n; j++) {
      f0:	16 16       	cp	r1, r22
      f2:	17 06       	cpc	r1, r23
      f4:	0c f0       	brlt	.+2      	; 0xf8 <QR+0x3c>
      f6:	ca c2       	rjmp	.+1428   	; 0x68c <__LOCK_REGION_LENGTH__+0x28c>
      f8:	3a a3       	std	Y+34, r19	; 0x22
      fa:	29 a3       	std	Y+33, r18	; 0x21
      fc:	58 a3       	std	Y+32, r21	; 0x20
      fe:	4f 8f       	std	Y+31, r20	; 0x1f
     100:	2b 01       	movw	r4, r22
     102:	9c 8f       	std	Y+28, r25	; 0x1c
     104:	8b 8f       	std	Y+27, r24	; 0x1b
     106:	3a 87       	std	Y+10, r19	; 0x0a
     108:	29 87       	std	Y+9, r18	; 0x09
     10a:	0f 8b       	std	Y+23, r16	; 0x17
     10c:	18 8f       	std	Y+24, r17	; 0x18
     10e:	e9 8e       	std	Y+25, r14	; 0x19
     110:	fa 8e       	std	Y+26, r15	; 0x1a
     112:	5a 83       	std	Y+2, r21	; 0x02
     114:	49 83       	std	Y+1, r20	; 0x01
     116:	88 0f       	add	r24, r24
     118:	99 1f       	adc	r25, r25
     11a:	88 0f       	add	r24, r24
     11c:	99 1f       	adc	r25, r25
     11e:	88 0f       	add	r24, r24
     120:	99 1f       	adc	r25, r25
     122:	98 87       	std	Y+8, r25	; 0x08
     124:	8f 83       	std	Y+7, r24	; 0x07
     126:	5a 01       	movw	r10, r20
     128:	6e 2c       	mov	r6, r14
     12a:	7f 2c       	mov	r7, r15
     12c:	20 2e       	mov	r2, r16
     12e:	31 2e       	mov	r3, r17
     130:	c9 a0       	ldd	r12, Y+33	; 0x21
     132:	da a0       	ldd	r13, Y+34	; 0x22
     134:	e1 2c       	mov	r14, r1
     136:	f1 2c       	mov	r15, r1
     138:	dc 82       	std	Y+4, r13	; 0x04
     13a:	cb 82       	std	Y+3, r12	; 0x03
		 sigma[j] = 0.0;
     13c:	f6 01       	movw	r30, r12
     13e:	10 82       	st	Z, r1
     140:	11 82       	std	Z+1, r1	; 0x01
     142:	12 82       	std	Z+2, r1	; 0x02
     144:	13 82       	std	Z+3, r1	; 0x03
		 for (i=0; i<m; i++) sigma[j] += fabs(A[i][j]*A[i][j]);
     146:	2b 8d       	ldd	r18, Y+27	; 0x1b
     148:	3c 8d       	ldd	r19, Y+28	; 0x1c
     14a:	12 16       	cp	r1, r18
     14c:	13 06       	cpc	r1, r19
     14e:	1c f5       	brge	.+70     	; 0x196 <QR+0xda>
     150:	8f 80       	ldd	r8, Y+7	; 0x07
     152:	98 84       	ldd	r9, Y+8	; 0x08
     154:	8a 0c       	add	r8, r10
     156:	9b 1c       	adc	r9, r11
     158:	85 01       	movw	r16, r10
     15a:	f8 01       	movw	r30, r16
     15c:	60 81       	ld	r22, Z
     15e:	71 81       	ldd	r23, Z+1	; 0x01
     160:	82 81       	ldd	r24, Z+2	; 0x02
     162:	93 81       	ldd	r25, Z+3	; 0x03
     164:	9b 01       	movw	r18, r22
     166:	ac 01       	movw	r20, r24
     168:	0e 94 1d 0c 	call	0x183a	; 0x183a <__mulsf3>
     16c:	9b 01       	movw	r18, r22
     16e:	ac 01       	movw	r20, r24
     170:	eb 81       	ldd	r30, Y+3	; 0x03
     172:	fc 81       	ldd	r31, Y+4	; 0x04
     174:	60 81       	ld	r22, Z
     176:	71 81       	ldd	r23, Z+1	; 0x01
     178:	82 81       	ldd	r24, Z+2	; 0x02
     17a:	93 81       	ldd	r25, Z+3	; 0x03
     17c:	0e 94 83 0a 	call	0x1506	; 0x1506 <__addsf3>
     180:	eb 81       	ldd	r30, Y+3	; 0x03
     182:	fc 81       	ldd	r31, Y+4	; 0x04
     184:	60 83       	st	Z, r22
     186:	71 83       	std	Z+1, r23	; 0x01
     188:	82 83       	std	Z+2, r24	; 0x02
     18a:	93 83       	std	Z+3, r25	; 0x03
     18c:	08 5f       	subi	r16, 0xF8	; 248
     18e:	1f 4f       	sbci	r17, 0xFF	; 255
     190:	80 16       	cp	r8, r16
     192:	91 06       	cpc	r9, r17
     194:	11 f7       	brne	.-60     	; 0x15a <QR+0x9e>
		 sigma[j] = sqrt(sigma[j]);
     196:	eb 81       	ldd	r30, Y+3	; 0x03
     198:	fc 81       	ldd	r31, Y+4	; 0x04
     19a:	60 81       	ld	r22, Z
     19c:	71 81       	ldd	r23, Z+1	; 0x01
     19e:	82 81       	ldd	r24, Z+2	; 0x02
     1a0:	93 81       	ldd	r25, Z+3	; 0x03
     1a2:	0e 94 90 0c 	call	0x1920	; 0x1920 <sqrt>
     1a6:	eb 81       	ldd	r30, Y+3	; 0x03
     1a8:	fc 81       	ldd	r31, Y+4	; 0x04
     1aa:	60 83       	st	Z, r22
     1ac:	71 83       	std	Z+1, r23	; 0x01
     1ae:	82 83       	std	Z+2, r24	; 0x02
     1b0:	93 83       	std	Z+3, r25	; 0x03
     1b2:	f4 e0       	ldi	r31, 0x04	; 4
     1b4:	cf 0e       	add	r12, r31
     1b6:	d1 1c       	adc	r13, r1
		 gamma[j] = 0.0;
     1b8:	f1 01       	movw	r30, r2
     1ba:	11 92       	st	Z+, r1
     1bc:	11 92       	st	Z+, r1
     1be:	11 92       	st	Z+, r1
     1c0:	11 92       	st	Z+, r1
     1c2:	1f 01       	movw	r2, r30
		 p[j] = j;
     1c4:	f3 01       	movw	r30, r6
     1c6:	e1 92       	st	Z+, r14
     1c8:	f1 92       	st	Z+, r15
     1ca:	3f 01       	movw	r6, r30

 int QR(int m, int n, float A[][2], float *sigma, float *gamma, int *p) {
	 int i, j, k=0, l, max_vetor;
	 float max, f, max_norma, aux;
	 /* laço que calcula a norma de todos os vetores da matriz */
	 for (j=0; j<n; j++) {
     1cc:	ff ef       	ldi	r31, 0xFF	; 255
     1ce:	ef 1a       	sub	r14, r31
     1d0:	ff 0a       	sbc	r15, r31
     1d2:	24 e0       	ldi	r18, 0x04	; 4
     1d4:	a2 0e       	add	r10, r18
     1d6:	b1 1c       	adc	r11, r1
     1d8:	4e 14       	cp	r4, r14
     1da:	5f 04       	cpc	r5, r15
     1dc:	09 f0       	breq	.+2      	; 0x1e0 <QR+0x124>
     1de:	ac cf       	rjmp	.-168    	; 0x138 <QR+0x7c>
     1e0:	2f 8c       	ldd	r2, Y+31	; 0x1f
     1e2:	38 a0       	ldd	r3, Y+32	; 0x20
     1e4:	8f 81       	ldd	r24, Y+7	; 0x07
     1e6:	98 85       	ldd	r25, Y+8	; 0x08
     1e8:	28 0e       	add	r2, r24
     1ea:	39 1e       	adc	r3, r25
     1ec:	c2 01       	movw	r24, r4
     1ee:	88 0f       	add	r24, r24
     1f0:	99 1f       	adc	r25, r25
     1f2:	88 0f       	add	r24, r24
     1f4:	99 1f       	adc	r25, r25
     1f6:	e9 a1       	ldd	r30, Y+33	; 0x21
     1f8:	fa a1       	ldd	r31, Y+34	; 0x22
     1fa:	e8 0f       	add	r30, r24
     1fc:	f9 1f       	adc	r31, r25
     1fe:	fc a3       	std	Y+36, r31	; 0x24
     200:	eb a3       	std	Y+35, r30	; 0x23
     202:	1e 8e       	std	Y+30, r1	; 0x1e
     204:	1d 8e       	std	Y+29, r1	; 0x1d
     206:	21 e0       	ldi	r18, 0x01	; 1
     208:	30 e0       	ldi	r19, 0x00	; 0
     20a:	3e 8b       	std	Y+22, r19	; 0x16
     20c:	2d 8b       	std	Y+21, r18	; 0x15
     20e:	1c 8a       	std	Y+20, r1	; 0x14
     210:	1b 8a       	std	Y+19, r1	; 0x13
			 sigma[k] = sigma[max_vetor];
			 sigma[max_vetor] = aux;
		 }
		 /* seleciona o maior elemento em módulo do vetor, para normalizá-lo */
		 for (i=k; i<m; i++) if (fabs(A[i][k])>max) max = fabs(A[i][k]);
		 if (fabs(max) <= EPSILON) gamma[k] = 0.0;
     212:	1f 86       	std	Y+15, r1	; 0x0f
     214:	18 8a       	std	Y+16, r1	; 0x10
     216:	19 8a       	std	Y+17, r1	; 0x11
     218:	1a 8a       	std	Y+18, r1	; 0x12
     21a:	2d c0       	rjmp	.+90     	; 0x276 <QR+0x1ba>
     21c:	8b 89       	ldd	r24, Y+19	; 0x13
     21e:	9c 89       	ldd	r25, Y+20	; 0x14
     220:	01 96       	adiw	r24, 0x01	; 1
     222:	9c 8b       	std	Y+20, r25	; 0x14
     224:	8b 8b       	std	Y+19, r24	; 0x13
     226:	ed 89       	ldd	r30, Y+21	; 0x15
     228:	fe 89       	ldd	r31, Y+22	; 0x16
     22a:	31 96       	adiw	r30, 0x01	; 1
     22c:	fe 8b       	std	Y+22, r31	; 0x16
     22e:	ed 8b       	std	Y+21, r30	; 0x15
     230:	2f 89       	ldd	r18, Y+23	; 0x17
     232:	38 8d       	ldd	r19, Y+24	; 0x18
     234:	2c 5f       	subi	r18, 0xFC	; 252
     236:	3f 4f       	sbci	r19, 0xFF	; 255
     238:	38 8f       	std	Y+24, r19	; 0x18
     23a:	2f 8b       	std	Y+23, r18	; 0x17
     23c:	8d 8d       	ldd	r24, Y+29	; 0x1d
     23e:	9e 8d       	ldd	r25, Y+30	; 0x1e
     240:	04 96       	adiw	r24, 0x04	; 4
     242:	9e 8f       	std	Y+30, r25	; 0x1e
     244:	8d 8f       	std	Y+29, r24	; 0x1d
     246:	e9 85       	ldd	r30, Y+9	; 0x09
     248:	fa 85       	ldd	r31, Y+10	; 0x0a
     24a:	34 96       	adiw	r30, 0x04	; 4
     24c:	fa 87       	std	Y+10, r31	; 0x0a
     24e:	e9 87       	std	Y+9, r30	; 0x09
     250:	f4 e0       	ldi	r31, 0x04	; 4
     252:	2f 0e       	add	r2, r31
     254:	31 1c       	adc	r3, r1
     256:	29 8d       	ldd	r18, Y+25	; 0x19
     258:	3a 8d       	ldd	r19, Y+26	; 0x1a
     25a:	2e 5f       	subi	r18, 0xFE	; 254
     25c:	3f 4f       	sbci	r19, 0xFF	; 255
     25e:	3a 8f       	std	Y+26, r19	; 0x1a
     260:	29 8f       	std	Y+25, r18	; 0x19
     262:	89 81       	ldd	r24, Y+1	; 0x01
     264:	9a 81       	ldd	r25, Y+2	; 0x02
     266:	0c 96       	adiw	r24, 0x0c	; 12
     268:	9a 83       	std	Y+2, r25	; 0x02
     26a:	89 83       	std	Y+1, r24	; 0x01
     26c:	ef 81       	ldd	r30, Y+7	; 0x07
     26e:	f8 85       	ldd	r31, Y+8	; 0x08
     270:	38 97       	sbiw	r30, 0x08	; 8
     272:	f8 87       	std	Y+8, r31	; 0x08
     274:	ef 83       	std	Y+7, r30	; 0x07
     276:	2b 89       	ldd	r18, Y+19	; 0x13
     278:	3c 89       	ldd	r19, Y+20	; 0x14
     27a:	3c 87       	std	Y+12, r19	; 0x0c
     27c:	2b 87       	std	Y+11, r18	; 0x0b
	 }
	 /* laço externo que itera o algoritmo decomposição QR em toda a matriz A */
	 for (k=0; k<n; k++) {
		 max = 0.0;
		 /* se não é a primeira iteração, recalcula a norma dos vetores, com uma dimensão menor do que a iteração anterior */
		 if (k>0) for (j=k; j<n; j++) sigma[j] = sqrt(fabs(sigma[j]*sigma[j]-A[k-1][j]*A[k-1][j]));
     27e:	12 16       	cp	r1, r18
     280:	13 06       	cpc	r1, r19
     282:	0c f0       	brlt	.+2      	; 0x286 <QR+0x1ca>
     284:	47 c0       	rjmp	.+142    	; 0x314 <QR+0x258>
     286:	24 15       	cp	r18, r4
     288:	35 05       	cpc	r19, r5
     28a:	0c f0       	brlt	.+2      	; 0x28e <QR+0x1d2>
     28c:	02 c2       	rjmp	.+1028   	; 0x692 <__LOCK_REGION_LENGTH__+0x292>
     28e:	09 81       	ldd	r16, Y+1	; 0x01
     290:	1a 81       	ldd	r17, Y+2	; 0x02
     292:	08 50       	subi	r16, 0x08	; 8
     294:	11 09       	sbc	r17, r1
     296:	89 85       	ldd	r24, Y+9	; 0x09
     298:	9a 85       	ldd	r25, Y+10	; 0x0a
     29a:	9e 87       	std	Y+14, r25	; 0x0e
     29c:	8d 87       	std	Y+13, r24	; 0x0d
     29e:	6b a0       	ldd	r6, Y+35	; 0x23
     2a0:	7c a0       	ldd	r7, Y+36	; 0x24
     2a2:	ed 85       	ldd	r30, Y+13	; 0x0d
     2a4:	fe 85       	ldd	r31, Y+14	; 0x0e
     2a6:	80 80       	ld	r8, Z
     2a8:	91 80       	ldd	r9, Z+1	; 0x01
     2aa:	a2 80       	ldd	r10, Z+2	; 0x02
     2ac:	b3 80       	ldd	r11, Z+3	; 0x03
     2ae:	f8 01       	movw	r30, r16
     2b0:	c1 90       	ld	r12, Z+
     2b2:	d1 90       	ld	r13, Z+
     2b4:	e1 90       	ld	r14, Z+
     2b6:	f1 90       	ld	r15, Z+
     2b8:	8f 01       	movw	r16, r30
     2ba:	a5 01       	movw	r20, r10
     2bc:	94 01       	movw	r18, r8
     2be:	c5 01       	movw	r24, r10
     2c0:	b4 01       	movw	r22, r8
     2c2:	0e 94 1d 0c 	call	0x183a	; 0x183a <__mulsf3>
     2c6:	6b 83       	std	Y+3, r22	; 0x03
     2c8:	7c 83       	std	Y+4, r23	; 0x04
     2ca:	8d 83       	std	Y+5, r24	; 0x05
     2cc:	9e 83       	std	Y+6, r25	; 0x06
     2ce:	a5 01       	movw	r20, r10
     2d0:	94 01       	movw	r18, r8
     2d2:	c5 01       	movw	r24, r10
     2d4:	b4 01       	movw	r22, r8
     2d6:	0e 94 1d 0c 	call	0x183a	; 0x183a <__mulsf3>
     2da:	4b 01       	movw	r8, r22
     2dc:	5c 01       	movw	r10, r24
     2de:	a7 01       	movw	r20, r14
     2e0:	96 01       	movw	r18, r12
     2e2:	c7 01       	movw	r24, r14
     2e4:	b6 01       	movw	r22, r12
     2e6:	0e 94 1d 0c 	call	0x183a	; 0x183a <__mulsf3>
     2ea:	9b 01       	movw	r18, r22
     2ec:	ac 01       	movw	r20, r24
     2ee:	c5 01       	movw	r24, r10
     2f0:	b4 01       	movw	r22, r8
     2f2:	0e 94 82 0a 	call	0x1504	; 0x1504 <__subsf3>
     2f6:	9f 77       	andi	r25, 0x7F	; 127
     2f8:	0e 94 90 0c 	call	0x1920	; 0x1920 <sqrt>
     2fc:	ed 85       	ldd	r30, Y+13	; 0x0d
     2fe:	fe 85       	ldd	r31, Y+14	; 0x0e
     300:	61 93       	st	Z+, r22
     302:	71 93       	st	Z+, r23
     304:	81 93       	st	Z+, r24
     306:	91 93       	st	Z+, r25
     308:	fe 87       	std	Y+14, r31	; 0x0e
     30a:	ed 87       	std	Y+13, r30	; 0x0d
     30c:	e6 15       	cp	r30, r6
     30e:	f7 05       	cpc	r31, r7
     310:	41 f6       	brne	.-112    	; 0x2a2 <QR+0x1e6>
     312:	d2 c1       	rjmp	.+932    	; 0x6b8 <__LOCK_REGION_LENGTH__+0x2b8>
		 /* laço que procura o vetor de maior norma da submatriz da iteração (para colocar os vetores de norma 0 à direita da matriz, se existirem) */
		 for (l=k, max_norma = sigma[l], max_vetor = l; l<n; l++) {
     314:	29 85       	ldd	r18, Y+9	; 0x09
     316:	3a 85       	ldd	r19, Y+10	; 0x0a
     318:	3e 87       	std	Y+14, r19	; 0x0e
     31a:	2d 87       	std	Y+13, r18	; 0x0d
     31c:	f9 01       	movw	r30, r18
     31e:	80 80       	ld	r8, Z
     320:	91 80       	ldd	r9, Z+1	; 0x01
     322:	a2 80       	ldd	r10, Z+2	; 0x02
     324:	b3 80       	ldd	r11, Z+3	; 0x03
     326:	2b 85       	ldd	r18, Y+11	; 0x0b
     328:	3c 85       	ldd	r19, Y+12	; 0x0c
     32a:	24 15       	cp	r18, r4
     32c:	35 05       	cpc	r19, r5
     32e:	0c f0       	brlt	.+2      	; 0x332 <QR+0x276>
     330:	cd c1       	rjmp	.+922    	; 0x6cc <__LOCK_REGION_LENGTH__+0x2cc>
     332:	09 85       	ldd	r16, Y+9	; 0x09
     334:	1a 85       	ldd	r17, Y+10	; 0x0a
     336:	0c 5f       	subi	r16, 0xFC	; 252
     338:	1f 4f       	sbci	r17, 0xFF	; 255
     33a:	8b 85       	ldd	r24, Y+11	; 0x0b
     33c:	9c 85       	ldd	r25, Y+12	; 0x0c
     33e:	3c 01       	movw	r6, r24
     340:	9c 83       	std	Y+4, r25	; 0x04
     342:	8b 83       	std	Y+3, r24	; 0x03
     344:	16 c0       	rjmp	.+44     	; 0x372 <QR+0x2b6>
			 if (max_norma < sigma[l]) { max_norma = sigma[l]; max_vetor = l; }
     346:	f8 01       	movw	r30, r16
     348:	c1 90       	ld	r12, Z+
     34a:	d1 90       	ld	r13, Z+
     34c:	e1 90       	ld	r14, Z+
     34e:	f1 90       	ld	r15, Z+
     350:	8f 01       	movw	r16, r30
     352:	a7 01       	movw	r20, r14
     354:	96 01       	movw	r18, r12
     356:	68 2d       	mov	r22, r8
     358:	79 2d       	mov	r23, r9
     35a:	8a 2d       	mov	r24, r10
     35c:	9b 2d       	mov	r25, r11
     35e:	0e 94 ef 0a 	call	0x15de	; 0x15de <__cmpsf2>
     362:	88 23       	and	r24, r24
     364:	34 f4       	brge	.+12     	; 0x372 <QR+0x2b6>
     366:	8c 2c       	mov	r8, r12
     368:	9d 2c       	mov	r9, r13
     36a:	ae 2c       	mov	r10, r14
     36c:	bf 2c       	mov	r11, r15
	 for (k=0; k<n; k++) {
		 max = 0.0;
		 /* se não é a primeira iteração, recalcula a norma dos vetores, com uma dimensão menor do que a iteração anterior */
		 if (k>0) for (j=k; j<n; j++) sigma[j] = sqrt(fabs(sigma[j]*sigma[j]-A[k-1][j]*A[k-1][j]));
		 /* laço que procura o vetor de maior norma da submatriz da iteração (para colocar os vetores de norma 0 à direita da matriz, se existirem) */
		 for (l=k, max_norma = sigma[l], max_vetor = l; l<n; l++) {
     36e:	6b 80       	ldd	r6, Y+3	; 0x03
     370:	7c 80       	ldd	r7, Y+4	; 0x04
     372:	2b 81       	ldd	r18, Y+3	; 0x03
     374:	3c 81       	ldd	r19, Y+4	; 0x04
     376:	2f 5f       	subi	r18, 0xFF	; 255
     378:	3f 4f       	sbci	r19, 0xFF	; 255
     37a:	3c 83       	std	Y+4, r19	; 0x04
     37c:	2b 83       	std	Y+3, r18	; 0x03
     37e:	24 15       	cp	r18, r4
     380:	35 05       	cpc	r19, r5
     382:	0c f3       	brlt	.-62     	; 0x346 <QR+0x28a>
			 if (max_norma < sigma[l]) { max_norma = sigma[l]; max_vetor = l; }
		 }
		 if (max_norma <= EPSILON) return k;
     384:	2c ea       	ldi	r18, 0xAC	; 172
     386:	35 ec       	ldi	r19, 0xC5	; 197
     388:	47 e2       	ldi	r20, 0x27	; 39
     38a:	57 e3       	ldi	r21, 0x37	; 55
     38c:	68 2d       	mov	r22, r8
     38e:	79 2d       	mov	r23, r9
     390:	8a 2d       	mov	r24, r10
     392:	9b 2d       	mov	r25, r11
     394:	0e 94 ef 0a 	call	0x15de	; 0x15de <__cmpsf2>
     398:	18 16       	cp	r1, r24
     39a:	0c f0       	brlt	.+2      	; 0x39e <QR+0x2e2>
     39c:	cf c1       	rjmp	.+926    	; 0x73c <__LOCK_REGION_LENGTH__+0x33c>
		 /* troca os vetores de lugar, e armazena essa informação no vetor permutação p */
		 if (max_vetor != k) {
     39e:	8b 85       	ldd	r24, Y+11	; 0x0b
     3a0:	9c 85       	ldd	r25, Y+12	; 0x0c
     3a2:	68 16       	cp	r6, r24
     3a4:	79 06       	cpc	r7, r25
     3a6:	09 f4       	brne	.+2      	; 0x3aa <QR+0x2ee>
     3a8:	4e c0       	rjmp	.+156    	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
			 p[k] = max_vetor;
     3aa:	e9 8d       	ldd	r30, Y+25	; 0x19
     3ac:	fa 8d       	ldd	r31, Y+26	; 0x1a
     3ae:	71 82       	std	Z+1, r7	; 0x01
     3b0:	60 82       	st	Z, r6
			 for (i=0; i<m; i++) {
     3b2:	2b 8d       	ldd	r18, Y+27	; 0x1b
     3b4:	3c 8d       	ldd	r19, Y+28	; 0x1c
     3b6:	12 16       	cp	r1, r18
     3b8:	13 06       	cpc	r1, r19
     3ba:	34 f5       	brge	.+76     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
     3bc:	ef 8d       	ldd	r30, Y+31	; 0x1f
     3be:	f8 a1       	ldd	r31, Y+32	; 0x20
     3c0:	8d 8d       	ldd	r24, Y+29	; 0x1d
     3c2:	9e 8d       	ldd	r25, Y+30	; 0x1e
     3c4:	e8 0f       	add	r30, r24
     3c6:	f9 1f       	adc	r31, r25
     3c8:	d3 01       	movw	r26, r6
     3ca:	aa 0f       	add	r26, r26
     3cc:	bb 1f       	adc	r27, r27
     3ce:	aa 0f       	add	r26, r26
     3d0:	bb 1f       	adc	r27, r27
     3d2:	2f 8d       	ldd	r18, Y+31	; 0x1f
     3d4:	38 a1       	ldd	r19, Y+32	; 0x20
     3d6:	a2 0f       	add	r26, r18
     3d8:	b3 1f       	adc	r27, r19
				 aux = A[i][k];
     3da:	40 81       	ld	r20, Z
     3dc:	51 81       	ldd	r21, Z+1	; 0x01
     3de:	62 81       	ldd	r22, Z+2	; 0x02
     3e0:	73 81       	ldd	r23, Z+3	; 0x03
				 A[i][k] = A[i][max_vetor];
     3e2:	0d 91       	ld	r16, X+
     3e4:	1d 91       	ld	r17, X+
     3e6:	2d 91       	ld	r18, X+
     3e8:	3c 91       	ld	r19, X
     3ea:	13 97       	sbiw	r26, 0x03	; 3
     3ec:	00 83       	st	Z, r16
     3ee:	11 83       	std	Z+1, r17	; 0x01
     3f0:	22 83       	std	Z+2, r18	; 0x02
     3f2:	33 83       	std	Z+3, r19	; 0x03
				 A[i][max_vetor] = aux;
     3f4:	4d 93       	st	X+, r20
     3f6:	5d 93       	st	X+, r21
     3f8:	6d 93       	st	X+, r22
     3fa:	7c 93       	st	X, r23
     3fc:	13 97       	sbiw	r26, 0x03	; 3
     3fe:	38 96       	adiw	r30, 0x08	; 8
     400:	18 96       	adiw	r26, 0x08	; 8
		 }
		 if (max_norma <= EPSILON) return k;
		 /* troca os vetores de lugar, e armazena essa informação no vetor permutação p */
		 if (max_vetor != k) {
			 p[k] = max_vetor;
			 for (i=0; i<m; i++) {
     402:	e2 15       	cp	r30, r2
     404:	f3 05       	cpc	r31, r3
     406:	49 f7       	brne	.-46     	; 0x3da <QR+0x31e>
				 aux = A[i][k];
				 A[i][k] = A[i][max_vetor];
				 A[i][max_vetor] = aux;
			 }
			 aux = sigma[k];
     408:	ed 85       	ldd	r30, Y+13	; 0x0d
     40a:	fe 85       	ldd	r31, Y+14	; 0x0e
     40c:	80 81       	ld	r24, Z
     40e:	91 81       	ldd	r25, Z+1	; 0x01
     410:	a2 81       	ldd	r26, Z+2	; 0x02
     412:	b3 81       	ldd	r27, Z+3	; 0x03
			 sigma[k] = sigma[max_vetor];
     414:	f3 01       	movw	r30, r6
     416:	ee 0f       	add	r30, r30
     418:	ff 1f       	adc	r31, r31
     41a:	ee 0f       	add	r30, r30
     41c:	ff 1f       	adc	r31, r31
     41e:	09 a1       	ldd	r16, Y+33	; 0x21
     420:	1a a1       	ldd	r17, Y+34	; 0x22
     422:	0e 0f       	add	r16, r30
     424:	1f 1f       	adc	r17, r31
     426:	f8 01       	movw	r30, r16
     428:	40 81       	ld	r20, Z
     42a:	51 81       	ldd	r21, Z+1	; 0x01
     42c:	62 81       	ldd	r22, Z+2	; 0x02
     42e:	73 81       	ldd	r23, Z+3	; 0x03
     430:	ed 85       	ldd	r30, Y+13	; 0x0d
     432:	fe 85       	ldd	r31, Y+14	; 0x0e
     434:	40 83       	st	Z, r20
     436:	51 83       	std	Z+1, r21	; 0x01
     438:	62 83       	std	Z+2, r22	; 0x02
     43a:	73 83       	std	Z+3, r23	; 0x03
			 sigma[max_vetor] = aux;
     43c:	f8 01       	movw	r30, r16
     43e:	80 83       	st	Z, r24
     440:	91 83       	std	Z+1, r25	; 0x01
     442:	a2 83       	std	Z+2, r26	; 0x02
     444:	b3 83       	std	Z+3, r27	; 0x03
		 }
		 /* seleciona o maior elemento em módulo do vetor, para normalizá-lo */
		 for (i=k; i<m; i++) if (fabs(A[i][k])>max) max = fabs(A[i][k]);
     446:	2b 8d       	ldd	r18, Y+27	; 0x1b
     448:	3c 8d       	ldd	r19, Y+28	; 0x1c
     44a:	8b 85       	ldd	r24, Y+11	; 0x0b
     44c:	9c 85       	ldd	r25, Y+12	; 0x0c
     44e:	82 17       	cp	r24, r18
     450:	93 07       	cpc	r25, r19
     452:	34 f5       	brge	.+76     	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
     454:	e9 81       	ldd	r30, Y+1	; 0x01
     456:	fa 81       	ldd	r31, Y+2	; 0x02
     458:	80 e0       	ldi	r24, 0x00	; 0
     45a:	90 e0       	ldi	r25, 0x00	; 0
     45c:	a0 e0       	ldi	r26, 0x00	; 0
     45e:	b0 e0       	ldi	r27, 0x00	; 0
     460:	6c 01       	movw	r12, r24
     462:	7d 01       	movw	r14, r26
     464:	fc 83       	std	Y+4, r31	; 0x04
     466:	eb 83       	std	Y+3, r30	; 0x03
     468:	eb 81       	ldd	r30, Y+3	; 0x03
     46a:	fc 81       	ldd	r31, Y+4	; 0x04
     46c:	80 80       	ld	r8, Z
     46e:	91 80       	ldd	r9, Z+1	; 0x01
     470:	a2 80       	ldd	r10, Z+2	; 0x02
     472:	b3 80       	ldd	r11, Z+3	; 0x03
     474:	e8 94       	clt
     476:	b7 f8       	bld	r11, 7
     478:	a7 01       	movw	r20, r14
     47a:	96 01       	movw	r18, r12
     47c:	c5 01       	movw	r24, r10
     47e:	b4 01       	movw	r22, r8
     480:	0e 94 18 0c 	call	0x1830	; 0x1830 <__gesf2>
     484:	18 16       	cp	r1, r24
     486:	14 f4       	brge	.+4      	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
     488:	75 01       	movw	r14, r10
     48a:	64 01       	movw	r12, r8
     48c:	2b 81       	ldd	r18, Y+3	; 0x03
     48e:	3c 81       	ldd	r19, Y+4	; 0x04
     490:	28 5f       	subi	r18, 0xF8	; 248
     492:	3f 4f       	sbci	r19, 0xFF	; 255
     494:	3c 83       	std	Y+4, r19	; 0x04
     496:	2b 83       	std	Y+3, r18	; 0x03
     498:	22 15       	cp	r18, r2
     49a:	33 05       	cpc	r19, r3
     49c:	29 f7       	brne	.-54     	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
     49e:	24 c1       	rjmp	.+584    	; 0x6e8 <__LOCK_REGION_LENGTH__+0x2e8>
		 if (fabs(max) <= EPSILON) gamma[k] = 0.0;
     4a0:	ef 89       	ldd	r30, Y+23	; 0x17
     4a2:	f8 8d       	ldd	r31, Y+24	; 0x18
     4a4:	10 82       	st	Z, r1
     4a6:	11 82       	std	Z+1, r1	; 0x01
     4a8:	12 82       	std	Z+2, r1	; 0x02
     4aa:	13 82       	std	Z+3, r1	; 0x03
		 sigma[j] = sqrt(sigma[j]);
		 gamma[j] = 0.0;
		 p[j] = j;
	 }
	 /* laço externo que itera o algoritmo decomposição QR em toda a matriz A */
	 for (k=0; k<n; k++) {
     4ac:	2d 89       	ldd	r18, Y+21	; 0x15
     4ae:	3e 89       	ldd	r19, Y+22	; 0x16
     4b0:	3c 87       	std	Y+12, r19	; 0x0c
     4b2:	2b 87       	std	Y+11, r18	; 0x0b
     4b4:	24 15       	cp	r18, r4
     4b6:	35 05       	cpc	r19, r5
     4b8:	0c f4       	brge	.+2      	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
     4ba:	b0 ce       	rjmp	.-672    	; 0x21c <QR+0x160>
     4bc:	3f c1       	rjmp	.+638    	; 0x73c <__LOCK_REGION_LENGTH__+0x33c>
		 /* seleciona o maior elemento em módulo do vetor, para normalizá-lo */
		 for (i=k; i<m; i++) if (fabs(A[i][k])>max) max = fabs(A[i][k]);
		 if (fabs(max) <= EPSILON) gamma[k] = 0.0;
		 else {
			 /* calcula e armazena o vetor u em cima da matriz A, e calcula e armazena o gamma em vetor separado */
			 for (i=k; i<m; i++) A[i][k] /= max;
     4be:	a7 01       	movw	r20, r14
     4c0:	96 01       	movw	r18, r12
     4c2:	eb 81       	ldd	r30, Y+3	; 0x03
     4c4:	fc 81       	ldd	r31, Y+4	; 0x04
     4c6:	60 81       	ld	r22, Z
     4c8:	71 81       	ldd	r23, Z+1	; 0x01
     4ca:	82 81       	ldd	r24, Z+2	; 0x02
     4cc:	93 81       	ldd	r25, Z+3	; 0x03
     4ce:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <__divsf3>
     4d2:	eb 81       	ldd	r30, Y+3	; 0x03
     4d4:	fc 81       	ldd	r31, Y+4	; 0x04
     4d6:	60 83       	st	Z, r22
     4d8:	71 83       	std	Z+1, r23	; 0x01
     4da:	82 83       	std	Z+2, r24	; 0x02
     4dc:	93 83       	std	Z+3, r25	; 0x03
     4de:	38 96       	adiw	r30, 0x08	; 8
     4e0:	fc 83       	std	Y+4, r31	; 0x04
     4e2:	eb 83       	std	Y+3, r30	; 0x03
     4e4:	e2 15       	cp	r30, r2
     4e6:	f3 05       	cpc	r31, r3
     4e8:	51 f7       	brne	.-44     	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
			 sigma[k] /= max;
     4ea:	a7 01       	movw	r20, r14
     4ec:	96 01       	movw	r18, r12
     4ee:	ed 85       	ldd	r30, Y+13	; 0x0d
     4f0:	fe 85       	ldd	r31, Y+14	; 0x0e
     4f2:	60 81       	ld	r22, Z
     4f4:	71 81       	ldd	r23, Z+1	; 0x01
     4f6:	82 81       	ldd	r24, Z+2	; 0x02
     4f8:	93 81       	ldd	r25, Z+3	; 0x03
     4fa:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <__divsf3>
     4fe:	4b 01       	movw	r8, r22
     500:	5c 01       	movw	r10, r24
     502:	ed 85       	ldd	r30, Y+13	; 0x0d
     504:	fe 85       	ldd	r31, Y+14	; 0x0e
     506:	60 83       	st	Z, r22
     508:	71 83       	std	Z+1, r23	; 0x01
     50a:	82 83       	std	Z+2, r24	; 0x02
     50c:	93 83       	std	Z+3, r25	; 0x03
     50e:	29 81       	ldd	r18, Y+1	; 0x01
     510:	3a 81       	ldd	r19, Y+2	; 0x02
     512:	3c 83       	std	Y+4, r19	; 0x04
     514:	2b 83       	std	Y+3, r18	; 0x03
			 if (A[k][k] < 0) sigma[k] = (-1)*sigma[k];
     516:	20 e0       	ldi	r18, 0x00	; 0
     518:	30 e0       	ldi	r19, 0x00	; 0
     51a:	40 e0       	ldi	r20, 0x00	; 0
     51c:	50 e0       	ldi	r21, 0x00	; 0
     51e:	e9 81       	ldd	r30, Y+1	; 0x01
     520:	fa 81       	ldd	r31, Y+2	; 0x02
     522:	60 81       	ld	r22, Z
     524:	71 81       	ldd	r23, Z+1	; 0x01
     526:	82 81       	ldd	r24, Z+2	; 0x02
     528:	93 81       	ldd	r25, Z+3	; 0x03
     52a:	0e 94 ef 0a 	call	0x15de	; 0x15de <__cmpsf2>
     52e:	88 23       	and	r24, r24
     530:	54 f4       	brge	.+20     	; 0x546 <__LOCK_REGION_LENGTH__+0x146>
     532:	b7 fa       	bst	r11, 7
     534:	b0 94       	com	r11
     536:	b7 f8       	bld	r11, 7
     538:	b0 94       	com	r11
     53a:	ed 85       	ldd	r30, Y+13	; 0x0d
     53c:	fe 85       	ldd	r31, Y+14	; 0x0e
     53e:	80 82       	st	Z, r8
     540:	91 82       	std	Z+1, r9	; 0x01
     542:	a2 82       	std	Z+2, r10	; 0x02
     544:	b3 82       	std	Z+3, r11	; 0x03
			 A[k][k] += sigma[k];
     546:	ed 85       	ldd	r30, Y+13	; 0x0d
     548:	fe 85       	ldd	r31, Y+14	; 0x0e
     54a:	20 81       	ld	r18, Z
     54c:	31 81       	ldd	r19, Z+1	; 0x01
     54e:	42 81       	ldd	r20, Z+2	; 0x02
     550:	53 81       	ldd	r21, Z+3	; 0x03
     552:	eb 81       	ldd	r30, Y+3	; 0x03
     554:	fc 81       	ldd	r31, Y+4	; 0x04
     556:	60 81       	ld	r22, Z
     558:	71 81       	ldd	r23, Z+1	; 0x01
     55a:	82 81       	ldd	r24, Z+2	; 0x02
     55c:	93 81       	ldd	r25, Z+3	; 0x03
     55e:	0e 94 83 0a 	call	0x1506	; 0x1506 <__addsf3>
     562:	eb 81       	ldd	r30, Y+3	; 0x03
     564:	fc 81       	ldd	r31, Y+4	; 0x04
     566:	60 83       	st	Z, r22
     568:	71 83       	std	Z+1, r23	; 0x01
     56a:	82 83       	std	Z+2, r24	; 0x02
     56c:	93 83       	std	Z+3, r25	; 0x03
     56e:	2f 89       	ldd	r18, Y+23	; 0x17
     570:	38 8d       	ldd	r19, Y+24	; 0x18
     572:	3c 83       	std	Y+4, r19	; 0x04
     574:	2b 83       	std	Y+3, r18	; 0x03
			 gamma[k] = 1.0/(sigma[k]*A[k][k]);
     576:	ed 85       	ldd	r30, Y+13	; 0x0d
     578:	fe 85       	ldd	r31, Y+14	; 0x0e
     57a:	20 81       	ld	r18, Z
     57c:	31 81       	ldd	r19, Z+1	; 0x01
     57e:	42 81       	ldd	r20, Z+2	; 0x02
     580:	53 81       	ldd	r21, Z+3	; 0x03
     582:	0e 94 1d 0c 	call	0x183a	; 0x183a <__mulsf3>
     586:	9b 01       	movw	r18, r22
     588:	ac 01       	movw	r20, r24
     58a:	60 e0       	ldi	r22, 0x00	; 0
     58c:	70 e0       	ldi	r23, 0x00	; 0
     58e:	80 e8       	ldi	r24, 0x80	; 128
     590:	9f e3       	ldi	r25, 0x3F	; 63
     592:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <__divsf3>
     596:	ef 89       	ldd	r30, Y+23	; 0x17
     598:	f8 8d       	ldd	r31, Y+24	; 0x18
     59a:	60 83       	st	Z, r22
     59c:	71 83       	std	Z+1, r23	; 0x01
     59e:	82 83       	std	Z+2, r24	; 0x02
     5a0:	93 83       	std	Z+3, r25	; 0x03
			 sigma[k] *= max;
     5a2:	a7 01       	movw	r20, r14
     5a4:	96 01       	movw	r18, r12
     5a6:	ed 85       	ldd	r30, Y+13	; 0x0d
     5a8:	fe 85       	ldd	r31, Y+14	; 0x0e
     5aa:	60 81       	ld	r22, Z
     5ac:	71 81       	ldd	r23, Z+1	; 0x01
     5ae:	82 81       	ldd	r24, Z+2	; 0x02
     5b0:	93 81       	ldd	r25, Z+3	; 0x03
     5b2:	0e 94 1d 0c 	call	0x183a	; 0x183a <__mulsf3>
     5b6:	ed 85       	ldd	r30, Y+13	; 0x0d
     5b8:	fe 85       	ldd	r31, Y+14	; 0x0e
     5ba:	60 83       	st	Z, r22
     5bc:	71 83       	std	Z+1, r23	; 0x01
     5be:	82 83       	std	Z+2, r24	; 0x02
     5c0:	93 83       	std	Z+3, r25	; 0x03
			 
			 /* aplica a matriz Q em todo o restante da matriz, sem calcular a matriz Q propriamente, e sim (a - gamma*u*(ut*a)), onde a são os vetores da matriz A */
			 for (j=k+1; j<n; j++) {
     5c2:	6d 88       	ldd	r6, Y+21	; 0x15
     5c4:	7e 88       	ldd	r7, Y+22	; 0x16
     5c6:	64 14       	cp	r6, r4
     5c8:	75 04       	cpc	r7, r5
     5ca:	0c f0       	brlt	.+2      	; 0x5ce <__LOCK_REGION_LENGTH__+0x1ce>
     5cc:	9e c0       	rjmp	.+316    	; 0x70a <__LOCK_REGION_LENGTH__+0x30a>
     5ce:	c9 80       	ldd	r12, Y+1	; 0x01
     5d0:	da 80       	ldd	r13, Y+2	; 0x02
     5d2:	f4 e0       	ldi	r31, 0x04	; 4
     5d4:	cf 0e       	add	r12, r31
     5d6:	d1 1c       	adc	r13, r1
     5d8:	50 c0       	rjmp	.+160    	; 0x67a <__LOCK_REGION_LENGTH__+0x27a>
				 f = 0.0;
				 for (i=k; i<m; i++) f += A[i][k]*A[i][j];
     5da:	eb 85       	ldd	r30, Y+11	; 0x0b
     5dc:	fc 85       	ldd	r31, Y+12	; 0x0c
     5de:	20 81       	ld	r18, Z
     5e0:	31 81       	ldd	r19, Z+1	; 0x01
     5e2:	42 81       	ldd	r20, Z+2	; 0x02
     5e4:	53 81       	ldd	r21, Z+3	; 0x03
     5e6:	f8 01       	movw	r30, r16
     5e8:	60 81       	ld	r22, Z
     5ea:	71 81       	ldd	r23, Z+1	; 0x01
     5ec:	82 81       	ldd	r24, Z+2	; 0x02
     5ee:	93 81       	ldd	r25, Z+3	; 0x03
     5f0:	0e 94 1d 0c 	call	0x183a	; 0x183a <__mulsf3>
     5f4:	9b 01       	movw	r18, r22
     5f6:	ac 01       	movw	r20, r24
     5f8:	6a 2d       	mov	r22, r10
     5fa:	7b 2d       	mov	r23, r11
     5fc:	8e 2d       	mov	r24, r14
     5fe:	9f 2d       	mov	r25, r15
     600:	0e 94 83 0a 	call	0x1506	; 0x1506 <__addsf3>
     604:	a6 2e       	mov	r10, r22
     606:	b7 2e       	mov	r11, r23
     608:	e8 2e       	mov	r14, r24
     60a:	f9 2e       	mov	r15, r25
     60c:	08 5f       	subi	r16, 0xF8	; 248
     60e:	1f 4f       	sbci	r17, 0xFF	; 255
     610:	2b 85       	ldd	r18, Y+11	; 0x0b
     612:	3c 85       	ldd	r19, Y+12	; 0x0c
     614:	28 5f       	subi	r18, 0xF8	; 248
     616:	3f 4f       	sbci	r19, 0xFF	; 255
     618:	3c 87       	std	Y+12, r19	; 0x0c
     61a:	2b 87       	std	Y+11, r18	; 0x0b
     61c:	02 15       	cp	r16, r2
     61e:	13 05       	cpc	r17, r3
     620:	e1 f6       	brne	.-72     	; 0x5da <__LOCK_REGION_LENGTH__+0x1da>
     622:	79 c0       	rjmp	.+242    	; 0x716 <__LOCK_REGION_LENGTH__+0x316>
				 f *= gamma[k];
				 for (i=k; i<m; i++) A[i][j] -= f*A[i][k];
     624:	f8 01       	movw	r30, r16
     626:	20 81       	ld	r18, Z
     628:	31 81       	ldd	r19, Z+1	; 0x01
     62a:	42 81       	ldd	r20, Z+2	; 0x02
     62c:	53 81       	ldd	r21, Z+3	; 0x03
     62e:	c5 01       	movw	r24, r10
     630:	b4 01       	movw	r22, r8
     632:	0e 94 1d 0c 	call	0x183a	; 0x183a <__mulsf3>
     636:	9b 01       	movw	r18, r22
     638:	ac 01       	movw	r20, r24
     63a:	eb 85       	ldd	r30, Y+11	; 0x0b
     63c:	fc 85       	ldd	r31, Y+12	; 0x0c
     63e:	60 81       	ld	r22, Z
     640:	71 81       	ldd	r23, Z+1	; 0x01
     642:	82 81       	ldd	r24, Z+2	; 0x02
     644:	93 81       	ldd	r25, Z+3	; 0x03
     646:	0e 94 82 0a 	call	0x1504	; 0x1504 <__subsf3>
     64a:	eb 85       	ldd	r30, Y+11	; 0x0b
     64c:	fc 85       	ldd	r31, Y+12	; 0x0c
     64e:	60 83       	st	Z, r22
     650:	71 83       	std	Z+1, r23	; 0x01
     652:	82 83       	std	Z+2, r24	; 0x02
     654:	93 83       	std	Z+3, r25	; 0x03
     656:	38 96       	adiw	r30, 0x08	; 8
     658:	fc 87       	std	Y+12, r31	; 0x0c
     65a:	eb 87       	std	Y+11, r30	; 0x0b
     65c:	08 5f       	subi	r16, 0xF8	; 248
     65e:	1f 4f       	sbci	r17, 0xFF	; 255
     660:	ee 15       	cp	r30, r14
     662:	ff 05       	cpc	r31, r15
     664:	f9 f6       	brne	.-66     	; 0x624 <__LOCK_REGION_LENGTH__+0x224>
			 A[k][k] += sigma[k];
			 gamma[k] = 1.0/(sigma[k]*A[k][k]);
			 sigma[k] *= max;
			 
			 /* aplica a matriz Q em todo o restante da matriz, sem calcular a matriz Q propriamente, e sim (a - gamma*u*(ut*a)), onde a são os vetores da matriz A */
			 for (j=k+1; j<n; j++) {
     666:	ff ef       	ldi	r31, 0xFF	; 255
     668:	6f 1a       	sub	r6, r31
     66a:	7f 0a       	sbc	r7, r31
     66c:	24 e0       	ldi	r18, 0x04	; 4
     66e:	c2 0e       	add	r12, r18
     670:	d1 1c       	adc	r13, r1
     672:	46 14       	cp	r4, r6
     674:	57 04       	cpc	r5, r7
     676:	09 f4       	brne	.+2      	; 0x67a <__LOCK_REGION_LENGTH__+0x27a>
     678:	d1 cd       	rjmp	.-1118   	; 0x21c <QR+0x160>
			 sigma[k] = sigma[max_vetor];
			 sigma[max_vetor] = aux;
		 }
		 /* seleciona o maior elemento em módulo do vetor, para normalizá-lo */
		 for (i=k; i<m; i++) if (fabs(A[i][k])>max) max = fabs(A[i][k]);
		 if (fabs(max) <= EPSILON) gamma[k] = 0.0;
     67a:	dc 86       	std	Y+12, r13	; 0x0c
     67c:	cb 86       	std	Y+11, r12	; 0x0b
     67e:	09 81       	ldd	r16, Y+1	; 0x01
     680:	1a 81       	ldd	r17, Y+2	; 0x02
     682:	af 84       	ldd	r10, Y+15	; 0x0f
     684:	b8 88       	ldd	r11, Y+16	; 0x10
     686:	e9 88       	ldd	r14, Y+17	; 0x11
     688:	fa 88       	ldd	r15, Y+18	; 0x12
     68a:	a7 cf       	rjmp	.-178    	; 0x5da <__LOCK_REGION_LENGTH__+0x1da>

 int QR(int m, int n, float A[][2], float *sigma, float *gamma, int *p) {
	 int i, j, k=0, l, max_vetor;
	 float max, f, max_norma, aux;
	 /* laço que calcula a norma de todos os vetores da matriz */
	 for (j=0; j<n; j++) {
     68c:	1c 86       	std	Y+12, r1	; 0x0c
     68e:	1b 86       	std	Y+11, r1	; 0x0b
     690:	55 c0       	rjmp	.+170    	; 0x73c <__LOCK_REGION_LENGTH__+0x33c>
	 for (k=0; k<n; k++) {
		 max = 0.0;
		 /* se não é a primeira iteração, recalcula a norma dos vetores, com uma dimensão menor do que a iteração anterior */
		 if (k>0) for (j=k; j<n; j++) sigma[j] = sqrt(fabs(sigma[j]*sigma[j]-A[k-1][j]*A[k-1][j]));
		 /* laço que procura o vetor de maior norma da submatriz da iteração (para colocar os vetores de norma 0 à direita da matriz, se existirem) */
		 for (l=k, max_norma = sigma[l], max_vetor = l; l<n; l++) {
     692:	89 85       	ldd	r24, Y+9	; 0x09
     694:	9a 85       	ldd	r25, Y+10	; 0x0a
     696:	9e 87       	std	Y+14, r25	; 0x0e
     698:	8d 87       	std	Y+13, r24	; 0x0d
			 if (max_norma < sigma[l]) { max_norma = sigma[l]; max_vetor = l; }
		 }
		 if (max_norma <= EPSILON) return k;
     69a:	2c ea       	ldi	r18, 0xAC	; 172
     69c:	35 ec       	ldi	r19, 0xC5	; 197
     69e:	47 e2       	ldi	r20, 0x27	; 39
     6a0:	57 e3       	ldi	r21, 0x37	; 55
     6a2:	fc 01       	movw	r30, r24
     6a4:	60 81       	ld	r22, Z
     6a6:	71 81       	ldd	r23, Z+1	; 0x01
     6a8:	82 81       	ldd	r24, Z+2	; 0x02
     6aa:	93 81       	ldd	r25, Z+3	; 0x03
     6ac:	0e 94 ef 0a 	call	0x15de	; 0x15de <__cmpsf2>
     6b0:	18 16       	cp	r1, r24
     6b2:	0c f4       	brge	.+2      	; 0x6b6 <__LOCK_REGION_LENGTH__+0x2b6>
     6b4:	c8 ce       	rjmp	.-624    	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
     6b6:	42 c0       	rjmp	.+132    	; 0x73c <__LOCK_REGION_LENGTH__+0x33c>
	 for (k=0; k<n; k++) {
		 max = 0.0;
		 /* se não é a primeira iteração, recalcula a norma dos vetores, com uma dimensão menor do que a iteração anterior */
		 if (k>0) for (j=k; j<n; j++) sigma[j] = sqrt(fabs(sigma[j]*sigma[j]-A[k-1][j]*A[k-1][j]));
		 /* laço que procura o vetor de maior norma da submatriz da iteração (para colocar os vetores de norma 0 à direita da matriz, se existirem) */
		 for (l=k, max_norma = sigma[l], max_vetor = l; l<n; l++) {
     6b8:	29 85       	ldd	r18, Y+9	; 0x09
     6ba:	3a 85       	ldd	r19, Y+10	; 0x0a
     6bc:	3e 87       	std	Y+14, r19	; 0x0e
     6be:	2d 87       	std	Y+13, r18	; 0x0d
     6c0:	f9 01       	movw	r30, r18
     6c2:	80 80       	ld	r8, Z
     6c4:	91 80       	ldd	r9, Z+1	; 0x01
     6c6:	a2 80       	ldd	r10, Z+2	; 0x02
     6c8:	b3 80       	ldd	r11, Z+3	; 0x03
     6ca:	33 ce       	rjmp	.-922    	; 0x332 <QR+0x276>
			 if (max_norma < sigma[l]) { max_norma = sigma[l]; max_vetor = l; }
		 }
		 if (max_norma <= EPSILON) return k;
     6cc:	2c ea       	ldi	r18, 0xAC	; 172
     6ce:	35 ec       	ldi	r19, 0xC5	; 197
     6d0:	47 e2       	ldi	r20, 0x27	; 39
     6d2:	57 e3       	ldi	r21, 0x37	; 55
     6d4:	68 2d       	mov	r22, r8
     6d6:	79 2d       	mov	r23, r9
     6d8:	8a 2d       	mov	r24, r10
     6da:	9b 2d       	mov	r25, r11
     6dc:	0e 94 ef 0a 	call	0x15de	; 0x15de <__cmpsf2>
     6e0:	18 16       	cp	r1, r24
     6e2:	0c f4       	brge	.+2      	; 0x6e6 <__LOCK_REGION_LENGTH__+0x2e6>
     6e4:	b0 ce       	rjmp	.-672    	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
     6e6:	2a c0       	rjmp	.+84     	; 0x73c <__LOCK_REGION_LENGTH__+0x33c>
			 sigma[k] = sigma[max_vetor];
			 sigma[max_vetor] = aux;
		 }
		 /* seleciona o maior elemento em módulo do vetor, para normalizá-lo */
		 for (i=k; i<m; i++) if (fabs(A[i][k])>max) max = fabs(A[i][k]);
		 if (fabs(max) <= EPSILON) gamma[k] = 0.0;
     6e8:	2c ea       	ldi	r18, 0xAC	; 172
     6ea:	35 ec       	ldi	r19, 0xC5	; 197
     6ec:	47 e2       	ldi	r20, 0x27	; 39
     6ee:	57 e3       	ldi	r21, 0x37	; 55
     6f0:	c7 01       	movw	r24, r14
     6f2:	b6 01       	movw	r22, r12
     6f4:	9f 77       	andi	r25, 0x7F	; 127
     6f6:	0e 94 ef 0a 	call	0x15de	; 0x15de <__cmpsf2>
     6fa:	18 16       	cp	r1, r24
     6fc:	0c f0       	brlt	.+2      	; 0x700 <__LOCK_REGION_LENGTH__+0x300>
     6fe:	d0 ce       	rjmp	.-608    	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
     700:	29 81       	ldd	r18, Y+1	; 0x01
     702:	3a 81       	ldd	r19, Y+2	; 0x02
     704:	3c 83       	std	Y+4, r19	; 0x04
     706:	2b 83       	std	Y+3, r18	; 0x03
     708:	da ce       	rjmp	.-588    	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
		 sigma[j] = sqrt(sigma[j]);
		 gamma[j] = 0.0;
		 p[j] = j;
	 }
	 /* laço externo que itera o algoritmo decomposição QR em toda a matriz A */
	 for (k=0; k<n; k++) {
     70a:	8b 85       	ldd	r24, Y+11	; 0x0b
     70c:	9c 85       	ldd	r25, Y+12	; 0x0c
     70e:	01 96       	adiw	r24, 0x01	; 1
     710:	9c 87       	std	Y+12, r25	; 0x0c
     712:	8b 87       	std	Y+11, r24	; 0x0b
     714:	13 c0       	rjmp	.+38     	; 0x73c <__LOCK_REGION_LENGTH__+0x33c>
			 
			 /* aplica a matriz Q em todo o restante da matriz, sem calcular a matriz Q propriamente, e sim (a - gamma*u*(ut*a)), onde a são os vetores da matriz A */
			 for (j=k+1; j<n; j++) {
				 f = 0.0;
				 for (i=k; i<m; i++) f += A[i][k]*A[i][j];
				 f *= gamma[k];
     716:	eb 81       	ldd	r30, Y+3	; 0x03
     718:	fc 81       	ldd	r31, Y+4	; 0x04
     71a:	20 81       	ld	r18, Z
     71c:	31 81       	ldd	r19, Z+1	; 0x01
     71e:	42 81       	ldd	r20, Z+2	; 0x02
     720:	53 81       	ldd	r21, Z+3	; 0x03
     722:	0e 94 1d 0c 	call	0x183a	; 0x183a <__mulsf3>
     726:	4b 01       	movw	r8, r22
     728:	5c 01       	movw	r10, r24
     72a:	ef 80       	ldd	r14, Y+7	; 0x07
     72c:	f8 84       	ldd	r15, Y+8	; 0x08
     72e:	ec 0c       	add	r14, r12
     730:	fd 1c       	adc	r15, r13
     732:	09 81       	ldd	r16, Y+1	; 0x01
     734:	1a 81       	ldd	r17, Y+2	; 0x02
     736:	dc 86       	std	Y+12, r13	; 0x0c
     738:	cb 86       	std	Y+11, r12	; 0x0b
     73a:	74 cf       	rjmp	.-280    	; 0x624 <__LOCK_REGION_LENGTH__+0x224>
			 }
		 }
	 }
	 /* o valor que essa função devolve é a dimensão de R11 */
	 return k;
 }
     73c:	8b 85       	ldd	r24, Y+11	; 0x0b
     73e:	9c 85       	ldd	r25, Y+12	; 0x0c
     740:	a4 96       	adiw	r28, 0x24	; 36
     742:	0f b6       	in	r0, 0x3f	; 63
     744:	f8 94       	cli
     746:	de bf       	out	0x3e, r29	; 62
     748:	0f be       	out	0x3f, r0	; 63
     74a:	cd bf       	out	0x3d, r28	; 61
     74c:	df 91       	pop	r29
     74e:	cf 91       	pop	r28
     750:	1f 91       	pop	r17
     752:	0f 91       	pop	r16
     754:	ff 90       	pop	r15
     756:	ef 90       	pop	r14
     758:	df 90       	pop	r13
     75a:	cf 90       	pop	r12
     75c:	bf 90       	pop	r11
     75e:	af 90       	pop	r10
     760:	9f 90       	pop	r9
     762:	8f 90       	pop	r8
     764:	7f 90       	pop	r7
     766:	6f 90       	pop	r6
     768:	5f 90       	pop	r5
     76a:	4f 90       	pop	r4
     76c:	3f 90       	pop	r3
     76e:	2f 90       	pop	r2
     770:	08 95       	ret

00000772 <backrow>:

 int backrow(int n, float A[][2], float *b) {
     772:	2f 92       	push	r2
     774:	3f 92       	push	r3
     776:	4f 92       	push	r4
     778:	5f 92       	push	r5
     77a:	6f 92       	push	r6
     77c:	7f 92       	push	r7
     77e:	8f 92       	push	r8
     780:	9f 92       	push	r9
     782:	af 92       	push	r10
     784:	bf 92       	push	r11
     786:	cf 92       	push	r12
     788:	df 92       	push	r13
     78a:	ef 92       	push	r14
     78c:	ff 92       	push	r15
     78e:	0f 93       	push	r16
     790:	1f 93       	push	r17
     792:	cf 93       	push	r28
     794:	df 93       	push	r29
     796:	00 d0       	rcall	.+0      	; 0x798 <backrow+0x26>
     798:	00 d0       	rcall	.+0      	; 0x79a <backrow+0x28>
     79a:	cd b7       	in	r28, 0x3d	; 61
     79c:	de b7       	in	r29, 0x3e	; 62
	 int i, j;
	 for (i= n-1; i>=0; i--) {
     79e:	2c 01       	movw	r4, r24
     7a0:	21 e0       	ldi	r18, 0x01	; 1
     7a2:	42 1a       	sub	r4, r18
     7a4:	51 08       	sbc	r5, r1
     7a6:	0a f4       	brpl	.+2      	; 0x7aa <backrow+0x38>
     7a8:	7e c0       	rjmp	.+252    	; 0x8a6 <backrow+0x134>
     7aa:	1a 01       	movw	r2, r20
     7ac:	3b 01       	movw	r6, r22
     7ae:	9c 01       	movw	r18, r24
     7b0:	22 0f       	add	r18, r18
     7b2:	33 1f       	adc	r19, r19
     7b4:	22 0f       	add	r18, r18
     7b6:	33 1f       	adc	r19, r19
     7b8:	42 0f       	add	r20, r18
     7ba:	53 1f       	adc	r21, r19
     7bc:	5a 83       	std	Y+2, r21	; 0x02
     7be:	49 83       	std	Y+1, r20	; 0x01
     7c0:	7c 01       	movw	r14, r24
     7c2:	ee 0c       	add	r14, r14
     7c4:	ff 1c       	adc	r15, r15
     7c6:	e8 0e       	add	r14, r24
     7c8:	f9 1e       	adc	r15, r25
     7ca:	ee 0c       	add	r14, r14
     7cc:	ff 1c       	adc	r15, r15
     7ce:	ee 0c       	add	r14, r14
     7d0:	ff 1c       	adc	r15, r15
     7d2:	5c e0       	ldi	r21, 0x0C	; 12
     7d4:	e5 1a       	sub	r14, r21
     7d6:	f1 08       	sbc	r15, r1
     7d8:	e6 0e       	add	r14, r22
     7da:	f7 1e       	adc	r15, r23
     7dc:	9c 01       	movw	r18, r24
     7de:	22 50       	subi	r18, 0x02	; 2
     7e0:	31 09       	sbc	r19, r1
     7e2:	22 0f       	add	r18, r18
     7e4:	33 1f       	adc	r19, r19
     7e6:	81 50       	subi	r24, 0x01	; 1
     7e8:	90 4c       	sbci	r25, 0xC0	; 192
     7ea:	82 0f       	add	r24, r18
     7ec:	93 1f       	adc	r25, r19
     7ee:	88 0f       	add	r24, r24
     7f0:	99 1f       	adc	r25, r25
     7f2:	88 0f       	add	r24, r24
     7f4:	99 1f       	adc	r25, r25
     7f6:	04 96       	adiw	r24, 0x04	; 4
     7f8:	68 0e       	add	r6, r24
     7fa:	79 1e       	adc	r7, r25
     7fc:	89 81       	ldd	r24, Y+1	; 0x01
     7fe:	9a 81       	ldd	r25, Y+2	; 0x02
     800:	9c 83       	std	Y+4, r25	; 0x04
     802:	8b 83       	std	Y+3, r24	; 0x03
     804:	42 01       	movw	r8, r4
     806:	2d c0       	rjmp	.+90     	; 0x862 <backrow+0xf0>
		 for (j=n-1; j>i; j--) {
     808:	09 81       	ldd	r16, Y+1	; 0x01
     80a:	1a 81       	ldd	r17, Y+2	; 0x02
     80c:	53 01       	movw	r10, r6
     80e:	94 e0       	ldi	r25, 0x04	; 4
     810:	c9 1a       	sub	r12, r25
     812:	d1 08       	sbc	r13, r1
			 b[i] -= A[i][j]*b[j];
     814:	f8 01       	movw	r30, r16
     816:	52 91       	ld	r21, -Z
     818:	42 91       	ld	r20, -Z
     81a:	32 91       	ld	r19, -Z
     81c:	22 91       	ld	r18, -Z
     81e:	8f 01       	movw	r16, r30
     820:	f5 01       	movw	r30, r10
     822:	92 91       	ld	r25, -Z
     824:	82 91       	ld	r24, -Z
     826:	72 91       	ld	r23, -Z
     828:	62 91       	ld	r22, -Z
     82a:	5f 01       	movw	r10, r30
     82c:	0e 94 1d 0c 	call	0x183a	; 0x183a <__mulsf3>
     830:	9b 01       	movw	r18, r22
     832:	ac 01       	movw	r20, r24
     834:	f6 01       	movw	r30, r12
     836:	60 81       	ld	r22, Z
     838:	71 81       	ldd	r23, Z+1	; 0x01
     83a:	82 81       	ldd	r24, Z+2	; 0x02
     83c:	93 81       	ldd	r25, Z+3	; 0x03
     83e:	0e 94 82 0a 	call	0x1504	; 0x1504 <__subsf3>
     842:	f6 01       	movw	r30, r12
     844:	60 83       	st	Z, r22
     846:	71 83       	std	Z+1, r23	; 0x01
     848:	82 83       	std	Z+2, r24	; 0x02
     84a:	93 83       	std	Z+3, r25	; 0x03
 }

 int backrow(int n, float A[][2], float *b) {
	 int i, j;
	 for (i= n-1; i>=0; i--) {
		 for (j=n-1; j>i; j--) {
     84c:	4b 81       	ldd	r20, Y+3	; 0x03
     84e:	5c 81       	ldd	r21, Y+4	; 0x04
     850:	04 17       	cp	r16, r20
     852:	15 07       	cpc	r17, r21
     854:	f9 f6       	brne	.-66     	; 0x814 <backrow+0xa2>
     856:	5c e0       	ldi	r21, 0x0C	; 12
     858:	e5 1a       	sub	r14, r21
     85a:	f1 08       	sbc	r15, r1
     85c:	88 e0       	ldi	r24, 0x08	; 8
     85e:	68 1a       	sub	r6, r24
     860:	71 08       	sbc	r7, r1
     862:	eb 81       	ldd	r30, Y+3	; 0x03
     864:	fc 81       	ldd	r31, Y+4	; 0x04
     866:	34 97       	sbiw	r30, 0x04	; 4
     868:	fc 83       	std	Y+4, r31	; 0x04
     86a:	eb 83       	std	Y+3, r30	; 0x03
     86c:	6f 01       	movw	r12, r30
			 b[i] -= A[i][j]*b[j];
		 }
		 b[i] /= A[i][i];
     86e:	f7 01       	movw	r30, r14
     870:	20 81       	ld	r18, Z
     872:	31 81       	ldd	r19, Z+1	; 0x01
     874:	42 81       	ldd	r20, Z+2	; 0x02
     876:	53 81       	ldd	r21, Z+3	; 0x03
     878:	f6 01       	movw	r30, r12
     87a:	60 81       	ld	r22, Z
     87c:	71 81       	ldd	r23, Z+1	; 0x01
     87e:	82 81       	ldd	r24, Z+2	; 0x02
     880:	93 81       	ldd	r25, Z+3	; 0x03
     882:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <__divsf3>
     886:	f6 01       	movw	r30, r12
     888:	60 83       	st	Z, r22
     88a:	71 83       	std	Z+1, r23	; 0x01
     88c:	82 83       	std	Z+2, r24	; 0x02
     88e:	93 83       	std	Z+3, r25	; 0x03
	 return k;
 }

 int backrow(int n, float A[][2], float *b) {
	 int i, j;
	 for (i= n-1; i>=0; i--) {
     890:	f1 e0       	ldi	r31, 0x01	; 1
     892:	8f 1a       	sub	r8, r31
     894:	91 08       	sbc	r9, r1
     896:	c2 14       	cp	r12, r2
     898:	d3 04       	cpc	r13, r3
     89a:	29 f0       	breq	.+10     	; 0x8a6 <backrow+0x134>
		 for (j=n-1; j>i; j--) {
     89c:	84 14       	cp	r8, r4
     89e:	95 04       	cpc	r9, r5
     8a0:	0c f4       	brge	.+2      	; 0x8a4 <backrow+0x132>
     8a2:	b2 cf       	rjmp	.-156    	; 0x808 <backrow+0x96>
     8a4:	d8 cf       	rjmp	.-80     	; 0x856 <backrow+0xe4>
			 b[i] -= A[i][j]*b[j];
		 }
		 b[i] /= A[i][i];
	 }
	 return 0;
 }
     8a6:	80 e0       	ldi	r24, 0x00	; 0
     8a8:	90 e0       	ldi	r25, 0x00	; 0
     8aa:	0f 90       	pop	r0
     8ac:	0f 90       	pop	r0
     8ae:	0f 90       	pop	r0
     8b0:	0f 90       	pop	r0
     8b2:	df 91       	pop	r29
     8b4:	cf 91       	pop	r28
     8b6:	1f 91       	pop	r17
     8b8:	0f 91       	pop	r16
     8ba:	ff 90       	pop	r15
     8bc:	ef 90       	pop	r14
     8be:	df 90       	pop	r13
     8c0:	cf 90       	pop	r12
     8c2:	bf 90       	pop	r11
     8c4:	af 90       	pop	r10
     8c6:	9f 90       	pop	r9
     8c8:	8f 90       	pop	r8
     8ca:	7f 90       	pop	r7
     8cc:	6f 90       	pop	r6
     8ce:	5f 90       	pop	r5
     8d0:	4f 90       	pop	r4
     8d2:	3f 90       	pop	r3
     8d4:	2f 90       	pop	r2
     8d6:	08 95       	ret

000008d8 <permutation>:

 int permutation(int n, float *v, int *p, int inverse) { /* permuta os elementos do vetor de acordo com o vetor de permutação p */
     8d8:	cf 92       	push	r12
     8da:	df 92       	push	r13
     8dc:	ef 92       	push	r14
     8de:	ff 92       	push	r15
     8e0:	0f 93       	push	r16
     8e2:	1f 93       	push	r17
     8e4:	cf 93       	push	r28
     8e6:	df 93       	push	r29
	 int i;
	 float aux;
	 if (!inverse) {
     8e8:	23 2b       	or	r18, r19
     8ea:	31 f5       	brne	.+76     	; 0x938 <__stack+0x39>
		 for (i=0; i<n; i++) {
     8ec:	18 16       	cp	r1, r24
     8ee:	19 06       	cpc	r1, r25
     8f0:	0c f0       	brlt	.+2      	; 0x8f4 <permutation+0x1c>
     8f2:	4f c0       	rjmp	.+158    	; 0x992 <__stack+0x93>
     8f4:	da 01       	movw	r26, r20
     8f6:	eb 01       	movw	r28, r22
     8f8:	88 0f       	add	r24, r24
     8fa:	99 1f       	adc	r25, r25
     8fc:	48 0f       	add	r20, r24
     8fe:	59 1f       	adc	r21, r25
			 aux = v[p[i]];
     900:	ed 91       	ld	r30, X+
     902:	fd 91       	ld	r31, X+
     904:	ee 0f       	add	r30, r30
     906:	ff 1f       	adc	r31, r31
     908:	ee 0f       	add	r30, r30
     90a:	ff 1f       	adc	r31, r31
     90c:	e6 0f       	add	r30, r22
     90e:	f7 1f       	adc	r31, r23
     910:	00 81       	ld	r16, Z
     912:	11 81       	ldd	r17, Z+1	; 0x01
     914:	22 81       	ldd	r18, Z+2	; 0x02
     916:	33 81       	ldd	r19, Z+3	; 0x03
			 v[p[i]] = v[i];
     918:	c8 80       	ld	r12, Y
     91a:	d9 80       	ldd	r13, Y+1	; 0x01
     91c:	ea 80       	ldd	r14, Y+2	; 0x02
     91e:	fb 80       	ldd	r15, Y+3	; 0x03
     920:	c0 82       	st	Z, r12
     922:	d1 82       	std	Z+1, r13	; 0x01
     924:	e2 82       	std	Z+2, r14	; 0x02
     926:	f3 82       	std	Z+3, r15	; 0x03
			 v[i] = aux;
     928:	09 93       	st	Y+, r16
     92a:	19 93       	st	Y+, r17
     92c:	29 93       	st	Y+, r18
     92e:	39 93       	st	Y+, r19

 int permutation(int n, float *v, int *p, int inverse) { /* permuta os elementos do vetor de acordo com o vetor de permutação p */
	 int i;
	 float aux;
	 if (!inverse) {
		 for (i=0; i<n; i++) {
     930:	a4 17       	cp	r26, r20
     932:	b5 07       	cpc	r27, r21
     934:	29 f7       	brne	.-54     	; 0x900 <__stack+0x1>
     936:	2d c0       	rjmp	.+90     	; 0x992 <__stack+0x93>
			 aux = v[p[i]];
			 v[p[i]] = v[i];
			 v[i] = aux;
		 }
		 } else {
		 for (i = n-1; i>=0; i--) {
     938:	9c 01       	movw	r18, r24
     93a:	21 50       	subi	r18, 0x01	; 1
     93c:	31 09       	sbc	r19, r1
     93e:	4a f1       	brmi	.+82     	; 0x992 <__stack+0x93>
     940:	ec 01       	movw	r28, r24
     942:	cc 0f       	add	r28, r28
     944:	dd 1f       	adc	r29, r29
     946:	c4 0f       	add	r28, r20
     948:	d5 1f       	adc	r29, r21
     94a:	88 0f       	add	r24, r24
     94c:	99 1f       	adc	r25, r25
     94e:	88 0f       	add	r24, r24
     950:	99 1f       	adc	r25, r25
     952:	db 01       	movw	r26, r22
     954:	a8 0f       	add	r26, r24
     956:	b9 1f       	adc	r27, r25
     958:	cb 01       	movw	r24, r22
			 aux = v[p[i]];
     95a:	fa 91       	ld	r31, -Y
     95c:	ea 91       	ld	r30, -Y
     95e:	ee 0f       	add	r30, r30
     960:	ff 1f       	adc	r31, r31
     962:	ee 0f       	add	r30, r30
     964:	ff 1f       	adc	r31, r31
     966:	e6 0f       	add	r30, r22
     968:	f7 1f       	adc	r31, r23
     96a:	00 81       	ld	r16, Z
     96c:	11 81       	ldd	r17, Z+1	; 0x01
     96e:	22 81       	ldd	r18, Z+2	; 0x02
     970:	33 81       	ldd	r19, Z+3	; 0x03
			 v[p[i]] = v[i];
     972:	fe 90       	ld	r15, -X
     974:	ee 90       	ld	r14, -X
     976:	de 90       	ld	r13, -X
     978:	ce 90       	ld	r12, -X
     97a:	c0 82       	st	Z, r12
     97c:	d1 82       	std	Z+1, r13	; 0x01
     97e:	e2 82       	std	Z+2, r14	; 0x02
     980:	f3 82       	std	Z+3, r15	; 0x03
			 v[i] = aux;
     982:	0d 93       	st	X+, r16
     984:	1d 93       	st	X+, r17
     986:	2d 93       	st	X+, r18
     988:	3c 93       	st	X, r19
     98a:	13 97       	sbiw	r26, 0x03	; 3
			 aux = v[p[i]];
			 v[p[i]] = v[i];
			 v[i] = aux;
		 }
		 } else {
		 for (i = n-1; i>=0; i--) {
     98c:	a8 17       	cp	r26, r24
     98e:	b9 07       	cpc	r27, r25
     990:	21 f7       	brne	.-56     	; 0x95a <__stack+0x5b>
			 v[p[i]] = v[i];
			 v[i] = aux;
		 }
	 }
	 return 0;
 }
     992:	80 e0       	ldi	r24, 0x00	; 0
     994:	90 e0       	ldi	r25, 0x00	; 0
     996:	df 91       	pop	r29
     998:	cf 91       	pop	r28
     99a:	1f 91       	pop	r17
     99c:	0f 91       	pop	r16
     99e:	ff 90       	pop	r15
     9a0:	ef 90       	pop	r14
     9a2:	df 90       	pop	r13
     9a4:	cf 90       	pop	r12
     9a6:	08 95       	ret

000009a8 <solveLeastSquare>:

 int solveLeastSquare(int m, int n, float A[][2], float *b, float *sigma, float *gamma, int *p, int r) {
     9a8:	2f 92       	push	r2
     9aa:	3f 92       	push	r3
     9ac:	4f 92       	push	r4
     9ae:	5f 92       	push	r5
     9b0:	6f 92       	push	r6
     9b2:	7f 92       	push	r7
     9b4:	8f 92       	push	r8
     9b6:	9f 92       	push	r9
     9b8:	af 92       	push	r10
     9ba:	bf 92       	push	r11
     9bc:	cf 92       	push	r12
     9be:	df 92       	push	r13
     9c0:	ef 92       	push	r14
     9c2:	ff 92       	push	r15
     9c4:	0f 93       	push	r16
     9c6:	1f 93       	push	r17
     9c8:	cf 93       	push	r28
     9ca:	df 93       	push	r29
     9cc:	cd b7       	in	r28, 0x3d	; 61
     9ce:	de b7       	in	r29, 0x3e	; 62
     9d0:	60 97       	sbiw	r28, 0x10	; 16
     9d2:	0f b6       	in	r0, 0x3f	; 63
     9d4:	f8 94       	cli
     9d6:	de bf       	out	0x3e, r29	; 62
     9d8:	0f be       	out	0x3f, r0	; 63
     9da:	cd bf       	out	0x3d, r28	; 61
     9dc:	9c 83       	std	Y+4, r25	; 0x04
     9de:	8b 83       	std	Y+3, r24	; 0x03
     9e0:	4f 83       	std	Y+7, r20	; 0x07
     9e2:	58 87       	std	Y+8, r21	; 0x08
     9e4:	3e 83       	std	Y+6, r19	; 0x06
     9e6:	2d 83       	std	Y+5, r18	; 0x05
     9e8:	1c 87       	std	Y+12, r17	; 0x0c
     9ea:	0b 87       	std	Y+11, r16	; 0x0b
     9ec:	de 86       	std	Y+14, r13	; 0x0e
     9ee:	cd 86       	std	Y+13, r12	; 0x0d
     9f0:	ba 82       	std	Y+2, r11	; 0x02
     9f2:	a9 82       	std	Y+1, r10	; 0x01
	 int i, j;
	 float f, aux;
	 /* aplica a matriz Q no vetor b, sem calcular a matriz Q propriamente, e sim (b - gamma*u*(ut*b)) */
	 for (j=0; j<r; j++) {
     9f4:	1a 14       	cp	r1, r10
     9f6:	1b 04       	cpc	r1, r11
     9f8:	0c f0       	brlt	.+2      	; 0x9fc <solveLeastSquare+0x54>
     9fa:	99 c0       	rjmp	.+306    	; 0xb2e <solveLeastSquare+0x186>
     9fc:	49 87       	std	Y+9, r20	; 0x09
     9fe:	5a 87       	std	Y+10, r21	; 0x0a
     a00:	6d 80       	ldd	r6, Y+5	; 0x05
     a02:	7e 80       	ldd	r7, Y+6	; 0x06
     a04:	2e 2c       	mov	r2, r14
     a06:	3f 2c       	mov	r3, r15
     a08:	7c 01       	movw	r14, r24
     a0a:	ee 0c       	add	r14, r14
     a0c:	ff 1c       	adc	r15, r15
     a0e:	ee 0c       	add	r14, r14
     a10:	ff 1c       	adc	r15, r15
     a12:	e6 0c       	add	r14, r6
     a14:	f7 1c       	adc	r15, r7
     a16:	44 2e       	mov	r4, r20
     a18:	55 2e       	mov	r5, r21
     a1a:	81 2c       	mov	r8, r1
     a1c:	91 2c       	mov	r9, r1
     a1e:	5c c0       	rjmp	.+184    	; 0xad8 <solveLeastSquare+0x130>
		 f = 0.0;
		 for (i=j; i<m; i++) f += A[i][j]*b[i];
     a20:	53 01       	movw	r10, r6
     a22:	58 8a       	std	Y+16, r5	; 0x10
     a24:	4f 86       	std	Y+15, r4	; 0x0f
     a26:	c1 2c       	mov	r12, r1
     a28:	d1 2c       	mov	r13, r1
     a2a:	00 e0       	ldi	r16, 0x00	; 0
     a2c:	10 e0       	ldi	r17, 0x00	; 0
     a2e:	d5 01       	movw	r26, r10
     a30:	6d 91       	ld	r22, X+
     a32:	7d 91       	ld	r23, X+
     a34:	8d 91       	ld	r24, X+
     a36:	9d 91       	ld	r25, X+
     a38:	5d 01       	movw	r10, r26
     a3a:	ef 85       	ldd	r30, Y+15	; 0x0f
     a3c:	f8 89       	ldd	r31, Y+16	; 0x10
     a3e:	20 81       	ld	r18, Z
     a40:	31 81       	ldd	r19, Z+1	; 0x01
     a42:	42 81       	ldd	r20, Z+2	; 0x02
     a44:	53 81       	ldd	r21, Z+3	; 0x03
     a46:	0e 94 1d 0c 	call	0x183a	; 0x183a <__mulsf3>
     a4a:	9b 01       	movw	r18, r22
     a4c:	ac 01       	movw	r20, r24
     a4e:	6c 2d       	mov	r22, r12
     a50:	7d 2d       	mov	r23, r13
     a52:	80 2f       	mov	r24, r16
     a54:	91 2f       	mov	r25, r17
     a56:	0e 94 83 0a 	call	0x1506	; 0x1506 <__addsf3>
     a5a:	c6 2e       	mov	r12, r22
     a5c:	d7 2e       	mov	r13, r23
     a5e:	08 2f       	mov	r16, r24
     a60:	19 2f       	mov	r17, r25
     a62:	2f 85       	ldd	r18, Y+15	; 0x0f
     a64:	38 89       	ldd	r19, Y+16	; 0x10
     a66:	28 5f       	subi	r18, 0xF8	; 248
     a68:	3f 4f       	sbci	r19, 0xFF	; 255
     a6a:	38 8b       	std	Y+16, r19	; 0x10
     a6c:	2f 87       	std	Y+15, r18	; 0x0f
     a6e:	ae 14       	cp	r10, r14
     a70:	bf 04       	cpc	r11, r15
     a72:	e9 f6       	brne	.-70     	; 0xa2e <solveLeastSquare+0x86>
     a74:	85 c0       	rjmp	.+266    	; 0xb80 <solveLeastSquare+0x1d8>
		 f *= gamma[j];
		 for (i=j; i<m; i++) b[i] -= f*A[i][j];
     a76:	d8 01       	movw	r26, r16
     a78:	2d 91       	ld	r18, X+
     a7a:	3d 91       	ld	r19, X+
     a7c:	4d 91       	ld	r20, X+
     a7e:	5c 91       	ld	r21, X
     a80:	c6 01       	movw	r24, r12
     a82:	b5 01       	movw	r22, r10
     a84:	0e 94 1d 0c 	call	0x183a	; 0x183a <__mulsf3>
     a88:	9b 01       	movw	r18, r22
     a8a:	ac 01       	movw	r20, r24
     a8c:	ef 85       	ldd	r30, Y+15	; 0x0f
     a8e:	f8 89       	ldd	r31, Y+16	; 0x10
     a90:	60 81       	ld	r22, Z
     a92:	71 81       	ldd	r23, Z+1	; 0x01
     a94:	82 81       	ldd	r24, Z+2	; 0x02
     a96:	93 81       	ldd	r25, Z+3	; 0x03
     a98:	0e 94 82 0a 	call	0x1504	; 0x1504 <__subsf3>
     a9c:	af 85       	ldd	r26, Y+15	; 0x0f
     a9e:	b8 89       	ldd	r27, Y+16	; 0x10
     aa0:	6d 93       	st	X+, r22
     aa2:	7d 93       	st	X+, r23
     aa4:	8d 93       	st	X+, r24
     aa6:	9d 93       	st	X+, r25
     aa8:	b8 8b       	std	Y+16, r27	; 0x10
     aaa:	af 87       	std	Y+15, r26	; 0x0f
     aac:	08 5f       	subi	r16, 0xF8	; 248
     aae:	1f 4f       	sbci	r17, 0xFF	; 255
     ab0:	ae 15       	cp	r26, r14
     ab2:	bf 05       	cpc	r27, r15
     ab4:	01 f7       	brne	.-64     	; 0xa76 <solveLeastSquare+0xce>

 int solveLeastSquare(int m, int n, float A[][2], float *b, float *sigma, float *gamma, int *p, int r) {
	 int i, j;
	 float f, aux;
	 /* aplica a matriz Q no vetor b, sem calcular a matriz Q propriamente, e sim (b - gamma*u*(ut*b)) */
	 for (j=0; j<r; j++) {
     ab6:	bf ef       	ldi	r27, 0xFF	; 255
     ab8:	8b 1a       	sub	r8, r27
     aba:	9b 0a       	sbc	r9, r27
     abc:	ec e0       	ldi	r30, 0x0C	; 12
     abe:	4e 0e       	add	r4, r30
     ac0:	51 1c       	adc	r5, r1
     ac2:	f4 e0       	ldi	r31, 0x04	; 4
     ac4:	6f 0e       	add	r6, r31
     ac6:	71 1c       	adc	r7, r1
     ac8:	24 e0       	ldi	r18, 0x04	; 4
     aca:	22 0e       	add	r2, r18
     acc:	31 1c       	adc	r3, r1
     ace:	89 81       	ldd	r24, Y+1	; 0x01
     ad0:	9a 81       	ldd	r25, Y+2	; 0x02
     ad2:	88 15       	cp	r24, r8
     ad4:	99 05       	cpc	r25, r9
     ad6:	39 f0       	breq	.+14     	; 0xae6 <solveLeastSquare+0x13e>
		 f = 0.0;
		 for (i=j; i<m; i++) f += A[i][j]*b[i];
     ad8:	ab 81       	ldd	r26, Y+3	; 0x03
     ada:	bc 81       	ldd	r27, Y+4	; 0x04
     adc:	8a 16       	cp	r8, r26
     ade:	9b 06       	cpc	r9, r27
     ae0:	0c f4       	brge	.+2      	; 0xae4 <solveLeastSquare+0x13c>
     ae2:	9e cf       	rjmp	.-196    	; 0xa20 <solveLeastSquare+0x78>
     ae4:	e8 cf       	rjmp	.-48     	; 0xab6 <solveLeastSquare+0x10e>
     ae6:	eb 85       	ldd	r30, Y+11	; 0x0b
     ae8:	fc 85       	ldd	r31, Y+12	; 0x0c
     aea:	89 81       	ldd	r24, Y+1	; 0x01
     aec:	9a 81       	ldd	r25, Y+2	; 0x02
     aee:	88 0f       	add	r24, r24
     af0:	99 1f       	adc	r25, r25
     af2:	88 0f       	add	r24, r24
     af4:	99 1f       	adc	r25, r25
     af6:	8e 0f       	add	r24, r30
     af8:	9f 1f       	adc	r25, r31
     afa:	a9 85       	ldd	r26, Y+9	; 0x09
     afc:	ba 85       	ldd	r27, Y+10	; 0x0a
		 f *= gamma[j];
		 for (i=j; i<m; i++) b[i] -= f*A[i][j];
	 }
	 /* coloca os (-sigma) na diogonal da matriz (reconstruindo a R) */
	 for (i=0; i<r; i++) {
		 aux = (-1) * sigma[i];
     afe:	40 81       	ld	r20, Z
     b00:	51 81       	ldd	r21, Z+1	; 0x01
     b02:	62 81       	ldd	r22, Z+2	; 0x02
     b04:	73 81       	ldd	r23, Z+3	; 0x03
     b06:	70 58       	subi	r23, 0x80	; 128
		 sigma[i] = A[i][i];
     b08:	0d 91       	ld	r16, X+
     b0a:	1d 91       	ld	r17, X+
     b0c:	2d 91       	ld	r18, X+
     b0e:	3c 91       	ld	r19, X
     b10:	13 97       	sbiw	r26, 0x03	; 3
     b12:	01 93       	st	Z+, r16
     b14:	11 93       	st	Z+, r17
     b16:	21 93       	st	Z+, r18
     b18:	31 93       	st	Z+, r19
		 A[i][i] = aux;
     b1a:	4d 93       	st	X+, r20
     b1c:	5d 93       	st	X+, r21
     b1e:	6d 93       	st	X+, r22
     b20:	7c 93       	st	X, r23
     b22:	13 97       	sbiw	r26, 0x03	; 3
     b24:	1c 96       	adiw	r26, 0x0c	; 12
		 for (i=j; i<m; i++) f += A[i][j]*b[i];
		 f *= gamma[j];
		 for (i=j; i<m; i++) b[i] -= f*A[i][j];
	 }
	 /* coloca os (-sigma) na diogonal da matriz (reconstruindo a R) */
	 for (i=0; i<r; i++) {
     b26:	e8 17       	cp	r30, r24
     b28:	f9 07       	cpc	r31, r25
     b2a:	49 f7       	brne	.-46     	; 0xafe <solveLeastSquare+0x156>
     b2c:	36 c0       	rjmp	.+108    	; 0xb9a <solveLeastSquare+0x1f2>
		 aux = (-1) * sigma[i];
		 sigma[i] = A[i][i];
		 A[i][i] = aux;
	 }
	 /* se a matriz a for de posto-imcompleto, temos que minimizar || c - R11x1 - R12x2 ||, nesta implementação, suponho que x2 = 0, e resolvo o sistema c - R11x = 0 */
	 backrow(r, A, b);
     b2e:	4d 81       	ldd	r20, Y+5	; 0x05
     b30:	5e 81       	ldd	r21, Y+6	; 0x06
     b32:	6f 81       	ldd	r22, Y+7	; 0x07
     b34:	78 85       	ldd	r23, Y+8	; 0x08
     b36:	89 81       	ldd	r24, Y+1	; 0x01
     b38:	9a 81       	ldd	r25, Y+2	; 0x02
     b3a:	0e 94 b9 03 	call	0x772	; 0x772 <backrow>
     b3e:	3f c0       	rjmp	.+126    	; 0xbbe <solveLeastSquare+0x216>
	 /* laço que recoloca os (sigma) no vetor de sigma, e coloca os elemtos de u no lugar novamente */
	 for (i=0; i<r; i++) {
		 aux = sigma[i];
     b40:	db 01       	movw	r26, r22
     b42:	cd 90       	ld	r12, X+
     b44:	dd 90       	ld	r13, X+
     b46:	ed 90       	ld	r14, X+
     b48:	fc 90       	ld	r15, X
		 sigma[i] = (-1) * A[i][i];
     b4a:	80 81       	ld	r24, Z
     b4c:	91 81       	ldd	r25, Z+1	; 0x01
     b4e:	a2 81       	ldd	r26, Z+2	; 0x02
     b50:	b3 81       	ldd	r27, Z+3	; 0x03
     b52:	4c 01       	movw	r8, r24
     b54:	5d 01       	movw	r10, r26
     b56:	b7 fa       	bst	r11, 7
     b58:	b0 94       	com	r11
     b5a:	b7 f8       	bld	r11, 7
     b5c:	b0 94       	com	r11
     b5e:	db 01       	movw	r26, r22
     b60:	8d 92       	st	X+, r8
     b62:	9d 92       	st	X+, r9
     b64:	ad 92       	st	X+, r10
     b66:	bd 92       	st	X+, r11
     b68:	bd 01       	movw	r22, r26
		 A[i][i] = aux;
     b6a:	c0 82       	st	Z, r12
     b6c:	d1 82       	std	Z+1, r13	; 0x01
     b6e:	e2 82       	std	Z+2, r14	; 0x02
     b70:	f3 82       	std	Z+3, r15	; 0x03
		 A[i][i] = aux;
	 }
	 /* se a matriz a for de posto-imcompleto, temos que minimizar || c - R11x1 - R12x2 ||, nesta implementação, suponho que x2 = 0, e resolvo o sistema c - R11x = 0 */
	 backrow(r, A, b);
	 /* laço que recoloca os (sigma) no vetor de sigma, e coloca os elemtos de u no lugar novamente */
	 for (i=0; i<r; i++) {
     b72:	2f 5f       	subi	r18, 0xFF	; 255
     b74:	3f 4f       	sbci	r19, 0xFF	; 255
     b76:	3c 96       	adiw	r30, 0x0c	; 12
     b78:	24 17       	cp	r18, r20
     b7a:	35 07       	cpc	r19, r21
     b7c:	0c f3       	brlt	.-62     	; 0xb40 <solveLeastSquare+0x198>
     b7e:	1f c0       	rjmp	.+62     	; 0xbbe <solveLeastSquare+0x216>
	 float f, aux;
	 /* aplica a matriz Q no vetor b, sem calcular a matriz Q propriamente, e sim (b - gamma*u*(ut*b)) */
	 for (j=0; j<r; j++) {
		 f = 0.0;
		 for (i=j; i<m; i++) f += A[i][j]*b[i];
		 f *= gamma[j];
     b80:	f1 01       	movw	r30, r2
     b82:	20 81       	ld	r18, Z
     b84:	31 81       	ldd	r19, Z+1	; 0x01
     b86:	42 81       	ldd	r20, Z+2	; 0x02
     b88:	53 81       	ldd	r21, Z+3	; 0x03
     b8a:	0e 94 1d 0c 	call	0x183a	; 0x183a <__mulsf3>
     b8e:	5b 01       	movw	r10, r22
     b90:	6c 01       	movw	r12, r24
     b92:	78 8a       	std	Y+16, r7	; 0x10
     b94:	6f 86       	std	Y+15, r6	; 0x0f
     b96:	82 01       	movw	r16, r4
     b98:	6e cf       	rjmp	.-292    	; 0xa76 <solveLeastSquare+0xce>
		 aux = (-1) * sigma[i];
		 sigma[i] = A[i][i];
		 A[i][i] = aux;
	 }
	 /* se a matriz a for de posto-imcompleto, temos que minimizar || c - R11x1 - R12x2 ||, nesta implementação, suponho que x2 = 0, e resolvo o sistema c - R11x = 0 */
	 backrow(r, A, b);
     b9a:	4d 81       	ldd	r20, Y+5	; 0x05
     b9c:	5e 81       	ldd	r21, Y+6	; 0x06
     b9e:	6f 81       	ldd	r22, Y+7	; 0x07
     ba0:	78 85       	ldd	r23, Y+8	; 0x08
     ba2:	89 81       	ldd	r24, Y+1	; 0x01
     ba4:	9a 81       	ldd	r25, Y+2	; 0x02
     ba6:	0e 94 b9 03 	call	0x772	; 0x772 <backrow>
     baa:	ef 81       	ldd	r30, Y+7	; 0x07
     bac:	f8 85       	ldd	r31, Y+8	; 0x08
     bae:	8b 85       	ldd	r24, Y+11	; 0x0b
     bb0:	9c 85       	ldd	r25, Y+12	; 0x0c
     bb2:	20 e0       	ldi	r18, 0x00	; 0
     bb4:	30 e0       	ldi	r19, 0x00	; 0
     bb6:	bc 01       	movw	r22, r24
     bb8:	49 81       	ldd	r20, Y+1	; 0x01
     bba:	5a 81       	ldd	r21, Y+2	; 0x02
     bbc:	c1 cf       	rjmp	.-126    	; 0xb40 <solveLeastSquare+0x198>
		 aux = sigma[i];
		 sigma[i] = (-1) * A[i][i];
		 A[i][i] = aux;
	 }
	 /* permuta o vetor da solução de mínimos quadrados */
	 permutation(r, b, p, 1);
     bbe:	21 e0       	ldi	r18, 0x01	; 1
     bc0:	30 e0       	ldi	r19, 0x00	; 0
     bc2:	4d 85       	ldd	r20, Y+13	; 0x0d
     bc4:	5e 85       	ldd	r21, Y+14	; 0x0e
     bc6:	6d 81       	ldd	r22, Y+5	; 0x05
     bc8:	7e 81       	ldd	r23, Y+6	; 0x06
     bca:	89 81       	ldd	r24, Y+1	; 0x01
     bcc:	9a 81       	ldd	r25, Y+2	; 0x02
     bce:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <permutation>
	 return 0;
 }
     bd2:	80 e0       	ldi	r24, 0x00	; 0
     bd4:	90 e0       	ldi	r25, 0x00	; 0
     bd6:	60 96       	adiw	r28, 0x10	; 16
     bd8:	0f b6       	in	r0, 0x3f	; 63
     bda:	f8 94       	cli
     bdc:	de bf       	out	0x3e, r29	; 62
     bde:	0f be       	out	0x3f, r0	; 63
     be0:	cd bf       	out	0x3d, r28	; 61
     be2:	df 91       	pop	r29
     be4:	cf 91       	pop	r28
     be6:	1f 91       	pop	r17
     be8:	0f 91       	pop	r16
     bea:	ff 90       	pop	r15
     bec:	ef 90       	pop	r14
     bee:	df 90       	pop	r13
     bf0:	cf 90       	pop	r12
     bf2:	bf 90       	pop	r11
     bf4:	af 90       	pop	r10
     bf6:	9f 90       	pop	r9
     bf8:	8f 90       	pop	r8
     bfa:	7f 90       	pop	r7
     bfc:	6f 90       	pop	r6
     bfe:	5f 90       	pop	r5
     c00:	4f 90       	pop	r4
     c02:	3f 90       	pop	r3
     c04:	2f 90       	pop	r2
     c06:	08 95       	ret

00000c08 <main>:
#include <util/delay.h>
#include <time.h>

int main(void)
{
	initializeSystem();
     c08:	0e 94 c0 08 	call	0x1180	; 0x1180 <initializeSystem>
		//}
		//if (currentPage == NEW_POINT_PAGE) {
			//updateNewPointDigitalValue();
			//_delay_ms(10);
		//}
		softwareSerialPrint("Teste UART\n");
     c0c:	85 e1       	ldi	r24, 0x15	; 21
     c0e:	91 e0       	ldi	r25, 0x01	; 1
     c10:	0e 94 91 09 	call	0x1322	; 0x1322 <softwareSerialPrint>
		bleSerialPrint("Teste BLE UART\n");
     c14:	81 e2       	ldi	r24, 0x21	; 33
     c16:	91 e0       	ldi	r25, 0x01	; 1
     c18:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <bleSerialPrint>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c1c:	2f ef       	ldi	r18, 0xFF	; 255
     c1e:	8f eb       	ldi	r24, 0xBF	; 191
     c20:	96 e0       	ldi	r25, 0x06	; 6
     c22:	21 50       	subi	r18, 0x01	; 1
     c24:	80 40       	sbci	r24, 0x00	; 0
     c26:	90 40       	sbci	r25, 0x00	; 0
     c28:	e1 f7       	brne	.-8      	; 0xc22 <main+0x1a>
     c2a:	00 c0       	rjmp	.+0      	; 0xc2c <main+0x24>
     c2c:	00 00       	nop
     c2e:	ee cf       	rjmp	.-36     	; 0xc0c <main+0x4>

00000c30 <loadDisplayUnitType>:
 unsigned char loadDisplayTensionUnit() {
	 displayTensionUnit = eeprom_read_byte((uint8_t*)EEPROM_ADR_DISPLAY_TENSION_UNIT);
	 if (displayTensionUnit >= TENSION_UNITS_LEN)
	 displayTensionUnit = 0;
	 return displayTensionUnit;
 }
     c30:	80 e0       	ldi	r24, 0x00	; 0
     c32:	90 e0       	ldi	r25, 0x00	; 0
     c34:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <eeprom_read_byte>
     c38:	82 30       	cpi	r24, 0x02	; 2
     c3a:	18 f4       	brcc	.+6      	; 0xc42 <loadDisplayUnitType+0x12>
     c3c:	80 93 3c 02 	sts	0x023C, r24	; 0x80023c <displayUnitType>
     c40:	02 c0       	rjmp	.+4      	; 0xc46 <loadDisplayUnitType+0x16>
     c42:	10 92 3c 02 	sts	0x023C, r1	; 0x80023c <displayUnitType>
     c46:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <displayUnitType>
     c4a:	08 95       	ret

00000c4c <loadDisplayForceUnit>:
     c4c:	81 e0       	ldi	r24, 0x01	; 1
     c4e:	90 e0       	ldi	r25, 0x00	; 0
     c50:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <eeprom_read_byte>
     c54:	88 30       	cpi	r24, 0x08	; 8
     c56:	18 f4       	brcc	.+6      	; 0xc5e <loadDisplayForceUnit+0x12>
     c58:	80 93 3b 02 	sts	0x023B, r24	; 0x80023b <displayForceUnit>
     c5c:	02 c0       	rjmp	.+4      	; 0xc62 <loadDisplayForceUnit+0x16>
     c5e:	10 92 3b 02 	sts	0x023B, r1	; 0x80023b <displayForceUnit>
     c62:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <displayForceUnit>
     c66:	08 95       	ret

00000c68 <loadSample>:

 unsigned char loadSample() {
	 sample = eeprom_read_byte((uint8_t*)EEPROM_ADR_SAMPLE);
     c68:	85 e5       	ldi	r24, 0x55	; 85
     c6a:	90 e0       	ldi	r25, 0x00	; 0
     c6c:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <eeprom_read_byte>
	 if (sample >= MAX_SAMPLE)
     c70:	86 30       	cpi	r24, 0x06	; 6
     c72:	18 f4       	brcc	.+6      	; 0xc7a <loadSample+0x12>
	 displayTensionUnit = 0;
	 return displayTensionUnit;
 }

 unsigned char loadSample() {
	 sample = eeprom_read_byte((uint8_t*)EEPROM_ADR_SAMPLE);
     c74:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <sample>
     c78:	02 c0       	rjmp	.+4      	; 0xc7e <loadSample+0x16>
	 if (sample >= MAX_SAMPLE)
	 sample = 0;
     c7a:	10 92 38 02 	sts	0x0238, r1	; 0x800238 <sample>
	 return sample;
 }
     c7e:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <sample>
     c82:	08 95       	ret

00000c84 <loadSampleValues>:

 void loadSampleValues() {
     c84:	cf 92       	push	r12
     c86:	df 92       	push	r13
     c88:	ef 92       	push	r14
     c8a:	ff 92       	push	r15
     c8c:	0f 93       	push	r16
     c8e:	1f 93       	push	r17
     c90:	cf 93       	push	r28
     c92:	df 93       	push	r29
     c94:	0c e2       	ldi	r16, 0x2C	; 44
     c96:	12 e0       	ldi	r17, 0x02	; 2
     c98:	c6 e5       	ldi	r28, 0x56	; 86
     c9a:	d0 e0       	ldi	r29, 0x00	; 0
	 unsigned char i;
	 for (i=0; i<3; i++) {
		sampleValues[i] = eeprom_read_float((float*)(EEPROM_ADR_SAMPLE_VALUE1+(i*sizeof(float))));
		if (isnan(sampleValues[i]))
			sampleValues[i] = 1.0;
     c9c:	0f 2e       	mov	r0, r31
     c9e:	c1 2c       	mov	r12, r1
     ca0:	d1 2c       	mov	r13, r1
     ca2:	f0 e8       	ldi	r31, 0x80	; 128
     ca4:	ef 2e       	mov	r14, r31
     ca6:	ff e3       	ldi	r31, 0x3F	; 63
     ca8:	ff 2e       	mov	r15, r31
     caa:	f0 2d       	mov	r31, r0
 }

 void loadSampleValues() {
	 unsigned char i;
	 for (i=0; i<3; i++) {
		sampleValues[i] = eeprom_read_float((float*)(EEPROM_ADR_SAMPLE_VALUE1+(i*sizeof(float))));
     cac:	ce 01       	movw	r24, r28
     cae:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <eeprom_read_dword>
     cb2:	f8 01       	movw	r30, r16
     cb4:	60 83       	st	Z, r22
     cb6:	71 83       	std	Z+1, r23	; 0x01
     cb8:	82 83       	std	Z+2, r24	; 0x02
     cba:	93 83       	std	Z+3, r25	; 0x03
		if (isnan(sampleValues[i]))
     cbc:	9b 01       	movw	r18, r22
     cbe:	ac 01       	movw	r20, r24
     cc0:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <__unordsf2>
     cc4:	88 23       	and	r24, r24
     cc6:	29 f0       	breq	.+10     	; 0xcd2 <loadSampleValues+0x4e>
			sampleValues[i] = 1.0;
     cc8:	f8 01       	movw	r30, r16
     cca:	c0 82       	st	Z, r12
     ccc:	d1 82       	std	Z+1, r13	; 0x01
     cce:	e2 82       	std	Z+2, r14	; 0x02
     cd0:	f3 82       	std	Z+3, r15	; 0x03
     cd2:	24 96       	adiw	r28, 0x04	; 4
     cd4:	0c 5f       	subi	r16, 0xFC	; 252
     cd6:	1f 4f       	sbci	r17, 0xFF	; 255
	 return sample;
 }

 void loadSampleValues() {
	 unsigned char i;
	 for (i=0; i<3; i++) {
     cd8:	c2 36       	cpi	r28, 0x62	; 98
     cda:	d1 05       	cpc	r29, r1
     cdc:	39 f7       	brne	.-50     	; 0xcac <loadSampleValues+0x28>
		sampleValues[i] = eeprom_read_float((float*)(EEPROM_ADR_SAMPLE_VALUE1+(i*sizeof(float))));
		if (isnan(sampleValues[i]))
			sampleValues[i] = 1.0;
	 }
	 sampleArea = eeprom_read_float((float*)(EEPROM_ADR_SAMPLE_AREA));
     cde:	82 e6       	ldi	r24, 0x62	; 98
     ce0:	90 e0       	ldi	r25, 0x00	; 0
     ce2:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <eeprom_read_dword>
     ce6:	6b 01       	movw	r12, r22
     ce8:	7c 01       	movw	r14, r24
	 if (isnan(sampleArea) || sampleArea < EPSILON)
     cea:	9b 01       	movw	r18, r22
     cec:	ac 01       	movw	r20, r24
     cee:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <__unordsf2>
     cf2:	81 11       	cpse	r24, r1
     cf4:	13 c0       	rjmp	.+38     	; 0xd1c <loadSampleValues+0x98>
     cf6:	2c ea       	ldi	r18, 0xAC	; 172
     cf8:	35 ec       	ldi	r19, 0xC5	; 197
     cfa:	47 e2       	ldi	r20, 0x27	; 39
     cfc:	57 e3       	ldi	r21, 0x37	; 55
     cfe:	c7 01       	movw	r24, r14
     d00:	b6 01       	movw	r22, r12
     d02:	0e 94 ef 0a 	call	0x15de	; 0x15de <__cmpsf2>
     d06:	88 23       	and	r24, r24
     d08:	4c f0       	brlt	.+18     	; 0xd1c <loadSampleValues+0x98>
	 for (i=0; i<3; i++) {
		sampleValues[i] = eeprom_read_float((float*)(EEPROM_ADR_SAMPLE_VALUE1+(i*sizeof(float))));
		if (isnan(sampleValues[i]))
			sampleValues[i] = 1.0;
	 }
	 sampleArea = eeprom_read_float((float*)(EEPROM_ADR_SAMPLE_AREA));
     d0a:	c0 92 09 01 	sts	0x0109, r12	; 0x800109 <sampleArea>
     d0e:	d0 92 0a 01 	sts	0x010A, r13	; 0x80010a <sampleArea+0x1>
     d12:	e0 92 0b 01 	sts	0x010B, r14	; 0x80010b <sampleArea+0x2>
     d16:	f0 92 0c 01 	sts	0x010C, r15	; 0x80010c <sampleArea+0x3>
     d1a:	0c c0       	rjmp	.+24     	; 0xd34 <loadSampleValues+0xb0>
	 if (isnan(sampleArea) || sampleArea < EPSILON)
		sampleArea = 1.0;
     d1c:	80 e0       	ldi	r24, 0x00	; 0
     d1e:	90 e0       	ldi	r25, 0x00	; 0
     d20:	a0 e8       	ldi	r26, 0x80	; 128
     d22:	bf e3       	ldi	r27, 0x3F	; 63
     d24:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <sampleArea>
     d28:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <sampleArea+0x1>
     d2c:	a0 93 0b 01 	sts	0x010B, r26	; 0x80010b <sampleArea+0x2>
     d30:	b0 93 0c 01 	sts	0x010C, r27	; 0x80010c <sampleArea+0x3>
 }
     d34:	df 91       	pop	r29
     d36:	cf 91       	pop	r28
     d38:	1f 91       	pop	r17
     d3a:	0f 91       	pop	r16
     d3c:	ff 90       	pop	r15
     d3e:	ef 90       	pop	r14
     d40:	df 90       	pop	r13
     d42:	cf 90       	pop	r12
     d44:	08 95       	ret

00000d46 <loadMachineCapacity>:

 void loadMachineCapacity() {
	 machineCapacity = eeprom_read_float((float*)(EEPROM_ADR_MACHINE_CAPACITY));
     d46:	86 e6       	ldi	r24, 0x66	; 102
     d48:	90 e0       	ldi	r25, 0x00	; 0
     d4a:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <eeprom_read_dword>
     d4e:	60 93 05 01 	sts	0x0105, r22	; 0x800105 <machineCapacity>
     d52:	70 93 06 01 	sts	0x0106, r23	; 0x800106 <machineCapacity+0x1>
     d56:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <machineCapacity+0x2>
     d5a:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <machineCapacity+0x3>
	 if (isnan(machineCapacity))
     d5e:	9b 01       	movw	r18, r22
     d60:	ac 01       	movw	r20, r24
     d62:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <__unordsf2>
     d66:	88 23       	and	r24, r24
     d68:	61 f0       	breq	.+24     	; 0xd82 <loadMachineCapacity+0x3c>
	 machineCapacity = 1000.0;
     d6a:	80 e0       	ldi	r24, 0x00	; 0
     d6c:	90 e0       	ldi	r25, 0x00	; 0
     d6e:	aa e7       	ldi	r26, 0x7A	; 122
     d70:	b4 e4       	ldi	r27, 0x44	; 68
     d72:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <machineCapacity>
     d76:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <machineCapacity+0x1>
     d7a:	a0 93 07 01 	sts	0x0107, r26	; 0x800107 <machineCapacity+0x2>
     d7e:	b0 93 08 01 	sts	0x0108, r27	; 0x800108 <machineCapacity+0x3>
	 calculateOverflowThresholdForce();
     d82:	0e 94 97 08 	call	0x112e	; 0x112e <calculateOverflowThresholdForce>
     d86:	08 95       	ret

00000d88 <loadOverflowProtectionDetails>:
 }

 void loadOverflowProtectionDetails() {
	 overflowProtectionMode = eeprom_read_byte((uint8_t*)EEPROM_ADR_OVERFLOW_PROTECTION_MODE);
     d88:	8a e6       	ldi	r24, 0x6A	; 106
     d8a:	90 e0       	ldi	r25, 0x00	; 0
     d8c:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <eeprom_read_byte>
	 if (overflowProtectionMode >= 2)
     d90:	82 30       	cpi	r24, 0x02	; 2
     d92:	18 f4       	brcc	.+6      	; 0xd9a <loadOverflowProtectionDetails+0x12>
	 machineCapacity = 1000.0;
	 calculateOverflowThresholdForce();
 }

 void loadOverflowProtectionDetails() {
	 overflowProtectionMode = eeprom_read_byte((uint8_t*)EEPROM_ADR_OVERFLOW_PROTECTION_MODE);
     d94:	80 93 2b 02 	sts	0x022B, r24	; 0x80022b <overflowProtectionMode>
     d98:	02 c0       	rjmp	.+4      	; 0xd9e <loadOverflowProtectionDetails+0x16>
	 if (overflowProtectionMode >= 2)
	 overflowProtectionMode = 0;
     d9a:	10 92 2b 02 	sts	0x022B, r1	; 0x80022b <overflowProtectionMode>

	 overflowProtectionThreshold = eeprom_read_byte((uint8_t*)EEPROM_ADR_OVERFLOW_PROTECTION_THRESHOLD);
     d9e:	8b e6       	ldi	r24, 0x6B	; 107
     da0:	90 e0       	ldi	r25, 0x00	; 0
     da2:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <eeprom_read_byte>
	 if (overflowProtectionThreshold > 100)
     da6:	85 36       	cpi	r24, 0x65	; 101
     da8:	18 f4       	brcc	.+6      	; 0xdb0 <loadOverflowProtectionDetails+0x28>
 void loadOverflowProtectionDetails() {
	 overflowProtectionMode = eeprom_read_byte((uint8_t*)EEPROM_ADR_OVERFLOW_PROTECTION_MODE);
	 if (overflowProtectionMode >= 2)
	 overflowProtectionMode = 0;

	 overflowProtectionThreshold = eeprom_read_byte((uint8_t*)EEPROM_ADR_OVERFLOW_PROTECTION_THRESHOLD);
     daa:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <overflowProtectionThreshold>
     dae:	03 c0       	rjmp	.+6      	; 0xdb6 <loadOverflowProtectionDetails+0x2e>
	 if (overflowProtectionThreshold > 100)
	 overflowProtectionThreshold = 80U;
     db0:	80 e5       	ldi	r24, 0x50	; 80
     db2:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <overflowProtectionThreshold>
	 calculateOverflowThresholdForce();
     db6:	0e 94 97 08 	call	0x112e	; 0x112e <calculateOverflowThresholdForce>

	 overflowProtectionEnabled = eeprom_read_byte((uint8_t*)EEPROM_ADR_OVERFLOW_PROTECTION_ENABLED);
     dba:	8c e6       	ldi	r24, 0x6C	; 108
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <eeprom_read_byte>
	 if (overflowProtectionEnabled > 1)
     dc2:	82 30       	cpi	r24, 0x02	; 2
     dc4:	18 f4       	brcc	.+6      	; 0xdcc <loadOverflowProtectionDetails+0x44>
	 overflowProtectionThreshold = eeprom_read_byte((uint8_t*)EEPROM_ADR_OVERFLOW_PROTECTION_THRESHOLD);
	 if (overflowProtectionThreshold > 100)
	 overflowProtectionThreshold = 80U;
	 calculateOverflowThresholdForce();

	 overflowProtectionEnabled = eeprom_read_byte((uint8_t*)EEPROM_ADR_OVERFLOW_PROTECTION_ENABLED);
     dc6:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <overflowProtectionEnabled>
     dca:	08 95       	ret
	 if (overflowProtectionEnabled > 1)
	 overflowProtectionEnabled = 0U;
     dcc:	10 92 2a 02 	sts	0x022A, r1	; 0x80022a <overflowProtectionEnabled>
     dd0:	08 95       	ret

00000dd2 <loadNumCalibratedPoints>:
 }

 unsigned char loadNumCalibratedPoints() {
	 calibratedPoints = eeprom_read_byte((uint8_t*)EEPROM_ADR_CAL_POINTS);
     dd2:	83 e0       	ldi	r24, 0x03	; 3
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <eeprom_read_byte>
	 if (calibratedPoints > 10)
     dda:	8b 30       	cpi	r24, 0x0B	; 11
     ddc:	18 f4       	brcc	.+6      	; 0xde4 <loadNumCalibratedPoints+0x12>
	 if (overflowProtectionEnabled > 1)
	 overflowProtectionEnabled = 0U;
 }

 unsigned char loadNumCalibratedPoints() {
	 calibratedPoints = eeprom_read_byte((uint8_t*)EEPROM_ADR_CAL_POINTS);
     dde:	80 93 3a 02 	sts	0x023A, r24	; 0x80023a <calibratedPoints>
     de2:	02 c0       	rjmp	.+4      	; 0xde8 <loadNumCalibratedPoints+0x16>
	 if (calibratedPoints > 10)
	 calibratedPoints = 0;
     de4:	10 92 3a 02 	sts	0x023A, r1	; 0x80023a <calibratedPoints>
	 return calibratedPoints;
 }
     de8:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <calibratedPoints>
     dec:	08 95       	ret

00000dee <loadCalibrationUnit>:

 unsigned char loadCalibrationUnit() {
	 calibrationUnit = eeprom_read_byte((uint8_t*)EEPROM_ADR_CAL_UNIT);
     dee:	84 e5       	ldi	r24, 0x54	; 84
     df0:	90 e0       	ldi	r25, 0x00	; 0
     df2:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <eeprom_read_byte>
	 if (calibrationUnit >= FORCE_UNITS_LEN)
     df6:	88 30       	cpi	r24, 0x08	; 8
     df8:	18 f4       	brcc	.+6      	; 0xe00 <loadCalibrationUnit+0x12>
	 calibratedPoints = 0;
	 return calibratedPoints;
 }

 unsigned char loadCalibrationUnit() {
	 calibrationUnit = eeprom_read_byte((uint8_t*)EEPROM_ADR_CAL_UNIT);
     dfa:	80 93 39 02 	sts	0x0239, r24	; 0x800239 <calibrationUnit>
     dfe:	02 c0       	rjmp	.+4      	; 0xe04 <loadCalibrationUnit+0x16>
	 if (calibrationUnit >= FORCE_UNITS_LEN)
	 calibrationUnit = 0;
     e00:	10 92 39 02 	sts	0x0239, r1	; 0x800239 <calibrationUnit>
	 return calibrationUnit;
 }
     e04:	80 91 39 02 	lds	r24, 0x0239	; 0x800239 <calibrationUnit>
     e08:	08 95       	ret

00000e0a <loadCalibrationPoint>:

 void loadCalibrationPoint(unsigned char index) {
     e0a:	cf 92       	push	r12
     e0c:	df 92       	push	r13
     e0e:	ef 92       	push	r14
     e10:	ff 92       	push	r15
     e12:	cf 93       	push	r28
     e14:	df 93       	push	r29
	 unsigned long adRawValue = eeprom_read_dword((uint32_t*)(EEPROM_ADR_CAL_POINTS_VECTOR+(index*8)));
     e16:	98 e0       	ldi	r25, 0x08	; 8
     e18:	89 9f       	mul	r24, r25
     e1a:	e0 01       	movw	r28, r0
     e1c:	11 24       	eor	r1, r1
     e1e:	ce 01       	movw	r24, r28
     e20:	04 96       	adiw	r24, 0x04	; 4
     e22:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <eeprom_read_dword>
     e26:	6b 01       	movw	r12, r22
     e28:	7c 01       	movw	r14, r24
	 float calibrationValue = eeprom_read_float((float*)(EEPROM_ADR_CAL_POINTS_VECTOR+(index*8)+4));
     e2a:	ce 01       	movw	r24, r28
     e2c:	08 96       	adiw	r24, 0x08	; 8
     e2e:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <eeprom_read_dword>
	 CalibrationPoint p;
	 p.rawValue = adRawValue;
	 p.value = calibrationValue;
	 calibrationPoints[index] = p;
     e32:	c7 59       	subi	r28, 0x97	; 151
     e34:	dd 4f       	sbci	r29, 0xFD	; 253
     e36:	c8 82       	st	Y, r12
     e38:	d9 82       	std	Y+1, r13	; 0x01
     e3a:	ea 82       	std	Y+2, r14	; 0x02
     e3c:	fb 82       	std	Y+3, r15	; 0x03
     e3e:	6c 83       	std	Y+4, r22	; 0x04
     e40:	7d 83       	std	Y+5, r23	; 0x05
     e42:	8e 83       	std	Y+6, r24	; 0x06
     e44:	9f 83       	std	Y+7, r25	; 0x07
 }
     e46:	df 91       	pop	r29
     e48:	cf 91       	pop	r28
     e4a:	ff 90       	pop	r15
     e4c:	ef 90       	pop	r14
     e4e:	df 90       	pop	r13
     e50:	cf 90       	pop	r12
     e52:	08 95       	ret

00000e54 <displaySetValue>:
	//serialBufferReadAll(_nextionResponse);
	//return _nextionResponse[0];
	return 0;
}

unsigned char displaySetValue(const unsigned char *valueName, const unsigned char *text) {
     e54:	cf 93       	push	r28
     e56:	df 93       	push	r29
     e58:	eb 01       	movw	r28, r22
	//disableGlobalInterrupt();
	//serialClearInputBuffer();
	serialPrint(valueName);
     e5a:	0e 94 30 09 	call	0x1260	; 0x1260 <serialPrint>
	serialPrint(VAL);
     e5e:	81 e3       	ldi	r24, 0x31	; 49
     e60:	91 e0       	ldi	r25, 0x01	; 1
     e62:	0e 94 30 09 	call	0x1260	; 0x1260 <serialPrint>
	serialPrint(text);
     e66:	ce 01       	movw	r24, r28
     e68:	0e 94 30 09 	call	0x1260	; 0x1260 <serialPrint>
	serialPrint(END);
     e6c:	87 e3       	ldi	r24, 0x37	; 55
     e6e:	91 e0       	ldi	r25, 0x01	; 1
     e70:	0e 94 30 09 	call	0x1260	; 0x1260 <serialPrint>
     e74:	8f ef       	ldi	r24, 0xFF	; 255
     e76:	9b e6       	ldi	r25, 0x6B	; 107
     e78:	01 97       	sbiw	r24, 0x01	; 1
     e7a:	f1 f7       	brne	.-4      	; 0xe78 <displaySetValue+0x24>
     e7c:	00 c0       	rjmp	.+0      	; 0xe7e <displaySetValue+0x2a>
     e7e:	00 00       	nop
	//enableGlobalInterrupt();
	_delay_ms(RESPONSE_WAIT_TIME);
	//serialBufferReadAll(_nextionResponse);
	//return _nextionResponse[0];
	return 0;
}
     e80:	80 e0       	ldi	r24, 0x00	; 0
     e82:	df 91       	pop	r29
     e84:	cf 91       	pop	r28
     e86:	08 95       	ret

00000e88 <displaySetValueUInt>:

unsigned char displaySetValueUInt(const unsigned char *valueName, const unsigned char val) {	
     e88:	0f 93       	push	r16
     e8a:	1f 93       	push	r17
     e8c:	cf 93       	push	r28
     e8e:	df 93       	push	r29
     e90:	cd b7       	in	r28, 0x3d	; 61
     e92:	de b7       	in	r29, 0x3e	; 62
     e94:	60 97       	sbiw	r28, 0x10	; 16
     e96:	0f b6       	in	r0, 0x3f	; 63
     e98:	f8 94       	cli
     e9a:	de bf       	out	0x3e, r29	; 62
     e9c:	0f be       	out	0x3f, r0	; 63
     e9e:	cd bf       	out	0x3d, r28	; 61
     ea0:	8c 01       	movw	r16, r24
     ea2:	86 2f       	mov	r24, r22
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__utoa_ncheck (unsigned int, char *, unsigned char);
	return __utoa_ncheck (__val, __s, __radix);
     ea4:	4a e0       	ldi	r20, 0x0A	; 10
     ea6:	be 01       	movw	r22, r28
     ea8:	6f 5f       	subi	r22, 0xFF	; 255
     eaa:	7f 4f       	sbci	r23, 0xFF	; 255
     eac:	90 e0       	ldi	r25, 0x00	; 0
     eae:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <__utoa_ncheck>
	unsigned char conversionBuffer[16];
	utoa(val, conversionBuffer, 10);
	return displaySetValue(valueName, conversionBuffer);
     eb2:	be 01       	movw	r22, r28
     eb4:	6f 5f       	subi	r22, 0xFF	; 255
     eb6:	7f 4f       	sbci	r23, 0xFF	; 255
     eb8:	c8 01       	movw	r24, r16
     eba:	0e 94 2a 07 	call	0xe54	; 0xe54 <displaySetValue>
}
     ebe:	60 96       	adiw	r28, 0x10	; 16
     ec0:	0f b6       	in	r0, 0x3f	; 63
     ec2:	f8 94       	cli
     ec4:	de bf       	out	0x3e, r29	; 62
     ec6:	0f be       	out	0x3f, r0	; 63
     ec8:	cd bf       	out	0x3d, r28	; 61
     eca:	df 91       	pop	r29
     ecc:	cf 91       	pop	r28
     ece:	1f 91       	pop	r17
     ed0:	0f 91       	pop	r16
     ed2:	08 95       	ret

00000ed4 <__vector_14>:

void afterSetSampleValue() {
	sampleArea = calculateSampleArea(sample, sampleValues[0], sampleValues[1], sampleValues[2]);
	storeSampleValues();
	updateSamplePage();
}
     ed4:	1f 92       	push	r1
     ed6:	0f 92       	push	r0
     ed8:	0f b6       	in	r0, 0x3f	; 63
     eda:	0f 92       	push	r0
     edc:	11 24       	eor	r1, r1
     ede:	8f 93       	push	r24
     ee0:	9f 93       	push	r25
     ee2:	af 93       	push	r26
     ee4:	bf 93       	push	r27
     ee6:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <__data_end>
     eea:	90 91 27 02 	lds	r25, 0x0227	; 0x800227 <__data_end+0x1>
     eee:	a0 91 28 02 	lds	r26, 0x0228	; 0x800228 <__data_end+0x2>
     ef2:	b0 91 29 02 	lds	r27, 0x0229	; 0x800229 <__data_end+0x3>
     ef6:	01 96       	adiw	r24, 0x01	; 1
     ef8:	a1 1d       	adc	r26, r1
     efa:	b1 1d       	adc	r27, r1
     efc:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <__data_end>
     f00:	90 93 27 02 	sts	0x0227, r25	; 0x800227 <__data_end+0x1>
     f04:	a0 93 28 02 	sts	0x0228, r26	; 0x800228 <__data_end+0x2>
     f08:	b0 93 29 02 	sts	0x0229, r27	; 0x800229 <__data_end+0x3>
     f0c:	bf 91       	pop	r27
     f0e:	af 91       	pop	r26
     f10:	9f 91       	pop	r25
     f12:	8f 91       	pop	r24
     f14:	0f 90       	pop	r0
     f16:	0f be       	out	0x3f, r0	; 63
     f18:	0f 90       	pop	r0
     f1a:	1f 90       	pop	r1
     f1c:	18 95       	reti

00000f1e <enableGlobalInterrupt>:
     f1e:	8f b7       	in	r24, 0x3f	; 63
     f20:	80 68       	ori	r24, 0x80	; 128
     f22:	8f bf       	out	0x3f, r24	; 63
     f24:	08 95       	ret

00000f26 <initiliazeTimerTicker>:
     f26:	82 e0       	ldi	r24, 0x02	; 2
     f28:	84 bd       	out	0x24, r24	; 36
     f2a:	15 bc       	out	0x25, r1	; 37
     f2c:	16 bc       	out	0x26, r1	; 38
     f2e:	9c e6       	ldi	r25, 0x6C	; 108
     f30:	97 bd       	out	0x27, r25	; 39
     f32:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
     f36:	0e 94 8f 07 	call	0xf1e	; 0xf1e <enableGlobalInterrupt>
     f3a:	08 95       	ret

00000f3c <startTimerTicker>:
     f3c:	85 b5       	in	r24, 0x25	; 37
     f3e:	85 60       	ori	r24, 0x05	; 5
     f40:	85 bd       	out	0x25, r24	; 37
     f42:	08 95       	ret

00000f44 <fitStraighLine>:
     f44:	4f 92       	push	r4
     f46:	5f 92       	push	r5
     f48:	6f 92       	push	r6
     f4a:	7f 92       	push	r7
     f4c:	9f 92       	push	r9
     f4e:	af 92       	push	r10
     f50:	bf 92       	push	r11
     f52:	cf 92       	push	r12
     f54:	df 92       	push	r13
     f56:	ef 92       	push	r14
     f58:	ff 92       	push	r15
     f5a:	0f 93       	push	r16
     f5c:	1f 93       	push	r17
     f5e:	cf 93       	push	r28
     f60:	df 93       	push	r29
     f62:	cd b7       	in	r28, 0x3d	; 61
     f64:	de b7       	in	r29, 0x3e	; 62
     f66:	cc 5d       	subi	r28, 0xDC	; 220
     f68:	d1 09       	sbc	r29, r1
     f6a:	0f b6       	in	r0, 0x3f	; 63
     f6c:	f8 94       	cli
     f6e:	de bf       	out	0x3e, r29	; 62
     f70:	0f be       	out	0x3f, r0	; 63
     f72:	cd bf       	out	0x3d, r28	; 61
     f74:	90 90 3a 02 	lds	r9, 0x023A	; 0x80023a <calibratedPoints>
     f78:	21 e0       	ldi	r18, 0x01	; 1
     f7a:	29 15       	cp	r18, r9
     f7c:	08 f0       	brcs	.+2      	; 0xf80 <fitStraighLine+0x3c>
     f7e:	8a c0       	rjmp	.+276    	; 0x1094 <fitStraighLine+0x150>
     f80:	99 20       	and	r9, r9
     f82:	09 f4       	brne	.+2      	; 0xf86 <fitStraighLine+0x42>
     f84:	48 c0       	rjmp	.+144    	; 0x1016 <fitStraighLine+0xd2>
     f86:	8e 01       	movw	r16, r28
     f88:	0f 5f       	subi	r16, 0xFF	; 255
     f8a:	1f 4f       	sbci	r17, 0xFF	; 255
     f8c:	0f 2e       	mov	r0, r31
     f8e:	f9 e6       	ldi	r31, 0x69	; 105
     f90:	ef 2e       	mov	r14, r31
     f92:	f2 e0       	ldi	r31, 0x02	; 2
     f94:	ff 2e       	mov	r15, r31
     f96:	f0 2d       	mov	r31, r0
     f98:	6e 01       	movw	r12, r28
     f9a:	31 ea       	ldi	r19, 0xA1	; 161
     f9c:	c3 0e       	add	r12, r19
     f9e:	d1 1c       	adc	r13, r1
     fa0:	aa 24       	eor	r10, r10
     fa2:	aa 94       	dec	r10
     fa4:	a9 0c       	add	r10, r9
     fa6:	b1 2c       	mov	r11, r1
     fa8:	8f ef       	ldi	r24, 0xFF	; 255
     faa:	a8 1a       	sub	r10, r24
     fac:	b8 0a       	sbc	r11, r24
     fae:	aa 0c       	add	r10, r10
     fb0:	bb 1c       	adc	r11, r11
     fb2:	aa 0c       	add	r10, r10
     fb4:	bb 1c       	adc	r11, r11
     fb6:	aa 0c       	add	r10, r10
     fb8:	bb 1c       	adc	r11, r11
     fba:	a0 0e       	add	r10, r16
     fbc:	b1 1e       	adc	r11, r17
     fbe:	0f 2e       	mov	r0, r31
     fc0:	41 2c       	mov	r4, r1
     fc2:	51 2c       	mov	r5, r1
     fc4:	f0 e8       	ldi	r31, 0x80	; 128
     fc6:	6f 2e       	mov	r6, r31
     fc8:	ff e3       	ldi	r31, 0x3F	; 63
     fca:	7f 2e       	mov	r7, r31
     fcc:	f0 2d       	mov	r31, r0
     fce:	f8 01       	movw	r30, r16
     fd0:	40 82       	st	Z, r4
     fd2:	51 82       	std	Z+1, r5	; 0x01
     fd4:	62 82       	std	Z+2, r6	; 0x02
     fd6:	73 82       	std	Z+3, r7	; 0x03
     fd8:	f7 01       	movw	r30, r14
     fda:	60 81       	ld	r22, Z
     fdc:	71 81       	ldd	r23, Z+1	; 0x01
     fde:	82 81       	ldd	r24, Z+2	; 0x02
     fe0:	93 81       	ldd	r25, Z+3	; 0x03
     fe2:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <__floatsisf>
     fe6:	f8 01       	movw	r30, r16
     fe8:	64 83       	std	Z+4, r22	; 0x04
     fea:	75 83       	std	Z+5, r23	; 0x05
     fec:	86 83       	std	Z+6, r24	; 0x06
     fee:	97 83       	std	Z+7, r25	; 0x07
     ff0:	f7 01       	movw	r30, r14
     ff2:	84 81       	ldd	r24, Z+4	; 0x04
     ff4:	95 81       	ldd	r25, Z+5	; 0x05
     ff6:	a6 81       	ldd	r26, Z+6	; 0x06
     ff8:	b7 81       	ldd	r27, Z+7	; 0x07
     ffa:	f6 01       	movw	r30, r12
     ffc:	81 93       	st	Z+, r24
     ffe:	91 93       	st	Z+, r25
    1000:	a1 93       	st	Z+, r26
    1002:	b1 93       	st	Z+, r27
    1004:	6f 01       	movw	r12, r30
    1006:	08 5f       	subi	r16, 0xF8	; 248
    1008:	1f 4f       	sbci	r17, 0xFF	; 255
    100a:	f8 e0       	ldi	r31, 0x08	; 8
    100c:	ef 0e       	add	r14, r31
    100e:	f1 1c       	adc	r15, r1
    1010:	0a 15       	cp	r16, r10
    1012:	1b 05       	cpc	r17, r11
    1014:	e1 f6       	brne	.-72     	; 0xfce <fitStraighLine+0x8a>
    1016:	9e 01       	movw	r18, r28
    1018:	27 53       	subi	r18, 0x37	; 55
    101a:	3f 4f       	sbci	r19, 0xFF	; 255
    101c:	79 01       	movw	r14, r18
    101e:	8e 01       	movw	r16, r28
    1020:	0f 5a       	subi	r16, 0xAF	; 175
    1022:	1f 4f       	sbci	r17, 0xFF	; 255
    1024:	20 55       	subi	r18, 0x50	; 80
    1026:	31 09       	sbc	r19, r1
    1028:	ae 01       	movw	r20, r28
    102a:	4f 5f       	subi	r20, 0xFF	; 255
    102c:	5f 4f       	sbci	r21, 0xFF	; 255
    102e:	62 e0       	ldi	r22, 0x02	; 2
    1030:	70 e0       	ldi	r23, 0x00	; 0
    1032:	89 2d       	mov	r24, r9
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	0e 94 5e 00 	call	0xbc	; 0xbc <QR>
    103a:	5c 01       	movw	r10, r24
    103c:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <calibratedPoints>
    1040:	67 01       	movw	r12, r14
    1042:	98 01       	movw	r18, r16
    1044:	78 01       	movw	r14, r16
    1046:	08 5d       	subi	r16, 0xD8	; 216
    1048:	1f 4f       	sbci	r17, 0xFF	; 255
    104a:	20 5b       	subi	r18, 0xB0	; 176
    104c:	3f 4f       	sbci	r19, 0xFF	; 255
    104e:	ae 01       	movw	r20, r28
    1050:	4f 5f       	subi	r20, 0xFF	; 255
    1052:	5f 4f       	sbci	r21, 0xFF	; 255
    1054:	62 e0       	ldi	r22, 0x02	; 2
    1056:	70 e0       	ldi	r23, 0x00	; 0
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <solveLeastSquare>
    105e:	ed e0       	ldi	r30, 0x0D	; 13
    1060:	f1 e0       	ldi	r31, 0x01	; 1
    1062:	cf 55       	subi	r28, 0x5F	; 95
    1064:	df 4f       	sbci	r29, 0xFF	; 255
    1066:	88 81       	ld	r24, Y
    1068:	99 81       	ldd	r25, Y+1	; 0x01
    106a:	aa 81       	ldd	r26, Y+2	; 0x02
    106c:	bb 81       	ldd	r27, Y+3	; 0x03
    106e:	c1 5a       	subi	r28, 0xA1	; 161
    1070:	d0 40       	sbci	r29, 0x00	; 0
    1072:	80 83       	st	Z, r24
    1074:	91 83       	std	Z+1, r25	; 0x01
    1076:	a2 83       	std	Z+2, r26	; 0x02
    1078:	b3 83       	std	Z+3, r27	; 0x03
    107a:	cb 55       	subi	r28, 0x5B	; 91
    107c:	df 4f       	sbci	r29, 0xFF	; 255
    107e:	88 81       	ld	r24, Y
    1080:	99 81       	ldd	r25, Y+1	; 0x01
    1082:	aa 81       	ldd	r26, Y+2	; 0x02
    1084:	bb 81       	ldd	r27, Y+3	; 0x03
    1086:	c5 5a       	subi	r28, 0xA5	; 165
    1088:	d0 40       	sbci	r29, 0x00	; 0
    108a:	84 83       	std	Z+4, r24	; 0x04
    108c:	95 83       	std	Z+5, r25	; 0x05
    108e:	a6 83       	std	Z+6, r26	; 0x06
    1090:	b7 83       	std	Z+7, r27	; 0x07
    1092:	0e c0       	rjmp	.+28     	; 0x10b0 <fitStraighLine+0x16c>
    1094:	ed e0       	ldi	r30, 0x0D	; 13
    1096:	f1 e0       	ldi	r31, 0x01	; 1
    1098:	10 82       	st	Z, r1
    109a:	11 82       	std	Z+1, r1	; 0x01
    109c:	12 82       	std	Z+2, r1	; 0x02
    109e:	13 82       	std	Z+3, r1	; 0x03
    10a0:	80 e0       	ldi	r24, 0x00	; 0
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	a0 e8       	ldi	r26, 0x80	; 128
    10a6:	bf e3       	ldi	r27, 0x3F	; 63
    10a8:	84 83       	std	Z+4, r24	; 0x04
    10aa:	95 83       	std	Z+5, r25	; 0x05
    10ac:	a6 83       	std	Z+6, r26	; 0x06
    10ae:	b7 83       	std	Z+7, r27	; 0x07
    10b0:	c4 52       	subi	r28, 0x24	; 36
    10b2:	df 4f       	sbci	r29, 0xFF	; 255
    10b4:	0f b6       	in	r0, 0x3f	; 63
    10b6:	f8 94       	cli
    10b8:	de bf       	out	0x3e, r29	; 62
    10ba:	0f be       	out	0x3f, r0	; 63
    10bc:	cd bf       	out	0x3d, r28	; 61
    10be:	df 91       	pop	r29
    10c0:	cf 91       	pop	r28
    10c2:	1f 91       	pop	r17
    10c4:	0f 91       	pop	r16
    10c6:	ff 90       	pop	r15
    10c8:	ef 90       	pop	r14
    10ca:	df 90       	pop	r13
    10cc:	cf 90       	pop	r12
    10ce:	bf 90       	pop	r11
    10d0:	af 90       	pop	r10
    10d2:	9f 90       	pop	r9
    10d4:	7f 90       	pop	r7
    10d6:	6f 90       	pop	r6
    10d8:	5f 90       	pop	r5
    10da:	4f 90       	pop	r4
    10dc:	08 95       	ret

000010de <loadStoredParameters>:
    10de:	cf 93       	push	r28
    10e0:	0e 94 18 06 	call	0xc30	; 0xc30 <loadDisplayUnitType>
    10e4:	0e 94 a3 06 	call	0xd46	; 0xd46 <loadMachineCapacity>
    10e8:	0e 94 c4 06 	call	0xd88	; 0xd88 <loadOverflowProtectionDetails>
    10ec:	0e 94 34 06 	call	0xc68	; 0xc68 <loadSample>
    10f0:	0e 94 42 06 	call	0xc84	; 0xc84 <loadSampleValues>
    10f4:	0e 94 26 06 	call	0xc4c	; 0xc4c <loadDisplayForceUnit>
    10f8:	0e 94 f7 06 	call	0xdee	; 0xdee <loadCalibrationUnit>
    10fc:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <loadNumCalibratedPoints>
    1100:	60 91 3a 02 	lds	r22, 0x023A	; 0x80023a <calibratedPoints>
    1104:	83 e7       	ldi	r24, 0x73	; 115
    1106:	91 e0       	ldi	r25, 0x01	; 1
    1108:	0e 94 44 07 	call	0xe88	; 0xe88 <displaySetValueUInt>
    110c:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <calibratedPoints>
    1110:	88 23       	and	r24, r24
    1112:	49 f0       	breq	.+18     	; 0x1126 <loadStoredParameters+0x48>
    1114:	c0 e0       	ldi	r28, 0x00	; 0
    1116:	8c 2f       	mov	r24, r28
    1118:	0e 94 05 07 	call	0xe0a	; 0xe0a <loadCalibrationPoint>
    111c:	cf 5f       	subi	r28, 0xFF	; 255
    111e:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <calibratedPoints>
    1122:	c8 17       	cp	r28, r24
    1124:	c0 f3       	brcs	.-16     	; 0x1116 <loadStoredParameters+0x38>
    1126:	0e 94 a2 07 	call	0xf44	; 0xf44 <fitStraighLine>
    112a:	cf 91       	pop	r28
    112c:	08 95       	ret

0000112e <calculateOverflowThresholdForce>:
    112e:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <overflowProtectionThreshold>
    1132:	70 e0       	ldi	r23, 0x00	; 0
    1134:	80 e0       	ldi	r24, 0x00	; 0
    1136:	90 e0       	ldi	r25, 0x00	; 0
    1138:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <__floatsisf>
    113c:	20 91 05 01 	lds	r18, 0x0105	; 0x800105 <machineCapacity>
    1140:	30 91 06 01 	lds	r19, 0x0106	; 0x800106 <machineCapacity+0x1>
    1144:	40 91 07 01 	lds	r20, 0x0107	; 0x800107 <machineCapacity+0x2>
    1148:	50 91 08 01 	lds	r21, 0x0108	; 0x800108 <machineCapacity+0x3>
    114c:	0e 94 1d 0c 	call	0x183a	; 0x183a <__mulsf3>
    1150:	20 e0       	ldi	r18, 0x00	; 0
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	48 ec       	ldi	r20, 0xC8	; 200
    1156:	52 e4       	ldi	r21, 0x42	; 66
    1158:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <__divsf3>
    115c:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
    1160:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
    1164:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
    1168:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
    116c:	08 95       	ret

0000116e <clearFVarPointers>:
	dtostrf(sampleArea, 7, 1, output);
	displaySetText(SAMPLE_AREA_NAME, output);
}

void clearFVarPointers() {
	fVarCallbackPtr = 0;
    116e:	10 92 40 02 	sts	0x0240, r1	; 0x800240 <fVarCallbackPtr+0x1>
    1172:	10 92 3f 02 	sts	0x023F, r1	; 0x80023f <fVarCallbackPtr>
	fVarPtr = 0;
    1176:	10 92 c6 02 	sts	0x02C6, r1	; 0x8002c6 <fVarPtr+0x1>
    117a:	10 92 c5 02 	sts	0x02C5, r1	; 0x8002c5 <fVarPtr>
    117e:	08 95       	ret

00001180 <initializeSystem>:
 void disableGlobalInterrupt() {
	 SREG &= ~((1<<SREG_I));
 }

void initializeSystem() {
	initializeBuzzer();
    1180:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <initializeBuzzer>
	initSoftwareUARTSend();
    1184:	0e 94 3f 09 	call	0x127e	; 0x127e <initSoftwareUARTSend>
	initSoftwareUARTReceive();
    1188:	0e 94 4c 09 	call	0x1298	; 0x1298 <initSoftwareUARTReceive>
	initBleUARTSend();
    118c:	0e 94 0a 0a 	call	0x1414	; 0x1414 <initBleUARTSend>
	initBleUARTReceive();
    1190:	0e 94 17 0a 	call	0x142e	; 0x142e <initBleUARTReceive>
	//serialInitialize(BAUDRATE);
	adcInitialize(0);
    1194:	80 e0       	ldi	r24, 0x00	; 0
    1196:	0e 94 53 00 	call	0xa6	; 0xa6 <adcInitialize>
	loadStoredParameters();
    119a:	0e 94 6f 08 	call	0x10de	; 0x10de <loadStoredParameters>
	clearFVarPointers();
    119e:	0e 94 b7 08 	call	0x116e	; 0x116e <clearFVarPointers>
	initializeRelay(!overflowProtectionMode);
    11a2:	81 e0       	ldi	r24, 0x01	; 1
    11a4:	90 91 2b 02 	lds	r25, 0x022B	; 0x80022b <overflowProtectionMode>
    11a8:	91 11       	cpse	r25, r1
    11aa:	80 e0       	ldi	r24, 0x00	; 0
    11ac:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <initializeRelay>
    11b0:	2f ef       	ldi	r18, 0xFF	; 255
    11b2:	8f ef       	ldi	r24, 0xFF	; 255
    11b4:	9a e1       	ldi	r25, 0x1A	; 26
    11b6:	21 50       	subi	r18, 0x01	; 1
    11b8:	80 40       	sbci	r24, 0x00	; 0
    11ba:	90 40       	sbci	r25, 0x00	; 0
    11bc:	e1 f7       	brne	.-8      	; 0x11b6 <initializeSystem+0x36>
    11be:	00 c0       	rjmp	.+0      	; 0x11c0 <initializeSystem+0x40>
    11c0:	00 00       	nop
	_delay_ms(800);

	initiliazeTimerTicker();
    11c2:	0e 94 93 07 	call	0xf26	; 0xf26 <initiliazeTimerTicker>
	startTimerTicker();
    11c6:	0e 94 9e 07 	call	0xf3c	; 0xf3c <startTimerTicker>

	softwareSerialPrint(READY);
    11ca:	8f e1       	ldi	r24, 0x1F	; 31
    11cc:	92 e0       	ldi	r25, 0x02	; 2
    11ce:	0e 94 91 09 	call	0x1322	; 0x1322 <softwareSerialPrint>
    11d2:	08 95       	ret

000011d4 <initializeBuzzer>:
 #include "passive_buzzer.h"
 #include <avr/io.h>
 #include <util/delay.h>

 void initializeBuzzer() {
	 DDRC |= (1<<BUZZER_PIN);
    11d4:	3c 9a       	sbi	0x07, 4	; 7
    11d6:	08 95       	ret

000011d8 <serialPutChar>:
 }

 void serialClearInputBuffer() {
	 disableGlobalInterrupt();
	 inBufferStartIndex = inBufferEndIndex = 0;
	 enableGlobalInterrupt();
    11d8:	e0 ec       	ldi	r30, 0xC0	; 192
    11da:	f0 e0       	ldi	r31, 0x00	; 0
    11dc:	90 81       	ld	r25, Z
    11de:	95 ff       	sbrs	r25, 5
    11e0:	fd cf       	rjmp	.-6      	; 0x11dc <serialPutChar+0x4>
    11e2:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    11e6:	08 95       	ret

000011e8 <serialReadChar>:
    11e8:	e0 ec       	ldi	r30, 0xC0	; 192
    11ea:	f0 e0       	ldi	r31, 0x00	; 0
    11ec:	80 81       	ld	r24, Z
    11ee:	88 23       	and	r24, r24
    11f0:	ec f7       	brge	.-6      	; 0x11ec <serialReadChar+0x4>
    11f2:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    11f6:	08 95       	ret

000011f8 <__vector_18>:
    11f8:	1f 92       	push	r1
    11fa:	0f 92       	push	r0
    11fc:	0f b6       	in	r0, 0x3f	; 63
    11fe:	0f 92       	push	r0
    1200:	11 24       	eor	r1, r1
    1202:	2f 93       	push	r18
    1204:	3f 93       	push	r19
    1206:	4f 93       	push	r20
    1208:	5f 93       	push	r21
    120a:	6f 93       	push	r22
    120c:	7f 93       	push	r23
    120e:	8f 93       	push	r24
    1210:	9f 93       	push	r25
    1212:	af 93       	push	r26
    1214:	bf 93       	push	r27
    1216:	ef 93       	push	r30
    1218:	ff 93       	push	r31
    121a:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <serialReadChar>
    121e:	e0 91 3d 02 	lds	r30, 0x023D	; 0x80023d <inBufferEndIndex>
    1222:	f0 e0       	ldi	r31, 0x00	; 0
    1224:	e9 53       	subi	r30, 0x39	; 57
    1226:	fd 4f       	sbci	r31, 0xFD	; 253
    1228:	80 83       	st	Z, r24
    122a:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <inBufferEndIndex>
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	01 96       	adiw	r24, 0x01	; 1
    1232:	68 e1       	ldi	r22, 0x18	; 24
    1234:	70 e0       	ldi	r23, 0x00	; 0
    1236:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <__divmodhi4>
    123a:	80 93 3d 02 	sts	0x023D, r24	; 0x80023d <inBufferEndIndex>
    123e:	ff 91       	pop	r31
    1240:	ef 91       	pop	r30
    1242:	bf 91       	pop	r27
    1244:	af 91       	pop	r26
    1246:	9f 91       	pop	r25
    1248:	8f 91       	pop	r24
    124a:	7f 91       	pop	r23
    124c:	6f 91       	pop	r22
    124e:	5f 91       	pop	r21
    1250:	4f 91       	pop	r20
    1252:	3f 91       	pop	r19
    1254:	2f 91       	pop	r18
    1256:	0f 90       	pop	r0
    1258:	0f be       	out	0x3f, r0	; 63
    125a:	0f 90       	pop	r0
    125c:	1f 90       	pop	r1
    125e:	18 95       	reti

00001260 <serialPrint>:
 }

 void serialPrint(const unsigned char *str) {
    1260:	cf 93       	push	r28
    1262:	df 93       	push	r29
    1264:	ec 01       	movw	r28, r24
	 unsigned int i = 0;
	 for (i=0; str[i] != '\0'; i++) {
    1266:	88 81       	ld	r24, Y
    1268:	88 23       	and	r24, r24
    126a:	31 f0       	breq	.+12     	; 0x1278 <serialPrint+0x18>
    126c:	21 96       	adiw	r28, 0x01	; 1
		 serialPutChar(str[i]);
    126e:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <serialPutChar>
	 enableGlobalInterrupt();
 }

 void serialPrint(const unsigned char *str) {
	 unsigned int i = 0;
	 for (i=0; str[i] != '\0'; i++) {
    1272:	89 91       	ld	r24, Y+
    1274:	81 11       	cpse	r24, r1
    1276:	fb cf       	rjmp	.-10     	; 0x126e <serialPrint+0xe>
		 serialPutChar(str[i]);
	 }
 }
    1278:	df 91       	pop	r29
    127a:	cf 91       	pop	r28
    127c:	08 95       	ret

0000127e <initSoftwareUARTSend>:
		////testSoftwareUARTSend();
	//}
//}

void initSoftwareUARTSend() {
	DDRD |= (1<<PORTD3);
    127e:	53 9a       	sbi	0x0a, 3	; 10
	TCCR1B |= (1 << WGM12);
    1280:	e1 e8       	ldi	r30, 0x81	; 129
    1282:	f0 e0       	ldi	r31, 0x00	; 0
    1284:	80 81       	ld	r24, Z
    1286:	88 60       	ori	r24, 0x08	; 8
    1288:	80 83       	st	Z, r24
	OCR1A = 1152;
    128a:	80 e8       	ldi	r24, 0x80	; 128
    128c:	94 e0       	ldi	r25, 0x04	; 4
    128e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    1292:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    1296:	08 95       	ret

00001298 <initSoftwareUARTReceive>:
}

void initSoftwareUARTReceive() {
	DDRD &= ~(1<<PORTD2);
    1298:	52 98       	cbi	0x0a, 2	; 10
	PORTD |= (1<<PORTD2);
    129a:	5a 9a       	sbi	0x0b, 2	; 11
	TCCR1B |= (1 << WGM12);
    129c:	e1 e8       	ldi	r30, 0x81	; 129
    129e:	f0 e0       	ldi	r31, 0x00	; 0
    12a0:	80 81       	ld	r24, Z
    12a2:	88 60       	ori	r24, 0x08	; 8
    12a4:	80 83       	st	Z, r24
	OCR1A = 1152;
    12a6:	80 e8       	ldi	r24, 0x80	; 128
    12a8:	94 e0       	ldi	r25, 0x04	; 4
    12aa:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    12ae:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	PCICR |= (1 << PCIE2);
    12b2:	e8 e6       	ldi	r30, 0x68	; 104
    12b4:	f0 e0       	ldi	r31, 0x00	; 0
    12b6:	80 81       	ld	r24, Z
    12b8:	84 60       	ori	r24, 0x04	; 4
    12ba:	80 83       	st	Z, r24
	PCMSK2 |= (1 << PCINT18);
    12bc:	ed e6       	ldi	r30, 0x6D	; 109
    12be:	f0 e0       	ldi	r31, 0x00	; 0
    12c0:	80 81       	ld	r24, Z
    12c2:	84 60       	ori	r24, 0x04	; 4
    12c4:	80 83       	st	Z, r24
	sei();
    12c6:	78 94       	sei
    12c8:	08 95       	ret

000012ca <softwareSendBit>:
	}
	softwareSendBit(1);
}

void softwareSendBit(unsigned char b) {
	TCCR1B &= ~(1 << CS10);
    12ca:	e1 e8       	ldi	r30, 0x81	; 129
    12cc:	f0 e0       	ldi	r31, 0x00	; 0
    12ce:	90 81       	ld	r25, Z
    12d0:	9e 7f       	andi	r25, 0xFE	; 254
    12d2:	90 83       	st	Z, r25
	if (b)
    12d4:	88 23       	and	r24, r24
    12d6:	11 f0       	breq	.+4      	; 0x12dc <softwareSendBit+0x12>
		PORTD = PORTD | (1 << PORTD3);
    12d8:	5b 9a       	sbi	0x0b, 3	; 11
    12da:	01 c0       	rjmp	.+2      	; 0x12de <softwareSendBit+0x14>
	else
		PORTD = PORTD & ~(1 << PORTD3);
    12dc:	5b 98       	cbi	0x0b, 3	; 11
	TCCR1B |= (1 << CS10);
    12de:	e1 e8       	ldi	r30, 0x81	; 129
    12e0:	f0 e0       	ldi	r31, 0x00	; 0
    12e2:	80 81       	ld	r24, Z
    12e4:	81 60       	ori	r24, 0x01	; 1
    12e6:	80 83       	st	Z, r24
	while (!(TIFR1 & (1 << OCF1A)));
    12e8:	b1 9b       	sbis	0x16, 1	; 22
    12ea:	fe cf       	rjmp	.-4      	; 0x12e8 <softwareSendBit+0x1e>
	TIFR1 = (TIFR1 | (1 << OCF1A));
    12ec:	b1 9a       	sbi	0x16, 1	; 22
	TCCR1B &= ~(1 << CS10);
    12ee:	e1 e8       	ldi	r30, 0x81	; 129
    12f0:	f0 e0       	ldi	r31, 0x00	; 0
    12f2:	80 81       	ld	r24, Z
    12f4:	8e 7f       	andi	r24, 0xFE	; 254
    12f6:	80 83       	st	Z, r24
    12f8:	08 95       	ret

000012fa <softwareSendByte>:
	softwareSerialPrintULong(t->tm_min);
	softwareSerialPrint(":");
	softwareSerialPrintULong(t->tm_sec);
}

void softwareSendByte(unsigned char c) {
    12fa:	cf 93       	push	r28
    12fc:	df 93       	push	r29
    12fe:	d8 2f       	mov	r29, r24
	unsigned char i;
	softwareSendBit(0);
    1300:	80 e0       	ldi	r24, 0x00	; 0
    1302:	0e 94 65 09 	call	0x12ca	; 0x12ca <softwareSendBit>
    1306:	c8 e0       	ldi	r28, 0x08	; 8
	for (i = 0; i < 8; i++) {
		softwareSendBit(c & 0x01);
    1308:	8d 2f       	mov	r24, r29
    130a:	81 70       	andi	r24, 0x01	; 1
    130c:	0e 94 65 09 	call	0x12ca	; 0x12ca <softwareSendBit>
		c >>= 1;
    1310:	d6 95       	lsr	r29
    1312:	c1 50       	subi	r28, 0x01	; 1
}

void softwareSendByte(unsigned char c) {
	unsigned char i;
	softwareSendBit(0);
	for (i = 0; i < 8; i++) {
    1314:	c9 f7       	brne	.-14     	; 0x1308 <softwareSendByte+0xe>
		softwareSendBit(c & 0x01);
		c >>= 1;
	}
	softwareSendBit(1);
    1316:	81 e0       	ldi	r24, 0x01	; 1
    1318:	0e 94 65 09 	call	0x12ca	; 0x12ca <softwareSendBit>
}
    131c:	df 91       	pop	r29
    131e:	cf 91       	pop	r28
    1320:	08 95       	ret

00001322 <softwareSerialPrint>:
	PCICR |= (1 << PCIE2);
	PCMSK2 |= (1 << PCINT18);
	sei();
}

void softwareSerialPrint(const unsigned char *c) {
    1322:	0f 93       	push	r16
    1324:	1f 93       	push	r17
    1326:	cf 93       	push	r28
    1328:	fc 01       	movw	r30, r24
	unsigned char i;
	for (i=0; c[i] != 0; i++) {
    132a:	80 81       	ld	r24, Z
    132c:	88 23       	and	r24, r24
    132e:	59 f0       	breq	.+22     	; 0x1346 <softwareSerialPrint+0x24>
    1330:	8f 01       	movw	r16, r30
    1332:	c0 e0       	ldi	r28, 0x00	; 0
		softwareSendByte(c[i]);
    1334:	0e 94 7d 09 	call	0x12fa	; 0x12fa <softwareSendByte>
	sei();
}

void softwareSerialPrint(const unsigned char *c) {
	unsigned char i;
	for (i=0; c[i] != 0; i++) {
    1338:	cf 5f       	subi	r28, 0xFF	; 255
    133a:	f8 01       	movw	r30, r16
    133c:	ec 0f       	add	r30, r28
    133e:	f1 1d       	adc	r31, r1
    1340:	80 81       	ld	r24, Z
    1342:	81 11       	cpse	r24, r1
    1344:	f7 cf       	rjmp	.-18     	; 0x1334 <softwareSerialPrint+0x12>
		softwareSendByte(c[i]);
	}
}
    1346:	cf 91       	pop	r28
    1348:	1f 91       	pop	r17
    134a:	0f 91       	pop	r16
    134c:	08 95       	ret

0000134e <__vector_5>:
	sei();
}

void resetBleBuffer() {
	for (int i = 0; i < BLE_BUFFER_SIZE; i++) bleBuffer[i] = 0;
	bleBufferLen = 0;
    134e:	1f 92       	push	r1
    1350:	0f 92       	push	r0
    1352:	0f b6       	in	r0, 0x3f	; 63
    1354:	0f 92       	push	r0
    1356:	11 24       	eor	r1, r1
    1358:	2f 93       	push	r18
    135a:	5f 93       	push	r21
    135c:	6f 93       	push	r22
    135e:	7f 93       	push	r23
    1360:	8f 93       	push	r24
    1362:	9f 93       	push	r25
    1364:	af 93       	push	r26
    1366:	bf 93       	push	r27
    1368:	ef 93       	push	r30
    136a:	ff 93       	push	r31
    136c:	ed e6       	ldi	r30, 0x6D	; 109
    136e:	f0 e0       	ldi	r31, 0x00	; 0
    1370:	80 81       	ld	r24, Z
    1372:	8f 77       	andi	r24, 0x7F	; 127
    1374:	80 83       	st	Z, r24
    1376:	4f 99       	sbic	0x09, 7	; 9
    1378:	39 c0       	rjmp	.+114    	; 0x13ec <__vector_5+0x9e>
    137a:	80 e4       	ldi	r24, 0x40	; 64
    137c:	92 e0       	ldi	r25, 0x02	; 2
    137e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    1382:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    1386:	e1 e8       	ldi	r30, 0x81	; 129
    1388:	f0 e0       	ldi	r31, 0x00	; 0
    138a:	80 81       	ld	r24, Z
    138c:	81 60       	ori	r24, 0x01	; 1
    138e:	80 83       	st	Z, r24
    1390:	b1 9b       	sbis	0x16, 1	; 22
    1392:	fe cf       	rjmp	.-4      	; 0x1390 <__vector_5+0x42>
    1394:	e1 e8       	ldi	r30, 0x81	; 129
    1396:	f0 e0       	ldi	r31, 0x00	; 0
    1398:	80 81       	ld	r24, Z
    139a:	8e 7f       	andi	r24, 0xFE	; 254
    139c:	80 83       	st	Z, r24
    139e:	b1 9a       	sbi	0x16, 1	; 22
    13a0:	80 e8       	ldi	r24, 0x80	; 128
    13a2:	94 e0       	ldi	r25, 0x04	; 4
    13a4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    13a8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    13ac:	98 e0       	ldi	r25, 0x08	; 8
    13ae:	20 e0       	ldi	r18, 0x00	; 0
    13b0:	26 95       	lsr	r18
    13b2:	80 81       	ld	r24, Z
    13b4:	81 60       	ori	r24, 0x01	; 1
    13b6:	80 83       	st	Z, r24
    13b8:	b1 9b       	sbis	0x16, 1	; 22
    13ba:	fe cf       	rjmp	.-4      	; 0x13b8 <__vector_5+0x6a>
    13bc:	80 81       	ld	r24, Z
    13be:	8e 7f       	andi	r24, 0xFE	; 254
    13c0:	80 83       	st	Z, r24
    13c2:	4f 99       	sbic	0x09, 7	; 9
    13c4:	20 68       	ori	r18, 0x80	; 128
    13c6:	b1 9a       	sbi	0x16, 1	; 22
    13c8:	91 50       	subi	r25, 0x01	; 1
    13ca:	91 f7       	brne	.-28     	; 0x13b0 <__vector_5+0x62>
    13cc:	e0 91 3e 02 	lds	r30, 0x023E	; 0x80023e <bleBufferLen>
    13d0:	f0 e0       	ldi	r31, 0x00	; 0
    13d2:	e1 52       	subi	r30, 0x21	; 33
    13d4:	fd 4f       	sbci	r31, 0xFD	; 253
    13d6:	20 83       	st	Z, r18
    13d8:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <bleBufferLen>
    13dc:	90 e0       	ldi	r25, 0x00	; 0
    13de:	40 96       	adiw	r24, 0x10	; 16
    13e0:	6f e0       	ldi	r22, 0x0F	; 15
    13e2:	70 e0       	ldi	r23, 0x00	; 0
    13e4:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <__divmodhi4>
    13e8:	80 93 3e 02 	sts	0x023E, r24	; 0x80023e <bleBufferLen>
    13ec:	ed e6       	ldi	r30, 0x6D	; 109
    13ee:	f0 e0       	ldi	r31, 0x00	; 0
    13f0:	80 81       	ld	r24, Z
    13f2:	80 68       	ori	r24, 0x80	; 128
    13f4:	80 83       	st	Z, r24
    13f6:	ff 91       	pop	r31
    13f8:	ef 91       	pop	r30
    13fa:	bf 91       	pop	r27
    13fc:	af 91       	pop	r26
    13fe:	9f 91       	pop	r25
    1400:	8f 91       	pop	r24
    1402:	7f 91       	pop	r23
    1404:	6f 91       	pop	r22
    1406:	5f 91       	pop	r21
    1408:	2f 91       	pop	r18
    140a:	0f 90       	pop	r0
    140c:	0f be       	out	0x3f, r0	; 63
    140e:	0f 90       	pop	r0
    1410:	1f 90       	pop	r1
    1412:	18 95       	reti

00001414 <initBleUARTSend>:
    1414:	56 9a       	sbi	0x0a, 6	; 10
    1416:	e1 e8       	ldi	r30, 0x81	; 129
    1418:	f0 e0       	ldi	r31, 0x00	; 0
    141a:	80 81       	ld	r24, Z
    141c:	88 60       	ori	r24, 0x08	; 8
    141e:	80 83       	st	Z, r24
    1420:	80 e8       	ldi	r24, 0x80	; 128
    1422:	94 e0       	ldi	r25, 0x04	; 4
    1424:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    1428:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    142c:	08 95       	ret

0000142e <initBleUARTReceive>:
    142e:	57 98       	cbi	0x0a, 7	; 10
    1430:	5f 98       	cbi	0x0b, 7	; 11
    1432:	e1 e8       	ldi	r30, 0x81	; 129
    1434:	f0 e0       	ldi	r31, 0x00	; 0
    1436:	80 81       	ld	r24, Z
    1438:	88 60       	ori	r24, 0x08	; 8
    143a:	80 83       	st	Z, r24
    143c:	80 e8       	ldi	r24, 0x80	; 128
    143e:	94 e0       	ldi	r25, 0x04	; 4
    1440:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    1444:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    1448:	e8 e6       	ldi	r30, 0x68	; 104
    144a:	f0 e0       	ldi	r31, 0x00	; 0
    144c:	80 81       	ld	r24, Z
    144e:	84 60       	ori	r24, 0x04	; 4
    1450:	80 83       	st	Z, r24
    1452:	ed e6       	ldi	r30, 0x6D	; 109
    1454:	f0 e0       	ldi	r31, 0x00	; 0
    1456:	80 81       	ld	r24, Z
    1458:	80 68       	ori	r24, 0x80	; 128
    145a:	80 83       	st	Z, r24
    145c:	78 94       	sei
    145e:	08 95       	ret

00001460 <bleSendBit>:
	}
	bleSendBit(1);
}

void bleSendBit(unsigned char b) {
	TCCR1B &= ~(1 << CS10);
    1460:	e1 e8       	ldi	r30, 0x81	; 129
    1462:	f0 e0       	ldi	r31, 0x00	; 0
    1464:	90 81       	ld	r25, Z
    1466:	9e 7f       	andi	r25, 0xFE	; 254
    1468:	90 83       	st	Z, r25
	if (b)
    146a:	88 23       	and	r24, r24
    146c:	11 f0       	breq	.+4      	; 0x1472 <bleSendBit+0x12>
		PORTD = PORTD | (1 << PORTD6);
    146e:	5e 9a       	sbi	0x0b, 6	; 11
    1470:	01 c0       	rjmp	.+2      	; 0x1474 <bleSendBit+0x14>
	else
		PORTD = PORTD & ~(1 << PORTD6);
    1472:	5e 98       	cbi	0x0b, 6	; 11
	TCCR1B |= (1 << CS10);
    1474:	e1 e8       	ldi	r30, 0x81	; 129
    1476:	f0 e0       	ldi	r31, 0x00	; 0
    1478:	80 81       	ld	r24, Z
    147a:	81 60       	ori	r24, 0x01	; 1
    147c:	80 83       	st	Z, r24
	while (!(TIFR1 & (1 << OCF1A)));
    147e:	b1 9b       	sbis	0x16, 1	; 22
    1480:	fe cf       	rjmp	.-4      	; 0x147e <bleSendBit+0x1e>
	TIFR1 = (TIFR1 | (1 << OCF1A));
    1482:	b1 9a       	sbi	0x16, 1	; 22
	TCCR1B &= ~(1 << CS10);
    1484:	e1 e8       	ldi	r30, 0x81	; 129
    1486:	f0 e0       	ldi	r31, 0x00	; 0
    1488:	80 81       	ld	r24, Z
    148a:	8e 7f       	andi	r24, 0xFE	; 254
    148c:	80 83       	st	Z, r24
    148e:	08 95       	ret

00001490 <bleSendByte>:
	bleSerialPrintULong(t->tm_min);
	bleSerialPrint(":");
	bleSerialPrintULong(t->tm_sec);
}

void bleSendByte(unsigned char c) {
    1490:	cf 93       	push	r28
    1492:	df 93       	push	r29
    1494:	d8 2f       	mov	r29, r24
	unsigned char i;
	bleSendBit(0);
    1496:	80 e0       	ldi	r24, 0x00	; 0
    1498:	0e 94 30 0a 	call	0x1460	; 0x1460 <bleSendBit>
    149c:	c8 e0       	ldi	r28, 0x08	; 8
	for (i = 0; i < 8; i++) {
		bleSendBit(c & 0x01);
    149e:	8d 2f       	mov	r24, r29
    14a0:	81 70       	andi	r24, 0x01	; 1
    14a2:	0e 94 30 0a 	call	0x1460	; 0x1460 <bleSendBit>
		c >>= 1;
    14a6:	d6 95       	lsr	r29
    14a8:	c1 50       	subi	r28, 0x01	; 1
}

void bleSendByte(unsigned char c) {
	unsigned char i;
	bleSendBit(0);
	for (i = 0; i < 8; i++) {
    14aa:	c9 f7       	brne	.-14     	; 0x149e <bleSendByte+0xe>
		bleSendBit(c & 0x01);
		c >>= 1;
	}
	bleSendBit(1);
    14ac:	81 e0       	ldi	r24, 0x01	; 1
    14ae:	0e 94 30 0a 	call	0x1460	; 0x1460 <bleSendBit>
}
    14b2:	df 91       	pop	r29
    14b4:	cf 91       	pop	r28
    14b6:	08 95       	ret

000014b8 <bleSerialPrint>:
void resetBleBuffer() {
	for (int i = 0; i < BLE_BUFFER_SIZE; i++) bleBuffer[i] = 0;
	bleBufferLen = 0;
}

void bleSerialPrint(const unsigned char *c) {
    14b8:	0f 93       	push	r16
    14ba:	1f 93       	push	r17
    14bc:	cf 93       	push	r28
    14be:	fc 01       	movw	r30, r24
	unsigned char i;
	for (i=0; c[i] != 0; i++) {
    14c0:	80 81       	ld	r24, Z
    14c2:	88 23       	and	r24, r24
    14c4:	59 f0       	breq	.+22     	; 0x14dc <bleSerialPrint+0x24>
    14c6:	8f 01       	movw	r16, r30
    14c8:	c0 e0       	ldi	r28, 0x00	; 0
		bleSendByte(c[i]);
    14ca:	0e 94 48 0a 	call	0x1490	; 0x1490 <bleSendByte>
	bleBufferLen = 0;
}

void bleSerialPrint(const unsigned char *c) {
	unsigned char i;
	for (i=0; c[i] != 0; i++) {
    14ce:	cf 5f       	subi	r28, 0xFF	; 255
    14d0:	f8 01       	movw	r30, r16
    14d2:	ec 0f       	add	r30, r28
    14d4:	f1 1d       	adc	r31, r1
    14d6:	80 81       	ld	r24, Z
    14d8:	81 11       	cpse	r24, r1
    14da:	f7 cf       	rjmp	.-18     	; 0x14ca <bleSerialPrint+0x12>
		bleSendByte(c[i]);
	}
}
    14dc:	cf 91       	pop	r28
    14de:	1f 91       	pop	r17
    14e0:	0f 91       	pop	r16
    14e2:	08 95       	ret

000014e4 <relayTurnOn>:
		relayTurnOff();
	}
 }

 void relayTurnOn() {
	PORTB |= (1<<SSR_PIN);
    14e4:	28 9a       	sbi	0x05, 0	; 5
    14e6:	08 95       	ret

000014e8 <relayTurnOff>:
 }

 void relayTurnOff() {
	PORTB &= ~(1<<SSR_PIN);
    14e8:	28 98       	cbi	0x05, 0	; 5
    14ea:	08 95       	ret

000014ec <relayOnOff>:
	DDRB |= (1<<SSR_PIN);
	relayOnOff(onOff);
 }

 void relayOnOff(unsigned char onOff) {
	if (onOff) {
    14ec:	88 23       	and	r24, r24
    14ee:	19 f0       	breq	.+6      	; 0x14f6 <relayOnOff+0xa>
		relayTurnOn();
    14f0:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <relayTurnOn>
    14f4:	08 95       	ret
	}
	else {
		relayTurnOff();
    14f6:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <relayTurnOff>
    14fa:	08 95       	ret

000014fc <initializeRelay>:

 #include "ssr.h"
 #include <avr/io.h>

 void initializeRelay(unsigned char onOff) {
	DDRB |= (1<<SSR_PIN);
    14fc:	20 9a       	sbi	0x04, 0	; 4
	relayOnOff(onOff);
    14fe:	0e 94 76 0a 	call	0x14ec	; 0x14ec <relayOnOff>
    1502:	08 95       	ret

00001504 <__subsf3>:
    1504:	50 58       	subi	r21, 0x80	; 128

00001506 <__addsf3>:
    1506:	bb 27       	eor	r27, r27
    1508:	aa 27       	eor	r26, r26
    150a:	0e 94 9a 0a 	call	0x1534	; 0x1534 <__addsf3x>
    150e:	0c 94 de 0b 	jmp	0x17bc	; 0x17bc <__fp_round>
    1512:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <__fp_pscA>
    1516:	38 f0       	brcs	.+14     	; 0x1526 <__addsf3+0x20>
    1518:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <__fp_pscB>
    151c:	20 f0       	brcs	.+8      	; 0x1526 <__addsf3+0x20>
    151e:	39 f4       	brne	.+14     	; 0x152e <__addsf3+0x28>
    1520:	9f 3f       	cpi	r25, 0xFF	; 255
    1522:	19 f4       	brne	.+6      	; 0x152a <__addsf3+0x24>
    1524:	26 f4       	brtc	.+8      	; 0x152e <__addsf3+0x28>
    1526:	0c 94 cd 0b 	jmp	0x179a	; 0x179a <__fp_nan>
    152a:	0e f4       	brtc	.+2      	; 0x152e <__addsf3+0x28>
    152c:	e0 95       	com	r30
    152e:	e7 fb       	bst	r30, 7
    1530:	0c 94 c7 0b 	jmp	0x178e	; 0x178e <__fp_inf>

00001534 <__addsf3x>:
    1534:	e9 2f       	mov	r30, r25
    1536:	0e 94 ef 0b 	call	0x17de	; 0x17de <__fp_split3>
    153a:	58 f3       	brcs	.-42     	; 0x1512 <__addsf3+0xc>
    153c:	ba 17       	cp	r27, r26
    153e:	62 07       	cpc	r22, r18
    1540:	73 07       	cpc	r23, r19
    1542:	84 07       	cpc	r24, r20
    1544:	95 07       	cpc	r25, r21
    1546:	20 f0       	brcs	.+8      	; 0x1550 <__addsf3x+0x1c>
    1548:	79 f4       	brne	.+30     	; 0x1568 <__addsf3x+0x34>
    154a:	a6 f5       	brtc	.+104    	; 0x15b4 <__addsf3x+0x80>
    154c:	0c 94 11 0c 	jmp	0x1822	; 0x1822 <__fp_zero>
    1550:	0e f4       	brtc	.+2      	; 0x1554 <__addsf3x+0x20>
    1552:	e0 95       	com	r30
    1554:	0b 2e       	mov	r0, r27
    1556:	ba 2f       	mov	r27, r26
    1558:	a0 2d       	mov	r26, r0
    155a:	0b 01       	movw	r0, r22
    155c:	b9 01       	movw	r22, r18
    155e:	90 01       	movw	r18, r0
    1560:	0c 01       	movw	r0, r24
    1562:	ca 01       	movw	r24, r20
    1564:	a0 01       	movw	r20, r0
    1566:	11 24       	eor	r1, r1
    1568:	ff 27       	eor	r31, r31
    156a:	59 1b       	sub	r21, r25
    156c:	99 f0       	breq	.+38     	; 0x1594 <__addsf3x+0x60>
    156e:	59 3f       	cpi	r21, 0xF9	; 249
    1570:	50 f4       	brcc	.+20     	; 0x1586 <__addsf3x+0x52>
    1572:	50 3e       	cpi	r21, 0xE0	; 224
    1574:	68 f1       	brcs	.+90     	; 0x15d0 <__addsf3x+0x9c>
    1576:	1a 16       	cp	r1, r26
    1578:	f0 40       	sbci	r31, 0x00	; 0
    157a:	a2 2f       	mov	r26, r18
    157c:	23 2f       	mov	r18, r19
    157e:	34 2f       	mov	r19, r20
    1580:	44 27       	eor	r20, r20
    1582:	58 5f       	subi	r21, 0xF8	; 248
    1584:	f3 cf       	rjmp	.-26     	; 0x156c <__addsf3x+0x38>
    1586:	46 95       	lsr	r20
    1588:	37 95       	ror	r19
    158a:	27 95       	ror	r18
    158c:	a7 95       	ror	r26
    158e:	f0 40       	sbci	r31, 0x00	; 0
    1590:	53 95       	inc	r21
    1592:	c9 f7       	brne	.-14     	; 0x1586 <__addsf3x+0x52>
    1594:	7e f4       	brtc	.+30     	; 0x15b4 <__addsf3x+0x80>
    1596:	1f 16       	cp	r1, r31
    1598:	ba 0b       	sbc	r27, r26
    159a:	62 0b       	sbc	r22, r18
    159c:	73 0b       	sbc	r23, r19
    159e:	84 0b       	sbc	r24, r20
    15a0:	ba f0       	brmi	.+46     	; 0x15d0 <__addsf3x+0x9c>
    15a2:	91 50       	subi	r25, 0x01	; 1
    15a4:	a1 f0       	breq	.+40     	; 0x15ce <__addsf3x+0x9a>
    15a6:	ff 0f       	add	r31, r31
    15a8:	bb 1f       	adc	r27, r27
    15aa:	66 1f       	adc	r22, r22
    15ac:	77 1f       	adc	r23, r23
    15ae:	88 1f       	adc	r24, r24
    15b0:	c2 f7       	brpl	.-16     	; 0x15a2 <__addsf3x+0x6e>
    15b2:	0e c0       	rjmp	.+28     	; 0x15d0 <__addsf3x+0x9c>
    15b4:	ba 0f       	add	r27, r26
    15b6:	62 1f       	adc	r22, r18
    15b8:	73 1f       	adc	r23, r19
    15ba:	84 1f       	adc	r24, r20
    15bc:	48 f4       	brcc	.+18     	; 0x15d0 <__addsf3x+0x9c>
    15be:	87 95       	ror	r24
    15c0:	77 95       	ror	r23
    15c2:	67 95       	ror	r22
    15c4:	b7 95       	ror	r27
    15c6:	f7 95       	ror	r31
    15c8:	9e 3f       	cpi	r25, 0xFE	; 254
    15ca:	08 f0       	brcs	.+2      	; 0x15ce <__addsf3x+0x9a>
    15cc:	b0 cf       	rjmp	.-160    	; 0x152e <__addsf3+0x28>
    15ce:	93 95       	inc	r25
    15d0:	88 0f       	add	r24, r24
    15d2:	08 f0       	brcs	.+2      	; 0x15d6 <__addsf3x+0xa2>
    15d4:	99 27       	eor	r25, r25
    15d6:	ee 0f       	add	r30, r30
    15d8:	97 95       	ror	r25
    15da:	87 95       	ror	r24
    15dc:	08 95       	ret

000015de <__cmpsf2>:
    15de:	0e 94 a3 0b 	call	0x1746	; 0x1746 <__fp_cmp>
    15e2:	08 f4       	brcc	.+2      	; 0x15e6 <__cmpsf2+0x8>
    15e4:	81 e0       	ldi	r24, 0x01	; 1
    15e6:	08 95       	ret

000015e8 <__divsf3>:
    15e8:	0e 94 08 0b 	call	0x1610	; 0x1610 <__divsf3x>
    15ec:	0c 94 de 0b 	jmp	0x17bc	; 0x17bc <__fp_round>
    15f0:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <__fp_pscB>
    15f4:	58 f0       	brcs	.+22     	; 0x160c <__divsf3+0x24>
    15f6:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <__fp_pscA>
    15fa:	40 f0       	brcs	.+16     	; 0x160c <__divsf3+0x24>
    15fc:	29 f4       	brne	.+10     	; 0x1608 <__divsf3+0x20>
    15fe:	5f 3f       	cpi	r21, 0xFF	; 255
    1600:	29 f0       	breq	.+10     	; 0x160c <__divsf3+0x24>
    1602:	0c 94 c7 0b 	jmp	0x178e	; 0x178e <__fp_inf>
    1606:	51 11       	cpse	r21, r1
    1608:	0c 94 12 0c 	jmp	0x1824	; 0x1824 <__fp_szero>
    160c:	0c 94 cd 0b 	jmp	0x179a	; 0x179a <__fp_nan>

00001610 <__divsf3x>:
    1610:	0e 94 ef 0b 	call	0x17de	; 0x17de <__fp_split3>
    1614:	68 f3       	brcs	.-38     	; 0x15f0 <__divsf3+0x8>

00001616 <__divsf3_pse>:
    1616:	99 23       	and	r25, r25
    1618:	b1 f3       	breq	.-20     	; 0x1606 <__divsf3+0x1e>
    161a:	55 23       	and	r21, r21
    161c:	91 f3       	breq	.-28     	; 0x1602 <__divsf3+0x1a>
    161e:	95 1b       	sub	r25, r21
    1620:	55 0b       	sbc	r21, r21
    1622:	bb 27       	eor	r27, r27
    1624:	aa 27       	eor	r26, r26
    1626:	62 17       	cp	r22, r18
    1628:	73 07       	cpc	r23, r19
    162a:	84 07       	cpc	r24, r20
    162c:	38 f0       	brcs	.+14     	; 0x163c <__divsf3_pse+0x26>
    162e:	9f 5f       	subi	r25, 0xFF	; 255
    1630:	5f 4f       	sbci	r21, 0xFF	; 255
    1632:	22 0f       	add	r18, r18
    1634:	33 1f       	adc	r19, r19
    1636:	44 1f       	adc	r20, r20
    1638:	aa 1f       	adc	r26, r26
    163a:	a9 f3       	breq	.-22     	; 0x1626 <__divsf3_pse+0x10>
    163c:	35 d0       	rcall	.+106    	; 0x16a8 <__divsf3_pse+0x92>
    163e:	0e 2e       	mov	r0, r30
    1640:	3a f0       	brmi	.+14     	; 0x1650 <__divsf3_pse+0x3a>
    1642:	e0 e8       	ldi	r30, 0x80	; 128
    1644:	32 d0       	rcall	.+100    	; 0x16aa <__divsf3_pse+0x94>
    1646:	91 50       	subi	r25, 0x01	; 1
    1648:	50 40       	sbci	r21, 0x00	; 0
    164a:	e6 95       	lsr	r30
    164c:	00 1c       	adc	r0, r0
    164e:	ca f7       	brpl	.-14     	; 0x1642 <__divsf3_pse+0x2c>
    1650:	2b d0       	rcall	.+86     	; 0x16a8 <__divsf3_pse+0x92>
    1652:	fe 2f       	mov	r31, r30
    1654:	29 d0       	rcall	.+82     	; 0x16a8 <__divsf3_pse+0x92>
    1656:	66 0f       	add	r22, r22
    1658:	77 1f       	adc	r23, r23
    165a:	88 1f       	adc	r24, r24
    165c:	bb 1f       	adc	r27, r27
    165e:	26 17       	cp	r18, r22
    1660:	37 07       	cpc	r19, r23
    1662:	48 07       	cpc	r20, r24
    1664:	ab 07       	cpc	r26, r27
    1666:	b0 e8       	ldi	r27, 0x80	; 128
    1668:	09 f0       	breq	.+2      	; 0x166c <__divsf3_pse+0x56>
    166a:	bb 0b       	sbc	r27, r27
    166c:	80 2d       	mov	r24, r0
    166e:	bf 01       	movw	r22, r30
    1670:	ff 27       	eor	r31, r31
    1672:	93 58       	subi	r25, 0x83	; 131
    1674:	5f 4f       	sbci	r21, 0xFF	; 255
    1676:	3a f0       	brmi	.+14     	; 0x1686 <__divsf3_pse+0x70>
    1678:	9e 3f       	cpi	r25, 0xFE	; 254
    167a:	51 05       	cpc	r21, r1
    167c:	78 f0       	brcs	.+30     	; 0x169c <__divsf3_pse+0x86>
    167e:	0c 94 c7 0b 	jmp	0x178e	; 0x178e <__fp_inf>
    1682:	0c 94 12 0c 	jmp	0x1824	; 0x1824 <__fp_szero>
    1686:	5f 3f       	cpi	r21, 0xFF	; 255
    1688:	e4 f3       	brlt	.-8      	; 0x1682 <__divsf3_pse+0x6c>
    168a:	98 3e       	cpi	r25, 0xE8	; 232
    168c:	d4 f3       	brlt	.-12     	; 0x1682 <__divsf3_pse+0x6c>
    168e:	86 95       	lsr	r24
    1690:	77 95       	ror	r23
    1692:	67 95       	ror	r22
    1694:	b7 95       	ror	r27
    1696:	f7 95       	ror	r31
    1698:	9f 5f       	subi	r25, 0xFF	; 255
    169a:	c9 f7       	brne	.-14     	; 0x168e <__divsf3_pse+0x78>
    169c:	88 0f       	add	r24, r24
    169e:	91 1d       	adc	r25, r1
    16a0:	96 95       	lsr	r25
    16a2:	87 95       	ror	r24
    16a4:	97 f9       	bld	r25, 7
    16a6:	08 95       	ret
    16a8:	e1 e0       	ldi	r30, 0x01	; 1
    16aa:	66 0f       	add	r22, r22
    16ac:	77 1f       	adc	r23, r23
    16ae:	88 1f       	adc	r24, r24
    16b0:	bb 1f       	adc	r27, r27
    16b2:	62 17       	cp	r22, r18
    16b4:	73 07       	cpc	r23, r19
    16b6:	84 07       	cpc	r24, r20
    16b8:	ba 07       	cpc	r27, r26
    16ba:	20 f0       	brcs	.+8      	; 0x16c4 <__divsf3_pse+0xae>
    16bc:	62 1b       	sub	r22, r18
    16be:	73 0b       	sbc	r23, r19
    16c0:	84 0b       	sbc	r24, r20
    16c2:	ba 0b       	sbc	r27, r26
    16c4:	ee 1f       	adc	r30, r30
    16c6:	88 f7       	brcc	.-30     	; 0x16aa <__divsf3_pse+0x94>
    16c8:	e0 95       	com	r30
    16ca:	08 95       	ret

000016cc <__floatunsisf>:
    16cc:	e8 94       	clt
    16ce:	09 c0       	rjmp	.+18     	; 0x16e2 <__floatsisf+0x12>

000016d0 <__floatsisf>:
    16d0:	97 fb       	bst	r25, 7
    16d2:	3e f4       	brtc	.+14     	; 0x16e2 <__floatsisf+0x12>
    16d4:	90 95       	com	r25
    16d6:	80 95       	com	r24
    16d8:	70 95       	com	r23
    16da:	61 95       	neg	r22
    16dc:	7f 4f       	sbci	r23, 0xFF	; 255
    16de:	8f 4f       	sbci	r24, 0xFF	; 255
    16e0:	9f 4f       	sbci	r25, 0xFF	; 255
    16e2:	99 23       	and	r25, r25
    16e4:	a9 f0       	breq	.+42     	; 0x1710 <__floatsisf+0x40>
    16e6:	f9 2f       	mov	r31, r25
    16e8:	96 e9       	ldi	r25, 0x96	; 150
    16ea:	bb 27       	eor	r27, r27
    16ec:	93 95       	inc	r25
    16ee:	f6 95       	lsr	r31
    16f0:	87 95       	ror	r24
    16f2:	77 95       	ror	r23
    16f4:	67 95       	ror	r22
    16f6:	b7 95       	ror	r27
    16f8:	f1 11       	cpse	r31, r1
    16fa:	f8 cf       	rjmp	.-16     	; 0x16ec <__floatsisf+0x1c>
    16fc:	fa f4       	brpl	.+62     	; 0x173c <__floatsisf+0x6c>
    16fe:	bb 0f       	add	r27, r27
    1700:	11 f4       	brne	.+4      	; 0x1706 <__floatsisf+0x36>
    1702:	60 ff       	sbrs	r22, 0
    1704:	1b c0       	rjmp	.+54     	; 0x173c <__floatsisf+0x6c>
    1706:	6f 5f       	subi	r22, 0xFF	; 255
    1708:	7f 4f       	sbci	r23, 0xFF	; 255
    170a:	8f 4f       	sbci	r24, 0xFF	; 255
    170c:	9f 4f       	sbci	r25, 0xFF	; 255
    170e:	16 c0       	rjmp	.+44     	; 0x173c <__floatsisf+0x6c>
    1710:	88 23       	and	r24, r24
    1712:	11 f0       	breq	.+4      	; 0x1718 <__floatsisf+0x48>
    1714:	96 e9       	ldi	r25, 0x96	; 150
    1716:	11 c0       	rjmp	.+34     	; 0x173a <__floatsisf+0x6a>
    1718:	77 23       	and	r23, r23
    171a:	21 f0       	breq	.+8      	; 0x1724 <__floatsisf+0x54>
    171c:	9e e8       	ldi	r25, 0x8E	; 142
    171e:	87 2f       	mov	r24, r23
    1720:	76 2f       	mov	r23, r22
    1722:	05 c0       	rjmp	.+10     	; 0x172e <__floatsisf+0x5e>
    1724:	66 23       	and	r22, r22
    1726:	71 f0       	breq	.+28     	; 0x1744 <__floatsisf+0x74>
    1728:	96 e8       	ldi	r25, 0x86	; 134
    172a:	86 2f       	mov	r24, r22
    172c:	70 e0       	ldi	r23, 0x00	; 0
    172e:	60 e0       	ldi	r22, 0x00	; 0
    1730:	2a f0       	brmi	.+10     	; 0x173c <__floatsisf+0x6c>
    1732:	9a 95       	dec	r25
    1734:	66 0f       	add	r22, r22
    1736:	77 1f       	adc	r23, r23
    1738:	88 1f       	adc	r24, r24
    173a:	da f7       	brpl	.-10     	; 0x1732 <__floatsisf+0x62>
    173c:	88 0f       	add	r24, r24
    173e:	96 95       	lsr	r25
    1740:	87 95       	ror	r24
    1742:	97 f9       	bld	r25, 7
    1744:	08 95       	ret

00001746 <__fp_cmp>:
    1746:	99 0f       	add	r25, r25
    1748:	00 08       	sbc	r0, r0
    174a:	55 0f       	add	r21, r21
    174c:	aa 0b       	sbc	r26, r26
    174e:	e0 e8       	ldi	r30, 0x80	; 128
    1750:	fe ef       	ldi	r31, 0xFE	; 254
    1752:	16 16       	cp	r1, r22
    1754:	17 06       	cpc	r1, r23
    1756:	e8 07       	cpc	r30, r24
    1758:	f9 07       	cpc	r31, r25
    175a:	c0 f0       	brcs	.+48     	; 0x178c <__fp_cmp+0x46>
    175c:	12 16       	cp	r1, r18
    175e:	13 06       	cpc	r1, r19
    1760:	e4 07       	cpc	r30, r20
    1762:	f5 07       	cpc	r31, r21
    1764:	98 f0       	brcs	.+38     	; 0x178c <__fp_cmp+0x46>
    1766:	62 1b       	sub	r22, r18
    1768:	73 0b       	sbc	r23, r19
    176a:	84 0b       	sbc	r24, r20
    176c:	95 0b       	sbc	r25, r21
    176e:	39 f4       	brne	.+14     	; 0x177e <__fp_cmp+0x38>
    1770:	0a 26       	eor	r0, r26
    1772:	61 f0       	breq	.+24     	; 0x178c <__fp_cmp+0x46>
    1774:	23 2b       	or	r18, r19
    1776:	24 2b       	or	r18, r20
    1778:	25 2b       	or	r18, r21
    177a:	21 f4       	brne	.+8      	; 0x1784 <__fp_cmp+0x3e>
    177c:	08 95       	ret
    177e:	0a 26       	eor	r0, r26
    1780:	09 f4       	brne	.+2      	; 0x1784 <__fp_cmp+0x3e>
    1782:	a1 40       	sbci	r26, 0x01	; 1
    1784:	a6 95       	lsr	r26
    1786:	8f ef       	ldi	r24, 0xFF	; 255
    1788:	81 1d       	adc	r24, r1
    178a:	81 1d       	adc	r24, r1
    178c:	08 95       	ret

0000178e <__fp_inf>:
    178e:	97 f9       	bld	r25, 7
    1790:	9f 67       	ori	r25, 0x7F	; 127
    1792:	80 e8       	ldi	r24, 0x80	; 128
    1794:	70 e0       	ldi	r23, 0x00	; 0
    1796:	60 e0       	ldi	r22, 0x00	; 0
    1798:	08 95       	ret

0000179a <__fp_nan>:
    179a:	9f ef       	ldi	r25, 0xFF	; 255
    179c:	80 ec       	ldi	r24, 0xC0	; 192
    179e:	08 95       	ret

000017a0 <__fp_pscA>:
    17a0:	00 24       	eor	r0, r0
    17a2:	0a 94       	dec	r0
    17a4:	16 16       	cp	r1, r22
    17a6:	17 06       	cpc	r1, r23
    17a8:	18 06       	cpc	r1, r24
    17aa:	09 06       	cpc	r0, r25
    17ac:	08 95       	ret

000017ae <__fp_pscB>:
    17ae:	00 24       	eor	r0, r0
    17b0:	0a 94       	dec	r0
    17b2:	12 16       	cp	r1, r18
    17b4:	13 06       	cpc	r1, r19
    17b6:	14 06       	cpc	r1, r20
    17b8:	05 06       	cpc	r0, r21
    17ba:	08 95       	ret

000017bc <__fp_round>:
    17bc:	09 2e       	mov	r0, r25
    17be:	03 94       	inc	r0
    17c0:	00 0c       	add	r0, r0
    17c2:	11 f4       	brne	.+4      	; 0x17c8 <__fp_round+0xc>
    17c4:	88 23       	and	r24, r24
    17c6:	52 f0       	brmi	.+20     	; 0x17dc <__fp_round+0x20>
    17c8:	bb 0f       	add	r27, r27
    17ca:	40 f4       	brcc	.+16     	; 0x17dc <__fp_round+0x20>
    17cc:	bf 2b       	or	r27, r31
    17ce:	11 f4       	brne	.+4      	; 0x17d4 <__fp_round+0x18>
    17d0:	60 ff       	sbrs	r22, 0
    17d2:	04 c0       	rjmp	.+8      	; 0x17dc <__fp_round+0x20>
    17d4:	6f 5f       	subi	r22, 0xFF	; 255
    17d6:	7f 4f       	sbci	r23, 0xFF	; 255
    17d8:	8f 4f       	sbci	r24, 0xFF	; 255
    17da:	9f 4f       	sbci	r25, 0xFF	; 255
    17dc:	08 95       	ret

000017de <__fp_split3>:
    17de:	57 fd       	sbrc	r21, 7
    17e0:	90 58       	subi	r25, 0x80	; 128
    17e2:	44 0f       	add	r20, r20
    17e4:	55 1f       	adc	r21, r21
    17e6:	59 f0       	breq	.+22     	; 0x17fe <__fp_splitA+0x10>
    17e8:	5f 3f       	cpi	r21, 0xFF	; 255
    17ea:	71 f0       	breq	.+28     	; 0x1808 <__fp_splitA+0x1a>
    17ec:	47 95       	ror	r20

000017ee <__fp_splitA>:
    17ee:	88 0f       	add	r24, r24
    17f0:	97 fb       	bst	r25, 7
    17f2:	99 1f       	adc	r25, r25
    17f4:	61 f0       	breq	.+24     	; 0x180e <__fp_splitA+0x20>
    17f6:	9f 3f       	cpi	r25, 0xFF	; 255
    17f8:	79 f0       	breq	.+30     	; 0x1818 <__fp_splitA+0x2a>
    17fa:	87 95       	ror	r24
    17fc:	08 95       	ret
    17fe:	12 16       	cp	r1, r18
    1800:	13 06       	cpc	r1, r19
    1802:	14 06       	cpc	r1, r20
    1804:	55 1f       	adc	r21, r21
    1806:	f2 cf       	rjmp	.-28     	; 0x17ec <__fp_split3+0xe>
    1808:	46 95       	lsr	r20
    180a:	f1 df       	rcall	.-30     	; 0x17ee <__fp_splitA>
    180c:	08 c0       	rjmp	.+16     	; 0x181e <__fp_splitA+0x30>
    180e:	16 16       	cp	r1, r22
    1810:	17 06       	cpc	r1, r23
    1812:	18 06       	cpc	r1, r24
    1814:	99 1f       	adc	r25, r25
    1816:	f1 cf       	rjmp	.-30     	; 0x17fa <__fp_splitA+0xc>
    1818:	86 95       	lsr	r24
    181a:	71 05       	cpc	r23, r1
    181c:	61 05       	cpc	r22, r1
    181e:	08 94       	sec
    1820:	08 95       	ret

00001822 <__fp_zero>:
    1822:	e8 94       	clt

00001824 <__fp_szero>:
    1824:	bb 27       	eor	r27, r27
    1826:	66 27       	eor	r22, r22
    1828:	77 27       	eor	r23, r23
    182a:	cb 01       	movw	r24, r22
    182c:	97 f9       	bld	r25, 7
    182e:	08 95       	ret

00001830 <__gesf2>:
    1830:	0e 94 a3 0b 	call	0x1746	; 0x1746 <__fp_cmp>
    1834:	08 f4       	brcc	.+2      	; 0x1838 <__gesf2+0x8>
    1836:	8f ef       	ldi	r24, 0xFF	; 255
    1838:	08 95       	ret

0000183a <__mulsf3>:
    183a:	0e 94 30 0c 	call	0x1860	; 0x1860 <__mulsf3x>
    183e:	0c 94 de 0b 	jmp	0x17bc	; 0x17bc <__fp_round>
    1842:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <__fp_pscA>
    1846:	38 f0       	brcs	.+14     	; 0x1856 <__mulsf3+0x1c>
    1848:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <__fp_pscB>
    184c:	20 f0       	brcs	.+8      	; 0x1856 <__mulsf3+0x1c>
    184e:	95 23       	and	r25, r21
    1850:	11 f0       	breq	.+4      	; 0x1856 <__mulsf3+0x1c>
    1852:	0c 94 c7 0b 	jmp	0x178e	; 0x178e <__fp_inf>
    1856:	0c 94 cd 0b 	jmp	0x179a	; 0x179a <__fp_nan>
    185a:	11 24       	eor	r1, r1
    185c:	0c 94 12 0c 	jmp	0x1824	; 0x1824 <__fp_szero>

00001860 <__mulsf3x>:
    1860:	0e 94 ef 0b 	call	0x17de	; 0x17de <__fp_split3>
    1864:	70 f3       	brcs	.-36     	; 0x1842 <__mulsf3+0x8>

00001866 <__mulsf3_pse>:
    1866:	95 9f       	mul	r25, r21
    1868:	c1 f3       	breq	.-16     	; 0x185a <__mulsf3+0x20>
    186a:	95 0f       	add	r25, r21
    186c:	50 e0       	ldi	r21, 0x00	; 0
    186e:	55 1f       	adc	r21, r21
    1870:	62 9f       	mul	r22, r18
    1872:	f0 01       	movw	r30, r0
    1874:	72 9f       	mul	r23, r18
    1876:	bb 27       	eor	r27, r27
    1878:	f0 0d       	add	r31, r0
    187a:	b1 1d       	adc	r27, r1
    187c:	63 9f       	mul	r22, r19
    187e:	aa 27       	eor	r26, r26
    1880:	f0 0d       	add	r31, r0
    1882:	b1 1d       	adc	r27, r1
    1884:	aa 1f       	adc	r26, r26
    1886:	64 9f       	mul	r22, r20
    1888:	66 27       	eor	r22, r22
    188a:	b0 0d       	add	r27, r0
    188c:	a1 1d       	adc	r26, r1
    188e:	66 1f       	adc	r22, r22
    1890:	82 9f       	mul	r24, r18
    1892:	22 27       	eor	r18, r18
    1894:	b0 0d       	add	r27, r0
    1896:	a1 1d       	adc	r26, r1
    1898:	62 1f       	adc	r22, r18
    189a:	73 9f       	mul	r23, r19
    189c:	b0 0d       	add	r27, r0
    189e:	a1 1d       	adc	r26, r1
    18a0:	62 1f       	adc	r22, r18
    18a2:	83 9f       	mul	r24, r19
    18a4:	a0 0d       	add	r26, r0
    18a6:	61 1d       	adc	r22, r1
    18a8:	22 1f       	adc	r18, r18
    18aa:	74 9f       	mul	r23, r20
    18ac:	33 27       	eor	r19, r19
    18ae:	a0 0d       	add	r26, r0
    18b0:	61 1d       	adc	r22, r1
    18b2:	23 1f       	adc	r18, r19
    18b4:	84 9f       	mul	r24, r20
    18b6:	60 0d       	add	r22, r0
    18b8:	21 1d       	adc	r18, r1
    18ba:	82 2f       	mov	r24, r18
    18bc:	76 2f       	mov	r23, r22
    18be:	6a 2f       	mov	r22, r26
    18c0:	11 24       	eor	r1, r1
    18c2:	9f 57       	subi	r25, 0x7F	; 127
    18c4:	50 40       	sbci	r21, 0x00	; 0
    18c6:	9a f0       	brmi	.+38     	; 0x18ee <__mulsf3_pse+0x88>
    18c8:	f1 f0       	breq	.+60     	; 0x1906 <__mulsf3_pse+0xa0>
    18ca:	88 23       	and	r24, r24
    18cc:	4a f0       	brmi	.+18     	; 0x18e0 <__mulsf3_pse+0x7a>
    18ce:	ee 0f       	add	r30, r30
    18d0:	ff 1f       	adc	r31, r31
    18d2:	bb 1f       	adc	r27, r27
    18d4:	66 1f       	adc	r22, r22
    18d6:	77 1f       	adc	r23, r23
    18d8:	88 1f       	adc	r24, r24
    18da:	91 50       	subi	r25, 0x01	; 1
    18dc:	50 40       	sbci	r21, 0x00	; 0
    18de:	a9 f7       	brne	.-22     	; 0x18ca <__mulsf3_pse+0x64>
    18e0:	9e 3f       	cpi	r25, 0xFE	; 254
    18e2:	51 05       	cpc	r21, r1
    18e4:	80 f0       	brcs	.+32     	; 0x1906 <__mulsf3_pse+0xa0>
    18e6:	0c 94 c7 0b 	jmp	0x178e	; 0x178e <__fp_inf>
    18ea:	0c 94 12 0c 	jmp	0x1824	; 0x1824 <__fp_szero>
    18ee:	5f 3f       	cpi	r21, 0xFF	; 255
    18f0:	e4 f3       	brlt	.-8      	; 0x18ea <__mulsf3_pse+0x84>
    18f2:	98 3e       	cpi	r25, 0xE8	; 232
    18f4:	d4 f3       	brlt	.-12     	; 0x18ea <__mulsf3_pse+0x84>
    18f6:	86 95       	lsr	r24
    18f8:	77 95       	ror	r23
    18fa:	67 95       	ror	r22
    18fc:	b7 95       	ror	r27
    18fe:	f7 95       	ror	r31
    1900:	e7 95       	ror	r30
    1902:	9f 5f       	subi	r25, 0xFF	; 255
    1904:	c1 f7       	brne	.-16     	; 0x18f6 <__mulsf3_pse+0x90>
    1906:	fe 2b       	or	r31, r30
    1908:	88 0f       	add	r24, r24
    190a:	91 1d       	adc	r25, r1
    190c:	96 95       	lsr	r25
    190e:	87 95       	ror	r24
    1910:	97 f9       	bld	r25, 7
    1912:	08 95       	ret
    1914:	19 f4       	brne	.+6      	; 0x191c <__mulsf3_pse+0xb6>
    1916:	16 f4       	brtc	.+4      	; 0x191c <__mulsf3_pse+0xb6>
    1918:	0c 94 cd 0b 	jmp	0x179a	; 0x179a <__fp_nan>
    191c:	0c 94 d5 0c 	jmp	0x19aa	; 0x19aa <__fp_mpack>

00001920 <sqrt>:
    1920:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <__fp_splitA>
    1924:	b8 f3       	brcs	.-18     	; 0x1914 <__mulsf3_pse+0xae>
    1926:	99 23       	and	r25, r25
    1928:	c9 f3       	breq	.-14     	; 0x191c <__mulsf3_pse+0xb6>
    192a:	b6 f3       	brts	.-20     	; 0x1918 <__mulsf3_pse+0xb2>
    192c:	9f 57       	subi	r25, 0x7F	; 127
    192e:	55 0b       	sbc	r21, r21
    1930:	87 ff       	sbrs	r24, 7
    1932:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <__fp_norm2>
    1936:	00 24       	eor	r0, r0
    1938:	a0 e6       	ldi	r26, 0x60	; 96
    193a:	40 ea       	ldi	r20, 0xA0	; 160
    193c:	90 01       	movw	r18, r0
    193e:	80 58       	subi	r24, 0x80	; 128
    1940:	56 95       	lsr	r21
    1942:	97 95       	ror	r25
    1944:	28 f4       	brcc	.+10     	; 0x1950 <sqrt+0x30>
    1946:	80 5c       	subi	r24, 0xC0	; 192
    1948:	66 0f       	add	r22, r22
    194a:	77 1f       	adc	r23, r23
    194c:	88 1f       	adc	r24, r24
    194e:	20 f0       	brcs	.+8      	; 0x1958 <sqrt+0x38>
    1950:	26 17       	cp	r18, r22
    1952:	37 07       	cpc	r19, r23
    1954:	48 07       	cpc	r20, r24
    1956:	30 f4       	brcc	.+12     	; 0x1964 <sqrt+0x44>
    1958:	62 1b       	sub	r22, r18
    195a:	73 0b       	sbc	r23, r19
    195c:	84 0b       	sbc	r24, r20
    195e:	20 29       	or	r18, r0
    1960:	31 29       	or	r19, r1
    1962:	4a 2b       	or	r20, r26
    1964:	a6 95       	lsr	r26
    1966:	17 94       	ror	r1
    1968:	07 94       	ror	r0
    196a:	20 25       	eor	r18, r0
    196c:	31 25       	eor	r19, r1
    196e:	4a 27       	eor	r20, r26
    1970:	58 f7       	brcc	.-42     	; 0x1948 <sqrt+0x28>
    1972:	66 0f       	add	r22, r22
    1974:	77 1f       	adc	r23, r23
    1976:	88 1f       	adc	r24, r24
    1978:	20 f0       	brcs	.+8      	; 0x1982 <sqrt+0x62>
    197a:	26 17       	cp	r18, r22
    197c:	37 07       	cpc	r19, r23
    197e:	48 07       	cpc	r20, r24
    1980:	30 f4       	brcc	.+12     	; 0x198e <sqrt+0x6e>
    1982:	62 0b       	sbc	r22, r18
    1984:	73 0b       	sbc	r23, r19
    1986:	84 0b       	sbc	r24, r20
    1988:	20 0d       	add	r18, r0
    198a:	31 1d       	adc	r19, r1
    198c:	41 1d       	adc	r20, r1
    198e:	a0 95       	com	r26
    1990:	81 f7       	brne	.-32     	; 0x1972 <sqrt+0x52>
    1992:	b9 01       	movw	r22, r18
    1994:	84 2f       	mov	r24, r20
    1996:	91 58       	subi	r25, 0x81	; 129
    1998:	88 0f       	add	r24, r24
    199a:	96 95       	lsr	r25
    199c:	87 95       	ror	r24
    199e:	08 95       	ret

000019a0 <__unordsf2>:
    19a0:	0e 94 a3 0b 	call	0x1746	; 0x1746 <__fp_cmp>
    19a4:	88 0b       	sbc	r24, r24
    19a6:	99 0b       	sbc	r25, r25
    19a8:	08 95       	ret

000019aa <__fp_mpack>:
    19aa:	9f 3f       	cpi	r25, 0xFF	; 255
    19ac:	31 f0       	breq	.+12     	; 0x19ba <__fp_mpack_finite+0xc>

000019ae <__fp_mpack_finite>:
    19ae:	91 50       	subi	r25, 0x01	; 1
    19b0:	20 f4       	brcc	.+8      	; 0x19ba <__fp_mpack_finite+0xc>
    19b2:	87 95       	ror	r24
    19b4:	77 95       	ror	r23
    19b6:	67 95       	ror	r22
    19b8:	b7 95       	ror	r27
    19ba:	88 0f       	add	r24, r24
    19bc:	91 1d       	adc	r25, r1
    19be:	96 95       	lsr	r25
    19c0:	87 95       	ror	r24
    19c2:	97 f9       	bld	r25, 7
    19c4:	08 95       	ret

000019c6 <__fp_norm2>:
    19c6:	91 50       	subi	r25, 0x01	; 1
    19c8:	50 40       	sbci	r21, 0x00	; 0
    19ca:	66 0f       	add	r22, r22
    19cc:	77 1f       	adc	r23, r23
    19ce:	88 1f       	adc	r24, r24
    19d0:	d2 f7       	brpl	.-12     	; 0x19c6 <__fp_norm2>
    19d2:	08 95       	ret

000019d4 <__divmodhi4>:
    19d4:	97 fb       	bst	r25, 7
    19d6:	07 2e       	mov	r0, r23
    19d8:	16 f4       	brtc	.+4      	; 0x19de <__divmodhi4+0xa>
    19da:	00 94       	com	r0
    19dc:	07 d0       	rcall	.+14     	; 0x19ec <__divmodhi4_neg1>
    19de:	77 fd       	sbrc	r23, 7
    19e0:	09 d0       	rcall	.+18     	; 0x19f4 <__divmodhi4_neg2>
    19e2:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <__udivmodhi4>
    19e6:	07 fc       	sbrc	r0, 7
    19e8:	05 d0       	rcall	.+10     	; 0x19f4 <__divmodhi4_neg2>
    19ea:	3e f4       	brtc	.+14     	; 0x19fa <__divmodhi4_exit>

000019ec <__divmodhi4_neg1>:
    19ec:	90 95       	com	r25
    19ee:	81 95       	neg	r24
    19f0:	9f 4f       	sbci	r25, 0xFF	; 255
    19f2:	08 95       	ret

000019f4 <__divmodhi4_neg2>:
    19f4:	70 95       	com	r23
    19f6:	61 95       	neg	r22
    19f8:	7f 4f       	sbci	r23, 0xFF	; 255

000019fa <__divmodhi4_exit>:
    19fa:	08 95       	ret

000019fc <__udivmodhi4>:
    19fc:	aa 1b       	sub	r26, r26
    19fe:	bb 1b       	sub	r27, r27
    1a00:	51 e1       	ldi	r21, 0x11	; 17
    1a02:	07 c0       	rjmp	.+14     	; 0x1a12 <__udivmodhi4_ep>

00001a04 <__udivmodhi4_loop>:
    1a04:	aa 1f       	adc	r26, r26
    1a06:	bb 1f       	adc	r27, r27
    1a08:	a6 17       	cp	r26, r22
    1a0a:	b7 07       	cpc	r27, r23
    1a0c:	10 f0       	brcs	.+4      	; 0x1a12 <__udivmodhi4_ep>
    1a0e:	a6 1b       	sub	r26, r22
    1a10:	b7 0b       	sbc	r27, r23

00001a12 <__udivmodhi4_ep>:
    1a12:	88 1f       	adc	r24, r24
    1a14:	99 1f       	adc	r25, r25
    1a16:	5a 95       	dec	r21
    1a18:	a9 f7       	brne	.-22     	; 0x1a04 <__udivmodhi4_loop>
    1a1a:	80 95       	com	r24
    1a1c:	90 95       	com	r25
    1a1e:	bc 01       	movw	r22, r24
    1a20:	cd 01       	movw	r24, r26
    1a22:	08 95       	ret

00001a24 <__utoa_ncheck>:
    1a24:	bb 27       	eor	r27, r27

00001a26 <__utoa_common>:
    1a26:	fb 01       	movw	r30, r22
    1a28:	55 27       	eor	r21, r21
    1a2a:	aa 27       	eor	r26, r26
    1a2c:	88 0f       	add	r24, r24
    1a2e:	99 1f       	adc	r25, r25
    1a30:	aa 1f       	adc	r26, r26
    1a32:	a4 17       	cp	r26, r20
    1a34:	10 f0       	brcs	.+4      	; 0x1a3a <__utoa_common+0x14>
    1a36:	a4 1b       	sub	r26, r20
    1a38:	83 95       	inc	r24
    1a3a:	50 51       	subi	r21, 0x10	; 16
    1a3c:	b9 f7       	brne	.-18     	; 0x1a2c <__utoa_common+0x6>
    1a3e:	a0 5d       	subi	r26, 0xD0	; 208
    1a40:	aa 33       	cpi	r26, 0x3A	; 58
    1a42:	08 f0       	brcs	.+2      	; 0x1a46 <__utoa_common+0x20>
    1a44:	a9 5d       	subi	r26, 0xD9	; 217
    1a46:	a1 93       	st	Z+, r26
    1a48:	00 97       	sbiw	r24, 0x00	; 0
    1a4a:	79 f7       	brne	.-34     	; 0x1a2a <__utoa_common+0x4>
    1a4c:	b1 11       	cpse	r27, r1
    1a4e:	b1 93       	st	Z+, r27
    1a50:	11 92       	st	Z+, r1
    1a52:	cb 01       	movw	r24, r22
    1a54:	0c 94 2c 0d 	jmp	0x1a58	; 0x1a58 <strrev>

00001a58 <strrev>:
    1a58:	dc 01       	movw	r26, r24
    1a5a:	fc 01       	movw	r30, r24
    1a5c:	67 2f       	mov	r22, r23
    1a5e:	71 91       	ld	r23, Z+
    1a60:	77 23       	and	r23, r23
    1a62:	e1 f7       	brne	.-8      	; 0x1a5c <strrev+0x4>
    1a64:	32 97       	sbiw	r30, 0x02	; 2
    1a66:	04 c0       	rjmp	.+8      	; 0x1a70 <strrev+0x18>
    1a68:	7c 91       	ld	r23, X
    1a6a:	6d 93       	st	X+, r22
    1a6c:	70 83       	st	Z, r23
    1a6e:	62 91       	ld	r22, -Z
    1a70:	ae 17       	cp	r26, r30
    1a72:	bf 07       	cpc	r27, r31
    1a74:	c8 f3       	brcs	.-14     	; 0x1a68 <strrev+0x10>
    1a76:	08 95       	ret

00001a78 <eeprom_read_byte>:
    1a78:	f9 99       	sbic	0x1f, 1	; 31
    1a7a:	fe cf       	rjmp	.-4      	; 0x1a78 <eeprom_read_byte>
    1a7c:	92 bd       	out	0x22, r25	; 34
    1a7e:	81 bd       	out	0x21, r24	; 33
    1a80:	f8 9a       	sbi	0x1f, 0	; 31
    1a82:	99 27       	eor	r25, r25
    1a84:	80 b5       	in	r24, 0x20	; 32
    1a86:	08 95       	ret

00001a88 <eeprom_read_dword>:
    1a88:	a6 e1       	ldi	r26, 0x16	; 22
    1a8a:	b0 e0       	ldi	r27, 0x00	; 0
    1a8c:	44 e0       	ldi	r20, 0x04	; 4
    1a8e:	50 e0       	ldi	r21, 0x00	; 0
    1a90:	0c 94 4c 0d 	jmp	0x1a98	; 0x1a98 <eeprom_read_blraw>

00001a94 <eeprom_read_block>:
    1a94:	dc 01       	movw	r26, r24
    1a96:	cb 01       	movw	r24, r22

00001a98 <eeprom_read_blraw>:
    1a98:	fc 01       	movw	r30, r24
    1a9a:	f9 99       	sbic	0x1f, 1	; 31
    1a9c:	fe cf       	rjmp	.-4      	; 0x1a9a <eeprom_read_blraw+0x2>
    1a9e:	06 c0       	rjmp	.+12     	; 0x1aac <eeprom_read_blraw+0x14>
    1aa0:	f2 bd       	out	0x22, r31	; 34
    1aa2:	e1 bd       	out	0x21, r30	; 33
    1aa4:	f8 9a       	sbi	0x1f, 0	; 31
    1aa6:	31 96       	adiw	r30, 0x01	; 1
    1aa8:	00 b4       	in	r0, 0x20	; 32
    1aaa:	0d 92       	st	X+, r0
    1aac:	41 50       	subi	r20, 0x01	; 1
    1aae:	50 40       	sbci	r21, 0x00	; 0
    1ab0:	b8 f7       	brcc	.-18     	; 0x1aa0 <eeprom_read_blraw+0x8>
    1ab2:	08 95       	ret

00001ab4 <_exit>:
    1ab4:	f8 94       	cli

00001ab6 <__stop_program>:
    1ab6:	ff cf       	rjmp	.-2      	; 0x1ab6 <__stop_program>
