
SoftwareUART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000026  00800100  00000204  00000298  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000204  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800126  00800126  000002be  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002be  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  00000330  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008c4  00000000  00000000  00000388  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000738  00000000  00000000  00000c4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003fa  00000000  00000000  00001384  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d0  00000000  00000000  00001780  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000423  00000000  00000000  00001850  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001f4  00000000  00000000  00001c73  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00001e67  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_5>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e0       	ldi	r30, 0x04	; 4
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 32       	cpi	r26, 0x26	; 38
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e2       	ldi	r26, 0x26	; 38
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 32       	cpi	r26, 0x28	; 40
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <main>
  9e:	0c 94 00 01 	jmp	0x200	; 0x200 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_5>:

volatile unsigned char update = 0;
volatile unsigned char readChar = 0;
volatile unsigned char readBits = 0;

ISR(PCINT2_vect) {
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	8f 93       	push	r24
  b2:	9f 93       	push	r25
  b4:	ef 93       	push	r30
  b6:	ff 93       	push	r31
	cli();
  b8:	f8 94       	cli
	unsigned char i;
	if (!(PIND & (1<<PORTD2))) {
  ba:	4a 99       	sbic	0x09, 2	; 9
  bc:	1f c0       	rjmp	.+62     	; 0xfc <__vector_5+0x56>
		for (i=0, readChar=0; i<8; i++) {
  be:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <__data_end>
  c2:	98 e0       	ldi	r25, 0x08	; 8
			readChar >>= 1;
			TCCR1B |= (1 << CS10);
  c4:	e1 e8       	ldi	r30, 0x81	; 129
  c6:	f0 e0       	ldi	r31, 0x00	; 0
ISR(PCINT2_vect) {
	cli();
	unsigned char i;
	if (!(PIND & (1<<PORTD2))) {
		for (i=0, readChar=0; i<8; i++) {
			readChar >>= 1;
  c8:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <__data_end>
  cc:	86 95       	lsr	r24
  ce:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__data_end>
			TCCR1B |= (1 << CS10);
  d2:	80 81       	ld	r24, Z
  d4:	81 60       	ori	r24, 0x01	; 1
  d6:	80 83       	st	Z, r24
			while (!(TIFR1 & (1 << OCF1A)));
  d8:	b1 9b       	sbis	0x16, 1	; 22
  da:	fe cf       	rjmp	.-4      	; 0xd8 <__vector_5+0x32>
			TCCR1B &= ~(1 << CS10);
  dc:	80 81       	ld	r24, Z
  de:	8e 7f       	andi	r24, 0xFE	; 254
  e0:	80 83       	st	Z, r24
			if (PIND & (1<<PORTD2)) readChar |= 0x80;
  e2:	4a 9b       	sbis	0x09, 2	; 9
  e4:	05 c0       	rjmp	.+10     	; 0xf0 <__vector_5+0x4a>
  e6:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <__data_end>
  ea:	80 68       	ori	r24, 0x80	; 128
  ec:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__data_end>
			TIFR1 = (TIFR1 | (1 << OCF1A));
  f0:	b1 9a       	sbi	0x16, 1	; 22
  f2:	91 50       	subi	r25, 0x01	; 1

ISR(PCINT2_vect) {
	cli();
	unsigned char i;
	if (!(PIND & (1<<PORTD2))) {
		for (i=0, readChar=0; i<8; i++) {
  f4:	49 f7       	brne	.-46     	; 0xc8 <__vector_5+0x22>
			while (!(TIFR1 & (1 << OCF1A)));
			TCCR1B &= ~(1 << CS10);
			if (PIND & (1<<PORTD2)) readChar |= 0x80;
			TIFR1 = (TIFR1 | (1 << OCF1A));
		}
		update = 1;
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <update>
		//testSoftwareUARTSend();
	}
	sei();
  fc:	78 94       	sei
}
  fe:	ff 91       	pop	r31
 100:	ef 91       	pop	r30
 102:	9f 91       	pop	r25
 104:	8f 91       	pop	r24
 106:	0f 90       	pop	r0
 108:	0f be       	out	0x3f, r0	; 63
 10a:	0f 90       	pop	r0
 10c:	1f 90       	pop	r1
 10e:	18 95       	reti

00000110 <initSoftwareUARTSend>:
}

void testTimer();

void initSoftwareUARTSend() {
	DDRD |= (1<<PORTD3);
 110:	53 9a       	sbi	0x0a, 3	; 10
	TCCR1B |= (1 << WGM12);
 112:	e1 e8       	ldi	r30, 0x81	; 129
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	80 81       	ld	r24, Z
 118:	88 60       	ori	r24, 0x08	; 8
 11a:	80 83       	st	Z, r24
	OCR1A = 1152;
 11c:	80 e8       	ldi	r24, 0x80	; 128
 11e:	94 e0       	ldi	r25, 0x04	; 4
 120:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 124:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 128:	08 95       	ret

0000012a <initSoftwareUARTReceive>:
}

void initSoftwareUARTReceive() {
	DDRD &= ~(1<<PORTD2);
 12a:	52 98       	cbi	0x0a, 2	; 10
	PORTD |= (1<<PORTD2);
 12c:	5a 9a       	sbi	0x0b, 2	; 11
	TCCR1B |= (1 << WGM12);
 12e:	e1 e8       	ldi	r30, 0x81	; 129
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	80 81       	ld	r24, Z
 134:	88 60       	ori	r24, 0x08	; 8
 136:	80 83       	st	Z, r24
	OCR1A = 1152;
 138:	80 e8       	ldi	r24, 0x80	; 128
 13a:	94 e0       	ldi	r25, 0x04	; 4
 13c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 140:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	PCICR |= (1 << PCIE2);
 144:	e8 e6       	ldi	r30, 0x68	; 104
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	80 81       	ld	r24, Z
 14a:	84 60       	ori	r24, 0x04	; 4
 14c:	80 83       	st	Z, r24
	PCMSK2 |= (1 << PCINT18);
 14e:	ed e6       	ldi	r30, 0x6D	; 109
 150:	f0 e0       	ldi	r31, 0x00	; 0
 152:	80 81       	ld	r24, Z
 154:	84 60       	ori	r24, 0x04	; 4
 156:	80 83       	st	Z, r24
	sei();
 158:	78 94       	sei
 15a:	08 95       	ret

0000015c <sendBit>:
	}
	sendBit(1);
}

void sendBit(unsigned char b) {
	if (b)
 15c:	88 23       	and	r24, r24
 15e:	11 f0       	breq	.+4      	; 0x164 <sendBit+0x8>
		PORTD = PORTD | (1 << PORTD3);
 160:	5b 9a       	sbi	0x0b, 3	; 11
 162:	01 c0       	rjmp	.+2      	; 0x166 <sendBit+0xa>
	else
		PORTD = PORTD & ~(1 << PORTD3);
 164:	5b 98       	cbi	0x0b, 3	; 11
	TCCR1B |= (1 << CS10);
 166:	e1 e8       	ldi	r30, 0x81	; 129
 168:	f0 e0       	ldi	r31, 0x00	; 0
 16a:	80 81       	ld	r24, Z
 16c:	81 60       	ori	r24, 0x01	; 1
 16e:	80 83       	st	Z, r24
	while (!(TIFR1 & (1 << OCF1A)));
 170:	b1 9b       	sbis	0x16, 1	; 22
 172:	fe cf       	rjmp	.-4      	; 0x170 <sendBit+0x14>
	TIFR1 = (TIFR1 | (1 << OCF1A));
 174:	b1 9a       	sbi	0x16, 1	; 22
	TCCR1B &= ~(1 << CS10);
 176:	e1 e8       	ldi	r30, 0x81	; 129
 178:	f0 e0       	ldi	r31, 0x00	; 0
 17a:	80 81       	ld	r24, Z
 17c:	8e 7f       	andi	r24, 0xFE	; 254
 17e:	80 83       	st	Z, r24
 180:	08 95       	ret

00000182 <sendByte>:
	for (i=0; c[i] != 0; i++) {
		sendByte(c[i]);
	}
}

void sendByte(unsigned char c) {
 182:	cf 93       	push	r28
 184:	df 93       	push	r29
 186:	d8 2f       	mov	r29, r24
	unsigned char i;
	sendBit(0);
 188:	80 e0       	ldi	r24, 0x00	; 0
 18a:	0e 94 ae 00 	call	0x15c	; 0x15c <sendBit>
 18e:	c8 e0       	ldi	r28, 0x08	; 8
	for (i = 0; i < 8; i++) {
		sendBit(c & 0x01);
 190:	8d 2f       	mov	r24, r29
 192:	81 70       	andi	r24, 0x01	; 1
 194:	0e 94 ae 00 	call	0x15c	; 0x15c <sendBit>
		c >>= 1;
 198:	d6 95       	lsr	r29
 19a:	c1 50       	subi	r28, 0x01	; 1
}

void sendByte(unsigned char c) {
	unsigned char i;
	sendBit(0);
	for (i = 0; i < 8; i++) {
 19c:	c9 f7       	brne	.-14     	; 0x190 <sendByte+0xe>
		sendBit(c & 0x01);
		c >>= 1;
	}
	sendBit(1);
 19e:	81 e0       	ldi	r24, 0x01	; 1
 1a0:	0e 94 ae 00 	call	0x15c	; 0x15c <sendBit>
}
 1a4:	df 91       	pop	r29
 1a6:	cf 91       	pop	r28
 1a8:	08 95       	ret

000001aa <serialPrint>:

void testSoftwareUARTSend() {
	serialPrint("Pipoca na panela comeca a arrebentar\n");
}

void serialPrint(unsigned char *c) {
 1aa:	0f 93       	push	r16
 1ac:	1f 93       	push	r17
 1ae:	cf 93       	push	r28
 1b0:	fc 01       	movw	r30, r24
	unsigned char i;
	for (i=0; c[i] != 0; i++) {
 1b2:	80 81       	ld	r24, Z
 1b4:	88 23       	and	r24, r24
 1b6:	59 f0       	breq	.+22     	; 0x1ce <serialPrint+0x24>
 1b8:	8f 01       	movw	r16, r30
 1ba:	c0 e0       	ldi	r28, 0x00	; 0
		sendByte(c[i]);
 1bc:	0e 94 c1 00 	call	0x182	; 0x182 <sendByte>
	serialPrint("Pipoca na panela comeca a arrebentar\n");
}

void serialPrint(unsigned char *c) {
	unsigned char i;
	for (i=0; c[i] != 0; i++) {
 1c0:	cf 5f       	subi	r28, 0xFF	; 255
 1c2:	f8 01       	movw	r30, r16
 1c4:	ec 0f       	add	r30, r28
 1c6:	f1 1d       	adc	r31, r1
 1c8:	80 81       	ld	r24, Z
 1ca:	81 11       	cpse	r24, r1
 1cc:	f7 cf       	rjmp	.-18     	; 0x1bc <serialPrint+0x12>
		sendByte(c[i]);
	}
}
 1ce:	cf 91       	pop	r28
 1d0:	1f 91       	pop	r17
 1d2:	0f 91       	pop	r16
 1d4:	08 95       	ret

000001d6 <testSoftwareUARTSend>:
	PCMSK2 |= (1 << PCINT18);
	sei();
}

void testSoftwareUARTSend() {
	serialPrint("Pipoca na panela comeca a arrebentar\n");
 1d6:	80 e0       	ldi	r24, 0x00	; 0
 1d8:	91 e0       	ldi	r25, 0x01	; 1
 1da:	0e 94 d5 00 	call	0x1aa	; 0x1aa <serialPrint>
 1de:	08 95       	ret

000001e0 <main>:
	//update = 1;
//}

int main(void)
{
	initSoftwareUARTSend();
 1e0:	0e 94 88 00 	call	0x110	; 0x110 <initSoftwareUARTSend>
	initSoftwareUARTReceive();
 1e4:	0e 94 95 00 	call	0x12a	; 0x12a <initSoftwareUARTReceive>
			//cli();
			//sendByte(readChar);
			//update = 0;
			//sei();
		//}
		testSoftwareUARTSend();
 1e8:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <testSoftwareUARTSend>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ec:	2f ef       	ldi	r18, 0xFF	; 255
 1ee:	8f ed       	ldi	r24, 0xDF	; 223
 1f0:	90 e1       	ldi	r25, 0x10	; 16
 1f2:	21 50       	subi	r18, 0x01	; 1
 1f4:	80 40       	sbci	r24, 0x00	; 0
 1f6:	90 40       	sbci	r25, 0x00	; 0
 1f8:	e1 f7       	brne	.-8      	; 0x1f2 <main+0x12>
 1fa:	00 c0       	rjmp	.+0      	; 0x1fc <main+0x1c>
 1fc:	00 00       	nop
 1fe:	f4 cf       	rjmp	.-24     	; 0x1e8 <main+0x8>

00000200 <_exit>:
 200:	f8 94       	cli

00000202 <__stop_program>:
 202:	ff cf       	rjmp	.-2      	; 0x202 <__stop_program>
